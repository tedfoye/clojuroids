var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_DEFINES;
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && opt_object !== undefined) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
      value = goog.global.CLOSURE_DEFINES[name];
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.DEBUG) {
    if (!caller) {
      throw Error("arguments.caller not defined.  goog.base() expects not " + "to be running in strict mode. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
    }
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;").replace(goog.string.singleQuoteRe_, "\x26#39;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.singleQuoteRe_, "\x26#39;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /"/g;
goog.string.singleQuoteRe_ = /'/g;
goog.string.allRe_ = /[&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2268";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__8712__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__8712 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__8712__delegate.call(this, args);
    };
    G__8712.cljs$lang$maxFixedArity = 0;
    G__8712.cljs$lang$applyTo = function(arglist__8713) {
      var args = cljs.core.seq(arglist__8713);
      return G__8712__delegate(args);
    };
    G__8712.cljs$core$IFn$_invoke$arity$variadic = G__8712__delegate;
    return G__8712;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3531__auto__ = ty;
    if (cljs.core.truth_(and__3531__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3531__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4399__auto___8714 = len;
  var i_8715 = 0;
  while (true) {
    if (i_8715 < n__4399__auto___8714) {
      new_arr[i_8715] = arr[i_8715];
      var G__8716 = i_8715 + 1;
      i_8715 = G__8716;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__8717__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__8717 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8717__delegate.call(this, array, i, idxs);
    };
    G__8717.cljs$lang$maxFixedArity = 2;
    G__8717.cljs$lang$applyTo = function(arglist__8718) {
      var array = cljs.core.first(arglist__8718);
      arglist__8718 = cljs.core.next(arglist__8718);
      var i = cljs.core.first(arglist__8718);
      var idxs = cljs.core.rest(arglist__8718);
      return G__8717__delegate(array, i, idxs);
    };
    G__8717.cljs$core$IFn$_invoke$arity$variadic = G__8717__delegate;
    return G__8717;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__8719__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__8719 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__8719__delegate.call(this, array, idx, idx2, idxv);
    };
    G__8719.cljs$lang$maxFixedArity = 3;
    G__8719.cljs$lang$applyTo = function(arglist__8720) {
      var array = cljs.core.first(arglist__8720);
      arglist__8720 = cljs.core.next(arglist__8720);
      var idx = cljs.core.first(arglist__8720);
      arglist__8720 = cljs.core.next(arglist__8720);
      var idx2 = cljs.core.first(arglist__8720);
      var idxv = cljs.core.rest(arglist__8720);
      return G__8719__delegate(array, idx, idx2, idxv);
    };
    G__8719.cljs$core$IFn$_invoke$arity$variadic = G__8719__delegate;
    return G__8719;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj8722 = {};
  return obj8722;
}();
cljs.core.IFn = function() {
  var obj8724 = {};
  return obj8724;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__3531__auto__ = this$;
      if (and__3531__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__4170__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3543__auto__ = cljs.core._invoke[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._invoke["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj8726 = {};
  return obj8726;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3531__auto__ = value;
    if (and__3531__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4170__auto__ = value == null ? null : value;
    return function() {
      var or__3543__auto__ = cljs.core._clone[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._clone["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj8728 = {};
  return obj8728;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._count[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._count["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj8730 = {};
  return obj8730;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._empty[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._empty["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj8732 = {};
  return obj8732;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._conj[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._conj["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj8734 = {};
  return obj8734;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3531__auto__ = coll;
      if (and__3531__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4170__auto__ = coll == null ? null : coll;
      return function() {
        var or__3543__auto__ = cljs.core._nth[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._nth["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3531__auto__ = coll;
      if (and__3531__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4170__auto__ = coll == null ? null : coll;
      return function() {
        var or__3543__auto__ = cljs.core._nth[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._nth["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj8736 = {};
  return obj8736;
}();
cljs.core.ISeq = function() {
  var obj8738 = {};
  return obj8738;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._first[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._first["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._rest[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._rest["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj8740 = {};
  return obj8740;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._next[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._next["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj8742 = {};
  return obj8742;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._lookup[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._lookup["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._lookup[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._lookup["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj8744 = {};
  return obj8744;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._assoc[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._assoc["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj8746 = {};
  return obj8746;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._dissoc[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._dissoc["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj8748 = {};
  return obj8748;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._key[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._key["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._val[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._val["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj8750 = {};
  return obj8750;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._disjoin[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._disjoin["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj8752 = {};
  return obj8752;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._peek[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._peek["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._pop[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._pop["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj8754 = {};
  return obj8754;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._assoc_n[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj8756 = {};
  return obj8756;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._deref[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._deref["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj8758 = {};
  return obj8758;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj8760 = {};
  return obj8760;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._meta[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._meta["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj8762 = {};
  return obj8762;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._with_meta[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._with_meta["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj8764 = {};
  return obj8764;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3531__auto__ = coll;
      if (and__3531__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4170__auto__ = coll == null ? null : coll;
      return function() {
        var or__3543__auto__ = cljs.core._reduce[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._reduce["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3531__auto__ = coll;
      if (and__3531__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4170__auto__ = coll == null ? null : coll;
      return function() {
        var or__3543__auto__ = cljs.core._reduce[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._reduce["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj8766 = {};
  return obj8766;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj8768 = {};
  return obj8768;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._equiv[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._equiv["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj8770 = {};
  return obj8770;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._hash[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._hash["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj8772 = {};
  return obj8772;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._seq[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._seq["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj8774 = {};
  return obj8774;
}();
cljs.core.IList = function() {
  var obj8776 = {};
  return obj8776;
}();
cljs.core.IRecord = function() {
  var obj8778 = {};
  return obj8778;
}();
cljs.core.IReversible = function() {
  var obj8780 = {};
  return obj8780;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._rseq[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._rseq["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj8782 = {};
  return obj8782;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._entry_key[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._entry_key["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._comparator[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._comparator["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj8784 = {};
  return obj8784;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3531__auto__ = writer;
    if (and__3531__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4170__auto__ = writer == null ? null : writer;
    return function() {
      var or__3543__auto__ = cljs.core._write[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._write["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3531__auto__ = writer;
    if (and__3531__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4170__auto__ = writer == null ? null : writer;
    return function() {
      var or__3543__auto__ = cljs.core._flush[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._flush["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj8786 = {};
  return obj8786;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._pr_writer[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj8788 = {};
  return obj8788;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3531__auto__ = d;
    if (and__3531__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4170__auto__ = d == null ? null : d;
    return function() {
      var or__3543__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj8790 = {};
  return obj8790;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3531__auto__ = this$;
    if (and__3531__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4170__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3543__auto__ = cljs.core._notify_watches[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3531__auto__ = this$;
    if (and__3531__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4170__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3543__auto__ = cljs.core._add_watch[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._add_watch["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3531__auto__ = this$;
    if (and__3531__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4170__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3543__auto__ = cljs.core._remove_watch[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj8792 = {};
  return obj8792;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._as_transient[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._as_transient["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj8794 = {};
  return obj8794;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj8796 = {};
  return obj8796;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj8798 = {};
  return obj8798;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj8800 = {};
  return obj8800;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj8802 = {};
  return obj8802;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3531__auto__ = tcoll;
    if (and__3531__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4170__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3543__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj8804 = {};
  return obj8804;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._compare[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._compare["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj8806 = {};
  return obj8806;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._drop_first[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._drop_first["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj8808 = {};
  return obj8808;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._chunked_first[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj8810 = {};
  return obj8810;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3531__auto__ = coll;
    if (and__3531__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4170__auto__ = coll == null ? null : coll;
    return function() {
      var or__3543__auto__ = cljs.core._chunked_next[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj8812 = {};
  return obj8812;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._name[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._name["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._namespace[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._namespace["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__8813 = i + 2;
        var G__8814 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__8813;
        h1 = G__8814;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj8816 = {};
  return obj8816;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__8817 = i + 1;
          var G__8818 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__8817;
          hash = G__8818;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj8822 = {};
      return obj8822;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__8824 = o;
    if (G__8824) {
      var bit__4186__auto__ = G__8824.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4186__auto__ || G__8824.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3531__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3531__auto__) {
        return b.ns;
      } else {
        return and__3531__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", -1987822328)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__3954__auto__ = self__._hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__8826 = null;
  var G__8826__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__8826__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__8826 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8826__2.call(this, self__, coll);
      case 3:
        return G__8826__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8826;
}();
cljs.core.Symbol.prototype.apply = function(self__, args8825) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args8825)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__8828 = value;
  if (G__8828) {
    var bit__4193__auto__ = G__8828.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4193__auto__ || G__8828.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__8828.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__8828);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__8828);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__8830 = coll;
      if (G__8830) {
        var bit__4186__auto__ = G__8830.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4186__auto__ || G__8830.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__8832 = coll;
      if (G__8832) {
        var bit__4186__auto__ = G__8832.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4186__auto__ || G__8832.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__8834 = coll;
      if (G__8834) {
        var bit__4186__auto__ = G__8834.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4186__auto__ || G__8834.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__8836 = coll;
      if (G__8836) {
        var bit__4186__auto__ = G__8836.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4186__auto__ || G__8836.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__8837__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__8838 = y;
            var G__8839 = cljs.core.first.call(null, more);
            var G__8840 = cljs.core.next.call(null, more);
            x = G__8838;
            y = G__8839;
            more = G__8840;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__8837 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8837__delegate.call(this, x, y, more);
    };
    G__8837.cljs$lang$maxFixedArity = 2;
    G__8837.cljs$lang$applyTo = function(arglist__8841) {
      var x = cljs.core.first(arglist__8841);
      arglist__8841 = cljs.core.next(arglist__8841);
      var y = cljs.core.first(arglist__8841);
      var more = cljs.core.rest(arglist__8841);
      return G__8837__delegate(x, y, more);
    };
    G__8837.cljs$core$IFn$_invoke$arity$variadic = G__8837__delegate;
    return G__8837;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8842 = n + 1;
      var G__8843 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__8844 = cljs.core.next.call(null, coll__$1);
      n = G__8842;
      hash_code = G__8843;
      coll__$1 = G__8844;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8845 = n + 1;
      var G__8846 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__8847 = cljs.core.next.call(null, coll__$1);
      n = G__8845;
      hash_code = G__8846;
      coll__$1 = G__8847;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__8848 = nval;
            var G__8849 = n + 1;
            val = G__8848;
            n = G__8849;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__8850 = nval;
          var G__8851 = n + 1;
          val__$1 = G__8850;
          n = G__8851;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__8852 = nval;
          var G__8853 = n + 1;
          val__$1 = G__8852;
          n = G__8853;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__8854 = nval;
            var G__8855 = n + 1;
            val = G__8854;
            n = G__8855;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__8856 = nval;
          var G__8857 = n + 1;
          val__$1 = G__8856;
          n = G__8857;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__8858 = nval;
          var G__8859 = n + 1;
          val__$1 = G__8858;
          n = G__8859;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__8861 = x;
  if (G__8861) {
    var bit__4193__auto__ = G__8861.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4193__auto__ || G__8861.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__8861.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__8861);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__8861);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__8863 = x;
  if (G__8863) {
    var bit__4193__auto__ = G__8863.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4193__auto__ || G__8863.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__8863.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__8863);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__8863);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__8864 = sn;
      s = G__8864;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__8865__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__8866 = conj.call(null, coll, x);
          var G__8867 = cljs.core.first.call(null, xs);
          var G__8868 = cljs.core.next.call(null, xs);
          coll = G__8866;
          x = G__8867;
          xs = G__8868;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__8865 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8865__delegate.call(this, coll, x, xs);
    };
    G__8865.cljs$lang$maxFixedArity = 2;
    G__8865.cljs$lang$applyTo = function(arglist__8869) {
      var coll = cljs.core.first(arglist__8869);
      arglist__8869 = cljs.core.next(arglist__8869);
      var x = cljs.core.first(arglist__8869);
      var xs = cljs.core.rest(arglist__8869);
      return G__8865__delegate(coll, x, xs);
    };
    G__8865.cljs$core$IFn$_invoke$arity$variadic = G__8865__delegate;
    return G__8865;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__8870 = cljs.core.next.call(null, s);
      var G__8871 = acc + 1;
      s = G__8870;
      acc = G__8871;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__8873 = coll;
      if (G__8873) {
        var bit__4186__auto__ = G__8873.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4186__auto__ || G__8873.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__8874 = cljs.core.next.call(null, coll);
              var G__8875 = n - 1;
              coll = G__8874;
              n = G__8875;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__8876 = cljs.core.next.call(null, coll);
              var G__8877 = n - 1;
              var G__8878 = not_found;
              coll = G__8876;
              n = G__8877;
              not_found = G__8878;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__8883 = coll;
          if (G__8883) {
            var bit__4186__auto__ = G__8883.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4186__auto__ || G__8883.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__8884 = coll;
                  if (G__8884) {
                    var bit__4193__auto__ = G__8884.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4193__auto__ || G__8884.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__8884.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8884);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8884);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__8885 = coll;
          if (G__8885) {
            var bit__4186__auto__ = G__8885.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4186__auto__ || G__8885.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__8886 = coll;
                  if (G__8886) {
                    var bit__4193__auto__ = G__8886.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4193__auto__ || G__8886.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__8886.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8886);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8886);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                    throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                  } else {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__8889 = o;
        if (G__8889) {
          var bit__4186__auto__ = G__8889.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4186__auto__ || G__8889.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__8890 = o;
        if (G__8890) {
          var bit__4186__auto__ = G__8890.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4186__auto__ || G__8890.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__8891__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__8892 = ret;
          var G__8893 = cljs.core.first.call(null, kvs);
          var G__8894 = cljs.core.second.call(null, kvs);
          var G__8895 = cljs.core.nnext.call(null, kvs);
          coll = G__8892;
          k = G__8893;
          v = G__8894;
          kvs = G__8895;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__8891 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__8891__delegate.call(this, coll, k, v, kvs);
    };
    G__8891.cljs$lang$maxFixedArity = 3;
    G__8891.cljs$lang$applyTo = function(arglist__8896) {
      var coll = cljs.core.first(arglist__8896);
      arglist__8896 = cljs.core.next(arglist__8896);
      var k = cljs.core.first(arglist__8896);
      arglist__8896 = cljs.core.next(arglist__8896);
      var v = cljs.core.first(arglist__8896);
      var kvs = cljs.core.rest(arglist__8896);
      return G__8891__delegate(coll, k, v, kvs);
    };
    G__8891.cljs$core$IFn$_invoke$arity$variadic = G__8891__delegate;
    return G__8891;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__8897__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__8898 = ret;
            var G__8899 = cljs.core.first.call(null, ks);
            var G__8900 = cljs.core.next.call(null, ks);
            coll = G__8898;
            k = G__8899;
            ks = G__8900;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__8897 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8897__delegate.call(this, coll, k, ks);
    };
    G__8897.cljs$lang$maxFixedArity = 2;
    G__8897.cljs$lang$applyTo = function(arglist__8901) {
      var coll = cljs.core.first(arglist__8901);
      arglist__8901 = cljs.core.next(arglist__8901);
      var k = cljs.core.first(arglist__8901);
      var ks = cljs.core.rest(arglist__8901);
      return G__8897__delegate(coll, k, ks);
    };
    G__8897.cljs$core$IFn$_invoke$arity$variadic = G__8897__delegate;
    return G__8897;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3543__auto__ = goog.isFunction(f);
  if (or__3543__auto__) {
    return or__3543__auto__;
  } else {
    var G__8905 = f;
    if (G__8905) {
      var bit__4193__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3543__auto____$1 = bit__4193__auto__;
        if (cljs.core.truth_(or__3543__auto____$1)) {
          return or__3543__auto____$1;
        } else {
          return G__8905.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__8905.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__8905);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__8905);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__8907 = null;
  var G__8907__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__8907__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__8907__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__8907__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__8907__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__8907__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__8907__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__8907__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__8907__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__8907__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8907__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8907__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8907__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8907__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8907__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8907__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8907__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8907__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8907__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8907__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8907__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8907__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__8907 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8907__1.call(this, self__);
      case 2:
        return G__8907__2.call(this, self__, a);
      case 3:
        return G__8907__3.call(this, self__, a, b);
      case 4:
        return G__8907__4.call(this, self__, a, b, c);
      case 5:
        return G__8907__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8907__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8907__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8907__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8907__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8907__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8907__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8907__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8907__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8907__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8907__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8907__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8907__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8907__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8907__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8907__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8907__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8907__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__8907;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args8906) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args8906)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__8911 = o;
    if (G__8911) {
      var bit__4193__auto__ = G__8911.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4193__auto__ || G__8911.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__8911.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__8911);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__8911);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3531__auto__ = !(o == null);
    if (and__3531__auto__) {
      var G__8915 = o;
      if (G__8915) {
        var bit__4193__auto__ = G__8915.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4193__auto__ || G__8915.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__8915.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__8915);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__8915);
      }
    } else {
      return and__3531__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__8916__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__8917 = ret;
            var G__8918 = cljs.core.first.call(null, ks);
            var G__8919 = cljs.core.next.call(null, ks);
            coll = G__8917;
            k = G__8918;
            ks = G__8919;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__8916 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8916__delegate.call(this, coll, k, ks);
    };
    G__8916.cljs$lang$maxFixedArity = 2;
    G__8916.cljs$lang$applyTo = function(arglist__8920) {
      var coll = cljs.core.first(arglist__8920);
      arglist__8920 = cljs.core.next(arglist__8920);
      var k = cljs.core.first(arglist__8920);
      var ks = cljs.core.rest(arglist__8920);
      return G__8916__delegate(coll, k, ks);
    };
    G__8916.cljs$core$IFn$_invoke$arity$variadic = G__8916__delegate;
    return G__8916;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__8922 = x;
    if (G__8922) {
      var bit__4193__auto__ = G__8922.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4193__auto__ || G__8922.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__8922.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__8922);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__8922);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__8924 = x;
    if (G__8924) {
      var bit__4193__auto__ = G__8924.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4193__auto__ || G__8924.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__8924.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__8924);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__8924);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__8926 = x;
  if (G__8926) {
    var bit__4193__auto__ = G__8926.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4193__auto__ || G__8926.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__8926.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__8926);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__8926);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__8928 = x;
  if (G__8928) {
    var bit__4193__auto__ = G__8928.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4193__auto__ || G__8928.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__8928.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__8928);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__8928);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__8930 = x;
  if (G__8930) {
    var bit__4193__auto__ = G__8930.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4193__auto__ || G__8930.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__8930.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__8930);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__8930);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__8932 = x;
  if (G__8932) {
    var bit__4193__auto__ = G__8932.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4193__auto__ || G__8932.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__8932.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__8932);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__8932);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__8934 = x;
    if (G__8934) {
      var bit__4193__auto__ = G__8934.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4193__auto__ || G__8934.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__8934.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__8934);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__8934);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__8936 = x;
  if (G__8936) {
    var bit__4193__auto__ = G__8936.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4193__auto__ || G__8936.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__8936.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__8936);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__8936);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__8938 = x;
  if (G__8938) {
    var bit__4186__auto__ = G__8938.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4186__auto__ || G__8938.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj8942 = {};
    return obj8942;
  };
  var js_obj__1 = function() {
    var G__8943__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__8943 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__8943__delegate.call(this, keyvals);
    };
    G__8943.cljs$lang$maxFixedArity = 0;
    G__8943.cljs$lang$applyTo = function(arglist__8944) {
      var keyvals = cljs.core.seq(arglist__8944);
      return G__8943__delegate(keyvals);
    };
    G__8943.cljs$core$IFn$_invoke$arity$variadic = G__8943__delegate;
    return G__8943;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8945 = i__$1 + 1;
      var G__8946 = j__$1 + 1;
      var G__8947 = len__$1 - 1;
      i__$1 = G__8945;
      j__$1 = G__8946;
      len__$1 = G__8947;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8948 = i__$1 - 1;
      var G__8949 = j__$1 - 1;
      var G__8950 = len__$1 - 1;
      i__$1 = G__8948;
      j__$1 = G__8949;
      len__$1 = G__8950;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj8952 = {};
  return obj8952;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__8954 = s;
    if (G__8954) {
      var bit__4193__auto__ = G__8954.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4193__auto__ || G__8954.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__8954.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8954);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__8954);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__8956 = s;
  if (G__8956) {
    var bit__4193__auto__ = G__8956.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4193__auto__ || G__8956.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__8956.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__8956);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__8956);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3543__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3543__auto__) {
    return or__3543__auto__;
  } else {
    var G__8960 = f;
    if (G__8960) {
      var bit__4193__auto__ = G__8960.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4193__auto__ || G__8960.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__8960.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__8960);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__8960);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__8961__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__8962 = cljs.core.conj.call(null, s, x__$1);
              var G__8963 = etc;
              s = G__8962;
              xs = G__8963;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__8961 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8961__delegate.call(this, x, y, more);
    };
    G__8961.cljs$lang$maxFixedArity = 2;
    G__8961.cljs$lang$applyTo = function(arglist__8964) {
      var x = cljs.core.first(arglist__8964);
      arglist__8964 = cljs.core.next(arglist__8964);
      var y = cljs.core.first(arglist__8964);
      var more = cljs.core.rest(arglist__8964);
      return G__8961__delegate(x, y, more);
    };
    G__8961.cljs$core$IFn$_invoke$arity$variadic = G__8961__delegate;
    return G__8961;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3543__auto__ = cljs.core.seq.call(null, coll);
    if (or__3543__auto__) {
      return or__3543__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__8966 = x;
            if (G__8966) {
              var bit__4186__auto__ = G__8966.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4186__auto__ || G__8966.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__8967 = xs;
        var G__8968 = ys;
        var G__8969 = len;
        var G__8970 = n + 1;
        xs = G__8967;
        ys = G__8968;
        len = G__8969;
        n = G__8970;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__8971 = nval;
          var G__8972 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__8971;
          coll__$1 = G__8972;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__8975 = coll;
      if (G__8975) {
        var bit__4186__auto__ = G__8975.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4186__auto__ || G__8975.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__8976 = coll;
      if (G__8976) {
        var bit__4186__auto__ = G__8976.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4186__auto__ || G__8976.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__8977__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__8977 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8977__delegate.call(this, x, y, more);
    };
    G__8977.cljs$lang$maxFixedArity = 2;
    G__8977.cljs$lang$applyTo = function(arglist__8978) {
      var x = cljs.core.first(arglist__8978);
      arglist__8978 = cljs.core.next(arglist__8978);
      var y = cljs.core.first(arglist__8978);
      var more = cljs.core.rest(arglist__8978);
      return G__8977__delegate(x, y, more);
    };
    G__8977.cljs$core$IFn$_invoke$arity$variadic = G__8977__delegate;
    return G__8977;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__8979__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__8979 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8979__delegate.call(this, x, y, more);
    };
    G__8979.cljs$lang$maxFixedArity = 2;
    G__8979.cljs$lang$applyTo = function(arglist__8980) {
      var x = cljs.core.first(arglist__8980);
      arglist__8980 = cljs.core.next(arglist__8980);
      var y = cljs.core.first(arglist__8980);
      var more = cljs.core.rest(arglist__8980);
      return G__8979__delegate(x, y, more);
    };
    G__8979.cljs$core$IFn$_invoke$arity$variadic = G__8979__delegate;
    return G__8979;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__8981__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__8981 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8981__delegate.call(this, x, y, more);
    };
    G__8981.cljs$lang$maxFixedArity = 2;
    G__8981.cljs$lang$applyTo = function(arglist__8982) {
      var x = cljs.core.first(arglist__8982);
      arglist__8982 = cljs.core.next(arglist__8982);
      var y = cljs.core.first(arglist__8982);
      var more = cljs.core.rest(arglist__8982);
      return G__8981__delegate(x, y, more);
    };
    G__8981.cljs$core$IFn$_invoke$arity$variadic = G__8981__delegate;
    return G__8981;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__8983__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__8983 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8983__delegate.call(this, x, y, more);
    };
    G__8983.cljs$lang$maxFixedArity = 2;
    G__8983.cljs$lang$applyTo = function(arglist__8984) {
      var x = cljs.core.first(arglist__8984);
      arglist__8984 = cljs.core.next(arglist__8984);
      var y = cljs.core.first(arglist__8984);
      var more = cljs.core.rest(arglist__8984);
      return G__8983__delegate(x, y, more);
    };
    G__8983.cljs$core$IFn$_invoke$arity$variadic = G__8983__delegate;
    return G__8983;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__8985__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__8986 = y;
            var G__8987 = cljs.core.first.call(null, more);
            var G__8988 = cljs.core.next.call(null, more);
            x = G__8986;
            y = G__8987;
            more = G__8988;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__8985 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8985__delegate.call(this, x, y, more);
    };
    G__8985.cljs$lang$maxFixedArity = 2;
    G__8985.cljs$lang$applyTo = function(arglist__8989) {
      var x = cljs.core.first(arglist__8989);
      arglist__8989 = cljs.core.next(arglist__8989);
      var y = cljs.core.first(arglist__8989);
      var more = cljs.core.rest(arglist__8989);
      return G__8985__delegate(x, y, more);
    };
    G__8985.cljs$core$IFn$_invoke$arity$variadic = G__8985__delegate;
    return G__8985;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__8990__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__8991 = y;
            var G__8992 = cljs.core.first.call(null, more);
            var G__8993 = cljs.core.next.call(null, more);
            x = G__8991;
            y = G__8992;
            more = G__8993;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__8990 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8990__delegate.call(this, x, y, more);
    };
    G__8990.cljs$lang$maxFixedArity = 2;
    G__8990.cljs$lang$applyTo = function(arglist__8994) {
      var x = cljs.core.first(arglist__8994);
      arglist__8994 = cljs.core.next(arglist__8994);
      var y = cljs.core.first(arglist__8994);
      var more = cljs.core.rest(arglist__8994);
      return G__8990__delegate(x, y, more);
    };
    G__8990.cljs$core$IFn$_invoke$arity$variadic = G__8990__delegate;
    return G__8990;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__8995__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__8996 = y;
            var G__8997 = cljs.core.first.call(null, more);
            var G__8998 = cljs.core.next.call(null, more);
            x = G__8996;
            y = G__8997;
            more = G__8998;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__8995 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__8995__delegate.call(this, x, y, more);
    };
    G__8995.cljs$lang$maxFixedArity = 2;
    G__8995.cljs$lang$applyTo = function(arglist__8999) {
      var x = cljs.core.first(arglist__8999);
      arglist__8999 = cljs.core.next(arglist__8999);
      var y = cljs.core.first(arglist__8999);
      var more = cljs.core.rest(arglist__8999);
      return G__8995__delegate(x, y, more);
    };
    G__8995.cljs$core$IFn$_invoke$arity$variadic = G__8995__delegate;
    return G__8995;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__9000__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__9001 = y;
            var G__9002 = cljs.core.first.call(null, more);
            var G__9003 = cljs.core.next.call(null, more);
            x = G__9001;
            y = G__9002;
            more = G__9003;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9000 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9000__delegate.call(this, x, y, more);
    };
    G__9000.cljs$lang$maxFixedArity = 2;
    G__9000.cljs$lang$applyTo = function(arglist__9004) {
      var x = cljs.core.first(arglist__9004);
      arglist__9004 = cljs.core.next(arglist__9004);
      var y = cljs.core.first(arglist__9004);
      var more = cljs.core.rest(arglist__9004);
      return G__9000__delegate(x, y, more);
    };
    G__9000.cljs$core$IFn$_invoke$arity$variadic = G__9000__delegate;
    return G__9000;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3850__auto__ = x;
    var y__3851__auto__ = y;
    return x__3850__auto__ > y__3851__auto__ ? x__3850__auto__ : y__3851__auto__;
  };
  var max__3 = function() {
    var G__9005__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3850__auto__ = x;
        var y__3851__auto__ = y;
        return x__3850__auto__ > y__3851__auto__ ? x__3850__auto__ : y__3851__auto__;
      }(), more);
    };
    var G__9005 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9005__delegate.call(this, x, y, more);
    };
    G__9005.cljs$lang$maxFixedArity = 2;
    G__9005.cljs$lang$applyTo = function(arglist__9006) {
      var x = cljs.core.first(arglist__9006);
      arglist__9006 = cljs.core.next(arglist__9006);
      var y = cljs.core.first(arglist__9006);
      var more = cljs.core.rest(arglist__9006);
      return G__9005__delegate(x, y, more);
    };
    G__9005.cljs$core$IFn$_invoke$arity$variadic = G__9005__delegate;
    return G__9005;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3857__auto__ = x;
    var y__3858__auto__ = y;
    return x__3857__auto__ < y__3858__auto__ ? x__3857__auto__ : y__3858__auto__;
  };
  var min__3 = function() {
    var G__9007__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3857__auto__ = x;
        var y__3858__auto__ = y;
        return x__3857__auto__ < y__3858__auto__ ? x__3857__auto__ : y__3858__auto__;
      }(), more);
    };
    var G__9007 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9007__delegate.call(this, x, y, more);
    };
    G__9007.cljs$lang$maxFixedArity = 2;
    G__9007.cljs$lang$applyTo = function(arglist__9008) {
      var x = cljs.core.first(arglist__9008);
      arglist__9008 = cljs.core.next(arglist__9008);
      var y = cljs.core.first(arglist__9008);
      var more = cljs.core.rest(arglist__9008);
      return G__9007__delegate(x, y, more);
    };
    G__9007.cljs$core$IFn$_invoke$arity$variadic = G__9007__delegate;
    return G__9007;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__9009__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__9009 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9009__delegate.call(this, x, y, more);
    };
    G__9009.cljs$lang$maxFixedArity = 2;
    G__9009.cljs$lang$applyTo = function(arglist__9010) {
      var x = cljs.core.first(arglist__9010);
      arglist__9010 = cljs.core.next(arglist__9010);
      var y = cljs.core.first(arglist__9010);
      var more = cljs.core.rest(arglist__9010);
      return G__9009__delegate(x, y, more);
    };
    G__9009.cljs$core$IFn$_invoke$arity$variadic = G__9009__delegate;
    return G__9009;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__9011__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__9011 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9011__delegate.call(this, x, y, more);
    };
    G__9011.cljs$lang$maxFixedArity = 2;
    G__9011.cljs$lang$applyTo = function(arglist__9012) {
      var x = cljs.core.first(arglist__9012);
      arglist__9012 = cljs.core.next(arglist__9012);
      var y = cljs.core.first(arglist__9012);
      var more = cljs.core.rest(arglist__9012);
      return G__9011__delegate(x, y, more);
    };
    G__9011.cljs$core$IFn$_invoke$arity$variadic = G__9011__delegate;
    return G__9011;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__9013__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__9013 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9013__delegate.call(this, x, y, more);
    };
    G__9013.cljs$lang$maxFixedArity = 2;
    G__9013.cljs$lang$applyTo = function(arglist__9014) {
      var x = cljs.core.first(arglist__9014);
      arglist__9014 = cljs.core.next(arglist__9014);
      var y = cljs.core.first(arglist__9014);
      var more = cljs.core.rest(arglist__9014);
      return G__9013__delegate(x, y, more);
    };
    G__9013.cljs$core$IFn$_invoke$arity$variadic = G__9013__delegate;
    return G__9013;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__9015__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__9015 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9015__delegate.call(this, x, y, more);
    };
    G__9015.cljs$lang$maxFixedArity = 2;
    G__9015.cljs$lang$applyTo = function(arglist__9016) {
      var x = cljs.core.first(arglist__9016);
      arglist__9016 = cljs.core.next(arglist__9016);
      var y = cljs.core.first(arglist__9016);
      var more = cljs.core.rest(arglist__9016);
      return G__9015__delegate(x, y, more);
    };
    G__9015.cljs$core$IFn$_invoke$arity$variadic = G__9015__delegate;
    return G__9015;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__9017__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__9017 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9017__delegate.call(this, x, y, more);
    };
    G__9017.cljs$lang$maxFixedArity = 2;
    G__9017.cljs$lang$applyTo = function(arglist__9018) {
      var x = cljs.core.first(arglist__9018);
      arglist__9018 = cljs.core.next(arglist__9018);
      var y = cljs.core.first(arglist__9018);
      var more = cljs.core.rest(arglist__9018);
      return G__9017__delegate(x, y, more);
    };
    G__9017.cljs$core$IFn$_invoke$arity$variadic = G__9017__delegate;
    return G__9017;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__9019__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__9019 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9019__delegate.call(this, x, y, more);
    };
    G__9019.cljs$lang$maxFixedArity = 2;
    G__9019.cljs$lang$applyTo = function(arglist__9020) {
      var x = cljs.core.first(arglist__9020);
      arglist__9020 = cljs.core.next(arglist__9020);
      var y = cljs.core.first(arglist__9020);
      var more = cljs.core.rest(arglist__9020);
      return G__9019__delegate(x, y, more);
    };
    G__9019.cljs$core$IFn$_invoke$arity$variadic = G__9019__delegate;
    return G__9019;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__9021__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__9021 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9021__delegate.call(this, x, y, more);
    };
    G__9021.cljs$lang$maxFixedArity = 2;
    G__9021.cljs$lang$applyTo = function(arglist__9022) {
      var x = cljs.core.first(arglist__9022);
      arglist__9022 = cljs.core.next(arglist__9022);
      var y = cljs.core.first(arglist__9022);
      var more = cljs.core.rest(arglist__9022);
      return G__9021__delegate(x, y, more);
    };
    G__9021.cljs$core$IFn$_invoke$arity$variadic = G__9021__delegate;
    return G__9021;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__9023__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__9024 = y;
            var G__9025 = cljs.core.first.call(null, more);
            var G__9026 = cljs.core.next.call(null, more);
            x = G__9024;
            y = G__9025;
            more = G__9026;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__9023 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9023__delegate.call(this, x, y, more);
    };
    G__9023.cljs$lang$maxFixedArity = 2;
    G__9023.cljs$lang$applyTo = function(arglist__9027) {
      var x = cljs.core.first(arglist__9027);
      arglist__9027 = cljs.core.next(arglist__9027);
      var y = cljs.core.first(arglist__9027);
      var more = cljs.core.rest(arglist__9027);
      return G__9023__delegate(x, y, more);
    };
    G__9023.cljs$core$IFn$_invoke$arity$variadic = G__9023__delegate;
    return G__9023;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__9028 = n__$1 - 1;
      var G__9029 = cljs.core.next.call(null, xs);
      n__$1 = G__9028;
      xs = G__9029;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__9030__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__9031 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__9032 = cljs.core.next.call(null, more);
          sb = G__9031;
          more = G__9032;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__9030 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9030__delegate.call(this, x, ys);
    };
    G__9030.cljs$lang$maxFixedArity = 1;
    G__9030.cljs$lang$applyTo = function(arglist__9033) {
      var x = cljs.core.first(arglist__9033);
      var ys = cljs.core.rest(arglist__9033);
      return G__9030__delegate(x, ys);
    };
    G__9030.cljs$core$IFn$_invoke$arity$variadic = G__9030__delegate;
    return G__9030;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__9034 = cljs.core.next.call(null, xs);
            var G__9035 = cljs.core.next.call(null, ys);
            xs = G__9034;
            ys = G__9035;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__9036 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__9037 = cljs.core.next.call(null, s);
        res = G__9036;
        s = G__9037;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__9038 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__9039 = cljs.core.next.call(null, s);
      h = G__9038;
      s = G__9039;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__9040 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__9041 = cljs.core.next.call(null, s__$1);
      h = G__9040;
      s__$1 = G__9041;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__9048_9054 = cljs.core.seq.call(null, fn_map);
  var chunk__9049_9055 = null;
  var count__9050_9056 = 0;
  var i__9051_9057 = 0;
  while (true) {
    if (i__9051_9057 < count__9050_9056) {
      var vec__9052_9058 = cljs.core._nth.call(null, chunk__9049_9055, i__9051_9057);
      var key_name_9059 = cljs.core.nth.call(null, vec__9052_9058, 0, null);
      var f_9060 = cljs.core.nth.call(null, vec__9052_9058, 1, null);
      var str_name_9061 = cljs.core.name.call(null, key_name_9059);
      obj[str_name_9061] = f_9060;
      var G__9062 = seq__9048_9054;
      var G__9063 = chunk__9049_9055;
      var G__9064 = count__9050_9056;
      var G__9065 = i__9051_9057 + 1;
      seq__9048_9054 = G__9062;
      chunk__9049_9055 = G__9063;
      count__9050_9056 = G__9064;
      i__9051_9057 = G__9065;
      continue;
    } else {
      var temp__4126__auto___9066 = cljs.core.seq.call(null, seq__9048_9054);
      if (temp__4126__auto___9066) {
        var seq__9048_9067__$1 = temp__4126__auto___9066;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9048_9067__$1)) {
          var c__4299__auto___9068 = cljs.core.chunk_first.call(null, seq__9048_9067__$1);
          var G__9069 = cljs.core.chunk_rest.call(null, seq__9048_9067__$1);
          var G__9070 = c__4299__auto___9068;
          var G__9071 = cljs.core.count.call(null, c__4299__auto___9068);
          var G__9072 = 0;
          seq__9048_9054 = G__9069;
          chunk__9049_9055 = G__9070;
          count__9050_9056 = G__9071;
          i__9051_9057 = G__9072;
          continue;
        } else {
          var vec__9053_9073 = cljs.core.first.call(null, seq__9048_9067__$1);
          var key_name_9074 = cljs.core.nth.call(null, vec__9053_9073, 0, null);
          var f_9075 = cljs.core.nth.call(null, vec__9053_9073, 1, null);
          var str_name_9076 = cljs.core.name.call(null, key_name_9074);
          obj[str_name_9076] = f_9075;
          var G__9077 = cljs.core.next.call(null, seq__9048_9067__$1);
          var G__9078 = null;
          var G__9079 = 0;
          var G__9080 = 0;
          seq__9048_9054 = G__9077;
          chunk__9049_9055 = G__9078;
          count__9050_9056 = G__9079;
          i__9051_9057 = G__9080;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__9082 = coll;
  if (G__9082) {
    var bit__4193__auto__ = G__9082.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4193__auto__ || G__9082.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__9082.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9082);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__9082);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__9083 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__9083;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__9084 = i - 1;
        var G__9085 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__9084;
        r = G__9085;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__9086) {
    var xs = cljs.core.seq(arglist__9086);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3543__auto__ = coll == null;
    if (or__3543__auto__) {
      return or__3543__auto__;
    } else {
      var G__9090 = coll;
      if (G__9090) {
        var bit__4186__auto__ = G__9090.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4186__auto__ || G__9090.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__9092 = x;
  if (G__9092) {
    var bit__4193__auto__ = G__9092.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4193__auto__ || G__9092.cljs$core$IList$) {
      return true;
    } else {
      if (!G__9092.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9092);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__9092);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__3954__auto__ = self__._hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__9094 = null;
  var G__9094__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__9094__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__9094 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9094__2.call(this, self__, coll);
      case 3:
        return G__9094__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9094;
}();
cljs.core.Keyword.prototype.apply = function(self__, args9093) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9093)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__9096 = x;
    if (G__9096) {
      var bit__4186__auto__ = G__9096.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4186__auto__ || G__9096.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__9097 = ls.sval();
        ls = G__9097;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__9099 = s;
    if (G__9099) {
      var bit__4186__auto__ = G__9099.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4186__auto__ || G__9099.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__9100 = cljs.core.next.call(null, s__$1);
      s__$1 = G__9100;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_9101 = 0;
  var xs_9102 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_9102) {
      ret[i_9101] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_9102));
      var G__9103 = i_9101 + 1;
      var G__9104 = cljs.core.next.call(null, xs_9102);
      i_9101 = G__9103;
      xs_9102 = G__9104;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9105 = i + 1;
          var G__9106 = cljs.core.next.call(null, s__$1);
          i = G__9105;
          s__$1 = G__9106;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4399__auto___9107 = size;
      var i_9108 = 0;
      while (true) {
        if (i_9108 < n__4399__auto___9107) {
          a[i_9108] = init_val_or_seq;
          var G__9109 = i_9108 + 1;
          i_9108 = G__9109;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9110 = i + 1;
          var G__9111 = cljs.core.next.call(null, s__$1);
          i = G__9110;
          s__$1 = G__9111;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4399__auto___9112 = size;
      var i_9113 = 0;
      while (true) {
        if (i_9113 < n__4399__auto___9112) {
          a[i_9113] = init_val_or_seq;
          var G__9114 = i_9113 + 1;
          i_9113 = G__9114;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9115 = i + 1;
          var G__9116 = cljs.core.next.call(null, s__$1);
          i = G__9115;
          s__$1 = G__9116;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4399__auto___9117 = size;
      var i_9118 = 0;
      while (true) {
        if (i_9118 < n__4399__auto___9117) {
          a[i_9118] = init_val_or_seq;
          var G__9119 = i_9118 + 1;
          i_9118 = G__9119;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__9120 = i + 1;
          var G__9121 = cljs.core.next.call(null, s__$1);
          i = G__9120;
          s__$1 = G__9121;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4399__auto___9122 = size;
      var i_9123 = 0;
      while (true) {
        if (i_9123 < n__4399__auto___9122) {
          a[i_9123] = init_val_or_seq;
          var G__9124 = i_9123 + 1;
          i_9123 = G__9124;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__9125 = cljs.core.next.call(null, s__$1);
        var G__9126 = i - 1;
        var G__9127 = sum + 1;
        s__$1 = G__9125;
        i = G__9126;
        sum = G__9127;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__9128__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__9128 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9128__delegate.call(this, x, y, zs);
    };
    G__9128.cljs$lang$maxFixedArity = 2;
    G__9128.cljs$lang$applyTo = function(arglist__9129) {
      var x = cljs.core.first(arglist__9129);
      arglist__9129 = cljs.core.next(arglist__9129);
      var y = cljs.core.first(arglist__9129);
      var zs = cljs.core.rest(arglist__9129);
      return G__9128__delegate(x, y, zs);
    };
    G__9128.cljs$core$IFn$_invoke$arity$variadic = G__9128__delegate;
    return G__9128;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__9130__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__9130 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9130__delegate.call(this, a, b, c, d, more);
    };
    G__9130.cljs$lang$maxFixedArity = 4;
    G__9130.cljs$lang$applyTo = function(arglist__9131) {
      var a = cljs.core.first(arglist__9131);
      arglist__9131 = cljs.core.next(arglist__9131);
      var b = cljs.core.first(arglist__9131);
      arglist__9131 = cljs.core.next(arglist__9131);
      var c = cljs.core.first(arglist__9131);
      arglist__9131 = cljs.core.next(arglist__9131);
      var d = cljs.core.first(arglist__9131);
      var more = cljs.core.rest(arglist__9131);
      return G__9130__delegate(a, b, c, d, more);
    };
    G__9130.cljs$core$IFn$_invoke$arity$variadic = G__9130__delegate;
    return G__9130;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__9132__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__9133 = ntcoll;
          var G__9134 = cljs.core.first.call(null, vals);
          var G__9135 = cljs.core.next.call(null, vals);
          tcoll = G__9133;
          val = G__9134;
          vals = G__9135;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9132 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9132__delegate.call(this, tcoll, val, vals);
    };
    G__9132.cljs$lang$maxFixedArity = 2;
    G__9132.cljs$lang$applyTo = function(arglist__9136) {
      var tcoll = cljs.core.first(arglist__9136);
      arglist__9136 = cljs.core.next(arglist__9136);
      var val = cljs.core.first(arglist__9136);
      var vals = cljs.core.rest(arglist__9136);
      return G__9132__delegate(tcoll, val, vals);
    };
    G__9132.cljs$core$IFn$_invoke$arity$variadic = G__9132__delegate;
    return G__9132;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__9137__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__9138 = ntcoll;
          var G__9139 = cljs.core.first.call(null, kvs);
          var G__9140 = cljs.core.second.call(null, kvs);
          var G__9141 = cljs.core.nnext.call(null, kvs);
          tcoll = G__9138;
          key = G__9139;
          val = G__9140;
          kvs = G__9141;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9137 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9137__delegate.call(this, tcoll, key, val, kvs);
    };
    G__9137.cljs$lang$maxFixedArity = 3;
    G__9137.cljs$lang$applyTo = function(arglist__9142) {
      var tcoll = cljs.core.first(arglist__9142);
      arglist__9142 = cljs.core.next(arglist__9142);
      var key = cljs.core.first(arglist__9142);
      arglist__9142 = cljs.core.next(arglist__9142);
      var val = cljs.core.first(arglist__9142);
      var kvs = cljs.core.rest(arglist__9142);
      return G__9137__delegate(tcoll, key, val, kvs);
    };
    G__9137.cljs$core$IFn$_invoke$arity$variadic = G__9137__delegate;
    return G__9137;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__9143__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__9144 = ntcoll;
          var G__9145 = cljs.core.first.call(null, ks);
          var G__9146 = cljs.core.next.call(null, ks);
          tcoll = G__9144;
          key = G__9145;
          ks = G__9146;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9143 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9143__delegate.call(this, tcoll, key, ks);
    };
    G__9143.cljs$lang$maxFixedArity = 2;
    G__9143.cljs$lang$applyTo = function(arglist__9147) {
      var tcoll = cljs.core.first(arglist__9147);
      arglist__9147 = cljs.core.next(arglist__9147);
      var key = cljs.core.first(arglist__9147);
      var ks = cljs.core.rest(arglist__9147);
      return G__9143__delegate(tcoll, key, ks);
    };
    G__9143.cljs$core$IFn$_invoke$arity$variadic = G__9143__delegate;
    return G__9143;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__9148__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__9149 = ntcoll;
          var G__9150 = cljs.core.first.call(null, vals);
          var G__9151 = cljs.core.next.call(null, vals);
          tcoll = G__9149;
          val = G__9150;
          vals = G__9151;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__9148 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9148__delegate.call(this, tcoll, val, vals);
    };
    G__9148.cljs$lang$maxFixedArity = 2;
    G__9148.cljs$lang$applyTo = function(arglist__9152) {
      var tcoll = cljs.core.first(arglist__9152);
      arglist__9152 = cljs.core.next(arglist__9152);
      var val = cljs.core.first(arglist__9152);
      var vals = cljs.core.rest(arglist__9152);
      return G__9148__delegate(tcoll, val, vals);
    };
    G__9148.cljs$core$IFn$_invoke$arity$variadic = G__9148__delegate;
    return G__9148;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4443 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4443);
      } else {
        return f.call(null, a4443);
      }
    } else {
      var b4444 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4443, b4444);
        } else {
          return f.call(null, a4443, b4444);
        }
      } else {
        var c4445 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4443, b4444, c4445);
          } else {
            return f.call(null, a4443, b4444, c4445);
          }
        } else {
          var d4446 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4443, b4444, c4445, d4446);
            } else {
              return f.call(null, a4443, b4444, c4445, d4446);
            }
          } else {
            var e4447 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4443, b4444, c4445, d4446, e4447);
              } else {
                return f.call(null, a4443, b4444, c4445, d4446, e4447);
              }
            } else {
              var f4448 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4443, b4444, c4445, d4446, e4447, f4448);
                } else {
                  return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448);
                }
              } else {
                var g4449 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4443, b4444, c4445, d4446, e4447, f4448, g4449);
                  } else {
                    return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449);
                  }
                } else {
                  var h4450 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450);
                    } else {
                      return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450);
                    }
                  } else {
                    var i4451 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451);
                      } else {
                        return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451);
                      }
                    } else {
                      var j4452 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452);
                        } else {
                          return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452);
                        }
                      } else {
                        var k4453 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453);
                          } else {
                            return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453);
                          }
                        } else {
                          var l4454 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454);
                            } else {
                              return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454);
                            }
                          } else {
                            var m4455 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455);
                              } else {
                                return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455);
                              }
                            } else {
                              var n4456 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456);
                                } else {
                                  return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456);
                                }
                              } else {
                                var o4457 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457);
                                  } else {
                                    return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457);
                                  }
                                } else {
                                  var p4458 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458);
                                    } else {
                                      return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458);
                                    }
                                  } else {
                                    var q4459 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459);
                                      } else {
                                        return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459);
                                      }
                                    } else {
                                      var r4460 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460);
                                        } else {
                                          return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460);
                                        }
                                      } else {
                                        var s4461 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460, s4461);
                                          } else {
                                            return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460, s4461);
                                          }
                                        } else {
                                          var t4462 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460, s4461, t4462);
                                            } else {
                                              return f.call(null, a4443, b4444, c4445, d4446, e4447, f4448, g4449, h4450, i4451, j4452, k4453, l4454, m4455, n4456, o4457, p4458, q4459, r4460, s4461, t4462);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__9153__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__9153 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__9153__delegate.call(this, f, a, b, c, d, args);
    };
    G__9153.cljs$lang$maxFixedArity = 5;
    G__9153.cljs$lang$applyTo = function(arglist__9154) {
      var f = cljs.core.first(arglist__9154);
      arglist__9154 = cljs.core.next(arglist__9154);
      var a = cljs.core.first(arglist__9154);
      arglist__9154 = cljs.core.next(arglist__9154);
      var b = cljs.core.first(arglist__9154);
      arglist__9154 = cljs.core.next(arglist__9154);
      var c = cljs.core.first(arglist__9154);
      arglist__9154 = cljs.core.next(arglist__9154);
      var d = cljs.core.first(arglist__9154);
      var args = cljs.core.rest(arglist__9154);
      return G__9153__delegate(f, a, b, c, d, args);
    };
    G__9153.cljs$core$IFn$_invoke$arity$variadic = G__9153__delegate;
    return G__9153;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__9155__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__9155 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9155__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__9155.cljs$lang$maxFixedArity = 6;
    G__9155.cljs$lang$applyTo = function(arglist__9156) {
      var obj = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var f = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var a = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var b = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var c = cljs.core.first(arglist__9156);
      arglist__9156 = cljs.core.next(arglist__9156);
      var d = cljs.core.first(arglist__9156);
      var args = cljs.core.rest(arglist__9156);
      return G__9155__delegate(obj, f, a, b, c, d, args);
    };
    G__9155.cljs$core$IFn$_invoke$arity$variadic = G__9155__delegate;
    return G__9155;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__9157__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__9157 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9157__delegate.call(this, x, y, more);
    };
    G__9157.cljs$lang$maxFixedArity = 2;
    G__9157.cljs$lang$applyTo = function(arglist__9158) {
      var x = cljs.core.first(arglist__9158);
      arglist__9158 = cljs.core.next(arglist__9158);
      var y = cljs.core.first(arglist__9158);
      var more = cljs.core.rest(arglist__9158);
      return G__9157__delegate(x, y, more);
    };
    G__9157.cljs$core$IFn$_invoke$arity$variadic = G__9157__delegate;
    return G__9157;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__9159 = pred;
        var G__9160 = cljs.core.next.call(null, coll);
        pred = G__9159;
        coll = G__9160;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3543__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3543__auto__)) {
        return or__3543__auto__;
      } else {
        var G__9161 = pred;
        var G__9162 = cljs.core.next.call(null, coll);
        pred = G__9161;
        coll = G__9162;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__9163 = null;
    var G__9163__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__9163__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__9163__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__9163__3 = function() {
      var G__9164__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__9164 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__9164__delegate.call(this, x, y, zs);
      };
      G__9164.cljs$lang$maxFixedArity = 2;
      G__9164.cljs$lang$applyTo = function(arglist__9165) {
        var x = cljs.core.first(arglist__9165);
        arglist__9165 = cljs.core.next(arglist__9165);
        var y = cljs.core.first(arglist__9165);
        var zs = cljs.core.rest(arglist__9165);
        return G__9164__delegate(x, y, zs);
      };
      G__9164.cljs$core$IFn$_invoke$arity$variadic = G__9164__delegate;
      return G__9164;
    }();
    G__9163 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__9163__0.call(this);
        case 1:
          return G__9163__1.call(this, x);
        case 2:
          return G__9163__2.call(this, x, y);
        default:
          return G__9163__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9163.cljs$lang$maxFixedArity = 2;
    G__9163.cljs$lang$applyTo = G__9163__3.cljs$lang$applyTo;
    return G__9163;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__9166__delegate = function(args) {
      return x;
    };
    var G__9166 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9166__delegate.call(this, args);
    };
    G__9166.cljs$lang$maxFixedArity = 0;
    G__9166.cljs$lang$applyTo = function(arglist__9167) {
      var args = cljs.core.seq(arglist__9167);
      return G__9166__delegate(args);
    };
    G__9166.cljs$core$IFn$_invoke$arity$variadic = G__9166__delegate;
    return G__9166;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__9168 = null;
      var G__9168__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__9168__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__9168__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__9168__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__9168__4 = function() {
        var G__9169__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__9169 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9169__delegate.call(this, x, y, z, args);
        };
        G__9169.cljs$lang$maxFixedArity = 3;
        G__9169.cljs$lang$applyTo = function(arglist__9170) {
          var x = cljs.core.first(arglist__9170);
          arglist__9170 = cljs.core.next(arglist__9170);
          var y = cljs.core.first(arglist__9170);
          arglist__9170 = cljs.core.next(arglist__9170);
          var z = cljs.core.first(arglist__9170);
          var args = cljs.core.rest(arglist__9170);
          return G__9169__delegate(x, y, z, args);
        };
        G__9169.cljs$core$IFn$_invoke$arity$variadic = G__9169__delegate;
        return G__9169;
      }();
      G__9168 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9168__0.call(this);
          case 1:
            return G__9168__1.call(this, x);
          case 2:
            return G__9168__2.call(this, x, y);
          case 3:
            return G__9168__3.call(this, x, y, z);
          default:
            return G__9168__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9168.cljs$lang$maxFixedArity = 3;
      G__9168.cljs$lang$applyTo = G__9168__4.cljs$lang$applyTo;
      return G__9168;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__9171 = null;
      var G__9171__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__9171__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__9171__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__9171__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__9171__4 = function() {
        var G__9172__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__9172 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9172__delegate.call(this, x, y, z, args);
        };
        G__9172.cljs$lang$maxFixedArity = 3;
        G__9172.cljs$lang$applyTo = function(arglist__9173) {
          var x = cljs.core.first(arglist__9173);
          arglist__9173 = cljs.core.next(arglist__9173);
          var y = cljs.core.first(arglist__9173);
          arglist__9173 = cljs.core.next(arglist__9173);
          var z = cljs.core.first(arglist__9173);
          var args = cljs.core.rest(arglist__9173);
          return G__9172__delegate(x, y, z, args);
        };
        G__9172.cljs$core$IFn$_invoke$arity$variadic = G__9172__delegate;
        return G__9172;
      }();
      G__9171 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9171__0.call(this);
          case 1:
            return G__9171__1.call(this, x);
          case 2:
            return G__9171__2.call(this, x, y);
          case 3:
            return G__9171__3.call(this, x, y, z);
          default:
            return G__9171__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9171.cljs$lang$maxFixedArity = 3;
      G__9171.cljs$lang$applyTo = G__9171__4.cljs$lang$applyTo;
      return G__9171;
    }();
  };
  var comp__4 = function() {
    var G__9174__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__9175__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__9176 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__9177 = cljs.core.next.call(null, fs__$2);
                ret = G__9176;
                fs__$2 = G__9177;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__9175 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__9175__delegate.call(this, args);
          };
          G__9175.cljs$lang$maxFixedArity = 0;
          G__9175.cljs$lang$applyTo = function(arglist__9178) {
            var args = cljs.core.seq(arglist__9178);
            return G__9175__delegate(args);
          };
          G__9175.cljs$core$IFn$_invoke$arity$variadic = G__9175__delegate;
          return G__9175;
        }();
      }(fs__$1);
    };
    var G__9174 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9174__delegate.call(this, f1, f2, f3, fs);
    };
    G__9174.cljs$lang$maxFixedArity = 3;
    G__9174.cljs$lang$applyTo = function(arglist__9179) {
      var f1 = cljs.core.first(arglist__9179);
      arglist__9179 = cljs.core.next(arglist__9179);
      var f2 = cljs.core.first(arglist__9179);
      arglist__9179 = cljs.core.next(arglist__9179);
      var f3 = cljs.core.first(arglist__9179);
      var fs = cljs.core.rest(arglist__9179);
      return G__9174__delegate(f1, f2, f3, fs);
    };
    G__9174.cljs$core$IFn$_invoke$arity$variadic = G__9174__delegate;
    return G__9174;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__9180__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__9180 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9180__delegate.call(this, args);
      };
      G__9180.cljs$lang$maxFixedArity = 0;
      G__9180.cljs$lang$applyTo = function(arglist__9181) {
        var args = cljs.core.seq(arglist__9181);
        return G__9180__delegate(args);
      };
      G__9180.cljs$core$IFn$_invoke$arity$variadic = G__9180__delegate;
      return G__9180;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__9182__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__9182 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9182__delegate.call(this, args);
      };
      G__9182.cljs$lang$maxFixedArity = 0;
      G__9182.cljs$lang$applyTo = function(arglist__9183) {
        var args = cljs.core.seq(arglist__9183);
        return G__9182__delegate(args);
      };
      G__9182.cljs$core$IFn$_invoke$arity$variadic = G__9182__delegate;
      return G__9182;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__9184__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__9184 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9184__delegate.call(this, args);
      };
      G__9184.cljs$lang$maxFixedArity = 0;
      G__9184.cljs$lang$applyTo = function(arglist__9185) {
        var args = cljs.core.seq(arglist__9185);
        return G__9184__delegate(args);
      };
      G__9184.cljs$core$IFn$_invoke$arity$variadic = G__9184__delegate;
      return G__9184;
    }();
  };
  var partial__5 = function() {
    var G__9186__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__9187__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__9187 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__9187__delegate.call(this, args);
        };
        G__9187.cljs$lang$maxFixedArity = 0;
        G__9187.cljs$lang$applyTo = function(arglist__9188) {
          var args = cljs.core.seq(arglist__9188);
          return G__9187__delegate(args);
        };
        G__9187.cljs$core$IFn$_invoke$arity$variadic = G__9187__delegate;
        return G__9187;
      }();
    };
    var G__9186 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9186__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__9186.cljs$lang$maxFixedArity = 4;
    G__9186.cljs$lang$applyTo = function(arglist__9189) {
      var f = cljs.core.first(arglist__9189);
      arglist__9189 = cljs.core.next(arglist__9189);
      var arg1 = cljs.core.first(arglist__9189);
      arglist__9189 = cljs.core.next(arglist__9189);
      var arg2 = cljs.core.first(arglist__9189);
      arglist__9189 = cljs.core.next(arglist__9189);
      var arg3 = cljs.core.first(arglist__9189);
      var more = cljs.core.rest(arglist__9189);
      return G__9186__delegate(f, arg1, arg2, arg3, more);
    };
    G__9186.cljs$core$IFn$_invoke$arity$variadic = G__9186__delegate;
    return G__9186;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__9190 = null;
      var G__9190__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__9190__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__9190__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__9190__4 = function() {
        var G__9191__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__9191 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9191__delegate.call(this, a, b, c, ds);
        };
        G__9191.cljs$lang$maxFixedArity = 3;
        G__9191.cljs$lang$applyTo = function(arglist__9192) {
          var a = cljs.core.first(arglist__9192);
          arglist__9192 = cljs.core.next(arglist__9192);
          var b = cljs.core.first(arglist__9192);
          arglist__9192 = cljs.core.next(arglist__9192);
          var c = cljs.core.first(arglist__9192);
          var ds = cljs.core.rest(arglist__9192);
          return G__9191__delegate(a, b, c, ds);
        };
        G__9191.cljs$core$IFn$_invoke$arity$variadic = G__9191__delegate;
        return G__9191;
      }();
      G__9190 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__9190__1.call(this, a);
          case 2:
            return G__9190__2.call(this, a, b);
          case 3:
            return G__9190__3.call(this, a, b, c);
          default:
            return G__9190__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9190.cljs$lang$maxFixedArity = 3;
      G__9190.cljs$lang$applyTo = G__9190__4.cljs$lang$applyTo;
      return G__9190;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__9193 = null;
      var G__9193__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9193__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__9193__4 = function() {
        var G__9194__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__9194 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9194__delegate.call(this, a, b, c, ds);
        };
        G__9194.cljs$lang$maxFixedArity = 3;
        G__9194.cljs$lang$applyTo = function(arglist__9195) {
          var a = cljs.core.first(arglist__9195);
          arglist__9195 = cljs.core.next(arglist__9195);
          var b = cljs.core.first(arglist__9195);
          arglist__9195 = cljs.core.next(arglist__9195);
          var c = cljs.core.first(arglist__9195);
          var ds = cljs.core.rest(arglist__9195);
          return G__9194__delegate(a, b, c, ds);
        };
        G__9194.cljs$core$IFn$_invoke$arity$variadic = G__9194__delegate;
        return G__9194;
      }();
      G__9193 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9193__2.call(this, a, b);
          case 3:
            return G__9193__3.call(this, a, b, c);
          default:
            return G__9193__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9193.cljs$lang$maxFixedArity = 3;
      G__9193.cljs$lang$applyTo = G__9193__4.cljs$lang$applyTo;
      return G__9193;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__9196 = null;
      var G__9196__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__9196__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__9196__4 = function() {
        var G__9197__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__9197 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9197__delegate.call(this, a, b, c, ds);
        };
        G__9197.cljs$lang$maxFixedArity = 3;
        G__9197.cljs$lang$applyTo = function(arglist__9198) {
          var a = cljs.core.first(arglist__9198);
          arglist__9198 = cljs.core.next(arglist__9198);
          var b = cljs.core.first(arglist__9198);
          arglist__9198 = cljs.core.next(arglist__9198);
          var c = cljs.core.first(arglist__9198);
          var ds = cljs.core.rest(arglist__9198);
          return G__9197__delegate(a, b, c, ds);
        };
        G__9197.cljs$core$IFn$_invoke$arity$variadic = G__9197__delegate;
        return G__9197;
      }();
      G__9196 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__9196__2.call(this, a, b);
          case 3:
            return G__9196__3.call(this, a, b, c);
          default:
            return G__9196__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9196.cljs$lang$maxFixedArity = 3;
      G__9196.cljs$lang$applyTo = G__9196__4.cljs$lang$applyTo;
      return G__9196;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4399__auto___9199 = size;
          var i_9200 = 0;
          while (true) {
            if (i_9200 < n__4399__auto___9199) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_9200, cljs.core._nth.call(null, c, i_9200)));
              var G__9201 = i_9200 + 1;
              i_9200 = G__9201;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4399__auto___9202 = size;
        var i_9203 = 0;
        while (true) {
          if (i_9203 < n__4399__auto___9202) {
            var x_9204 = f.call(null, cljs.core._nth.call(null, c, i_9203));
            if (x_9204 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_9204);
            }
            var G__9205 = i_9203 + 1;
            i_9203 = G__9205;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4399__auto___9206 = size;
          var i_9207 = 0;
          while (true) {
            if (i_9207 < n__4399__auto___9206) {
              var x_9208 = f.call(null, idx + i_9207, cljs.core._nth.call(null, c, i_9207));
              if (x_9208 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_9208);
              }
              var G__9209 = i_9207 + 1;
              i_9207 = G__9209;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            return p.call(null, y);
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__9216__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__9216 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9216__delegate.call(this, x, y, z, args);
        };
        G__9216.cljs$lang$maxFixedArity = 3;
        G__9216.cljs$lang$applyTo = function(arglist__9217) {
          var x = cljs.core.first(arglist__9217);
          arglist__9217 = cljs.core.next(arglist__9217);
          var y = cljs.core.first(arglist__9217);
          arglist__9217 = cljs.core.next(arglist__9217);
          var z = cljs.core.first(arglist__9217);
          var args = cljs.core.rest(arglist__9217);
          return G__9216__delegate(x, y, z, args);
        };
        G__9216.cljs$core$IFn$_invoke$arity$variadic = G__9216__delegate;
        return G__9216;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              var and__3531__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3531__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3531__auto____$2;
              }
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              var and__3531__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3531__auto____$2)) {
                var and__3531__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3531__auto____$3)) {
                  var and__3531__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3531__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3531__auto____$4;
                  }
                } else {
                  return and__3531__auto____$3;
                }
              } else {
                return and__3531__auto____$2;
              }
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__9218__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9210_SHARP_) {
            var and__3531__auto__ = p1.call(null, p1__9210_SHARP_);
            if (cljs.core.truth_(and__3531__auto__)) {
              return p2.call(null, p1__9210_SHARP_);
            } else {
              return and__3531__auto__;
            }
          }, args));
        };
        var G__9218 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9218__delegate.call(this, x, y, z, args);
        };
        G__9218.cljs$lang$maxFixedArity = 3;
        G__9218.cljs$lang$applyTo = function(arglist__9219) {
          var x = cljs.core.first(arglist__9219);
          arglist__9219 = cljs.core.next(arglist__9219);
          var y = cljs.core.first(arglist__9219);
          arglist__9219 = cljs.core.next(arglist__9219);
          var z = cljs.core.first(arglist__9219);
          var args = cljs.core.rest(arglist__9219);
          return G__9218__delegate(x, y, z, args);
        };
        G__9218.cljs$core$IFn$_invoke$arity$variadic = G__9218__delegate;
        return G__9218;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              var and__3531__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3531__auto____$2)) {
                var and__3531__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3531__auto____$3)) {
                  var and__3531__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3531__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3531__auto____$4;
                  }
                } else {
                  return and__3531__auto____$3;
                }
              } else {
                return and__3531__auto____$2;
              }
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3531__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3531__auto____$1)) {
              var and__3531__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3531__auto____$2)) {
                var and__3531__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3531__auto____$3)) {
                  var and__3531__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3531__auto____$4)) {
                    var and__3531__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3531__auto____$5)) {
                      var and__3531__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3531__auto____$6)) {
                        var and__3531__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3531__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3531__auto____$7;
                        }
                      } else {
                        return and__3531__auto____$6;
                      }
                    } else {
                      return and__3531__auto____$5;
                    }
                  } else {
                    return and__3531__auto____$4;
                  }
                } else {
                  return and__3531__auto____$3;
                }
              } else {
                return and__3531__auto____$2;
              }
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__9220__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__9211_SHARP_) {
            var and__3531__auto__ = p1.call(null, p1__9211_SHARP_);
            if (cljs.core.truth_(and__3531__auto__)) {
              var and__3531__auto____$1 = p2.call(null, p1__9211_SHARP_);
              if (cljs.core.truth_(and__3531__auto____$1)) {
                return p3.call(null, p1__9211_SHARP_);
              } else {
                return and__3531__auto____$1;
              }
            } else {
              return and__3531__auto__;
            }
          }, args));
        };
        var G__9220 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9220__delegate.call(this, x, y, z, args);
        };
        G__9220.cljs$lang$maxFixedArity = 3;
        G__9220.cljs$lang$applyTo = function(arglist__9221) {
          var x = cljs.core.first(arglist__9221);
          arglist__9221 = cljs.core.next(arglist__9221);
          var y = cljs.core.first(arglist__9221);
          arglist__9221 = cljs.core.next(arglist__9221);
          var z = cljs.core.first(arglist__9221);
          var args = cljs.core.rest(arglist__9221);
          return G__9220__delegate(x, y, z, args);
        };
        G__9220.cljs$core$IFn$_invoke$arity$variadic = G__9220__delegate;
        return G__9220;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__9222__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9212_SHARP_) {
                return p1__9212_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9213_SHARP_) {
                var and__3531__auto__ = p1__9213_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3531__auto__)) {
                  return p1__9213_SHARP_.call(null, y);
                } else {
                  return and__3531__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__9214_SHARP_) {
                var and__3531__auto__ = p1__9214_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3531__auto__)) {
                  var and__3531__auto____$1 = p1__9214_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3531__auto____$1)) {
                    return p1__9214_SHARP_.call(null, z);
                  } else {
                    return and__3531__auto____$1;
                  }
                } else {
                  return and__3531__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__9223__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__9215_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__9215_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__9223 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9223__delegate.call(this, x, y, z, args);
            };
            G__9223.cljs$lang$maxFixedArity = 3;
            G__9223.cljs$lang$applyTo = function(arglist__9224) {
              var x = cljs.core.first(arglist__9224);
              arglist__9224 = cljs.core.next(arglist__9224);
              var y = cljs.core.first(arglist__9224);
              arglist__9224 = cljs.core.next(arglist__9224);
              var z = cljs.core.first(arglist__9224);
              var args = cljs.core.rest(arglist__9224);
              return G__9223__delegate(x, y, z, args);
            };
            G__9223.cljs$core$IFn$_invoke$arity$variadic = G__9223__delegate;
            return G__9223;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__9222 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9222__delegate.call(this, p1, p2, p3, ps);
    };
    G__9222.cljs$lang$maxFixedArity = 3;
    G__9222.cljs$lang$applyTo = function(arglist__9225) {
      var p1 = cljs.core.first(arglist__9225);
      arglist__9225 = cljs.core.next(arglist__9225);
      var p2 = cljs.core.first(arglist__9225);
      arglist__9225 = cljs.core.next(arglist__9225);
      var p3 = cljs.core.first(arglist__9225);
      var ps = cljs.core.rest(arglist__9225);
      return G__9222__delegate(p1, p2, p3, ps);
    };
    G__9222.cljs$core$IFn$_invoke$arity$variadic = G__9222__delegate;
    return G__9222;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3543__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3543__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__9232__delegate = function(x, y, z, args) {
          var or__3543__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3543__auto__)) {
            return or__3543__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__9232 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9232__delegate.call(this, x, y, z, args);
        };
        G__9232.cljs$lang$maxFixedArity = 3;
        G__9232.cljs$lang$applyTo = function(arglist__9233) {
          var x = cljs.core.first(arglist__9233);
          arglist__9233 = cljs.core.next(arglist__9233);
          var y = cljs.core.first(arglist__9233);
          arglist__9233 = cljs.core.next(arglist__9233);
          var z = cljs.core.first(arglist__9233);
          var args = cljs.core.rest(arglist__9233);
          return G__9232__delegate(x, y, z, args);
        };
        G__9232.cljs$core$IFn$_invoke$arity$variadic = G__9232__delegate;
        return G__9232;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            var or__3543__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3543__auto____$2)) {
              return or__3543__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            var or__3543__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3543__auto____$2)) {
              return or__3543__auto____$2;
            } else {
              var or__3543__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3543__auto____$3)) {
                return or__3543__auto____$3;
              } else {
                var or__3543__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3543__auto____$4)) {
                  return or__3543__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__9234__delegate = function(x, y, z, args) {
          var or__3543__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3543__auto__)) {
            return or__3543__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3543__auto__) {
              return function(p1__9226_SHARP_) {
                var or__3543__auto____$1 = p1.call(null, p1__9226_SHARP_);
                if (cljs.core.truth_(or__3543__auto____$1)) {
                  return or__3543__auto____$1;
                } else {
                  return p2.call(null, p1__9226_SHARP_);
                }
              };
            }(or__3543__auto__), args);
          }
        };
        var G__9234 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9234__delegate.call(this, x, y, z, args);
        };
        G__9234.cljs$lang$maxFixedArity = 3;
        G__9234.cljs$lang$applyTo = function(arglist__9235) {
          var x = cljs.core.first(arglist__9235);
          arglist__9235 = cljs.core.next(arglist__9235);
          var y = cljs.core.first(arglist__9235);
          arglist__9235 = cljs.core.next(arglist__9235);
          var z = cljs.core.first(arglist__9235);
          var args = cljs.core.rest(arglist__9235);
          return G__9234__delegate(x, y, z, args);
        };
        G__9234.cljs$core$IFn$_invoke$arity$variadic = G__9234__delegate;
        return G__9234;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            var or__3543__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3543__auto____$2)) {
              return or__3543__auto____$2;
            } else {
              var or__3543__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3543__auto____$3)) {
                return or__3543__auto____$3;
              } else {
                var or__3543__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3543__auto____$4)) {
                  return or__3543__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3543__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3543__auto____$1)) {
            return or__3543__auto____$1;
          } else {
            var or__3543__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3543__auto____$2)) {
              return or__3543__auto____$2;
            } else {
              var or__3543__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3543__auto____$3)) {
                return or__3543__auto____$3;
              } else {
                var or__3543__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3543__auto____$4)) {
                  return or__3543__auto____$4;
                } else {
                  var or__3543__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3543__auto____$5)) {
                    return or__3543__auto____$5;
                  } else {
                    var or__3543__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3543__auto____$6)) {
                      return or__3543__auto____$6;
                    } else {
                      var or__3543__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3543__auto____$7)) {
                        return or__3543__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__9236__delegate = function(x, y, z, args) {
          var or__3543__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3543__auto__)) {
            return or__3543__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3543__auto__) {
              return function(p1__9227_SHARP_) {
                var or__3543__auto____$1 = p1.call(null, p1__9227_SHARP_);
                if (cljs.core.truth_(or__3543__auto____$1)) {
                  return or__3543__auto____$1;
                } else {
                  var or__3543__auto____$2 = p2.call(null, p1__9227_SHARP_);
                  if (cljs.core.truth_(or__3543__auto____$2)) {
                    return or__3543__auto____$2;
                  } else {
                    return p3.call(null, p1__9227_SHARP_);
                  }
                }
              };
            }(or__3543__auto__), args);
          }
        };
        var G__9236 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9236__delegate.call(this, x, y, z, args);
        };
        G__9236.cljs$lang$maxFixedArity = 3;
        G__9236.cljs$lang$applyTo = function(arglist__9237) {
          var x = cljs.core.first(arglist__9237);
          arglist__9237 = cljs.core.next(arglist__9237);
          var y = cljs.core.first(arglist__9237);
          arglist__9237 = cljs.core.next(arglist__9237);
          var z = cljs.core.first(arglist__9237);
          var args = cljs.core.rest(arglist__9237);
          return G__9236__delegate(x, y, z, args);
        };
        G__9236.cljs$core$IFn$_invoke$arity$variadic = G__9236__delegate;
        return G__9236;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__9238__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9228_SHARP_) {
                return p1__9228_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9229_SHARP_) {
                var or__3543__auto__ = p1__9229_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3543__auto__)) {
                  return or__3543__auto__;
                } else {
                  return p1__9229_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__9230_SHARP_) {
                var or__3543__auto__ = p1__9230_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3543__auto__)) {
                  return or__3543__auto__;
                } else {
                  var or__3543__auto____$1 = p1__9230_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3543__auto____$1)) {
                    return or__3543__auto____$1;
                  } else {
                    return p1__9230_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__9239__delegate = function(x, y, z, args) {
              var or__3543__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3543__auto__)) {
                return or__3543__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3543__auto__, ps__$1) {
                  return function(p1__9231_SHARP_) {
                    return cljs.core.some.call(null, p1__9231_SHARP_, args);
                  };
                }(or__3543__auto__, ps__$1), ps__$1);
              }
            };
            var G__9239 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9239__delegate.call(this, x, y, z, args);
            };
            G__9239.cljs$lang$maxFixedArity = 3;
            G__9239.cljs$lang$applyTo = function(arglist__9240) {
              var x = cljs.core.first(arglist__9240);
              arglist__9240 = cljs.core.next(arglist__9240);
              var y = cljs.core.first(arglist__9240);
              arglist__9240 = cljs.core.next(arglist__9240);
              var z = cljs.core.first(arglist__9240);
              var args = cljs.core.rest(arglist__9240);
              return G__9239__delegate(x, y, z, args);
            };
            G__9239.cljs$core$IFn$_invoke$arity$variadic = G__9239__delegate;
            return G__9239;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__9238 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9238__delegate.call(this, p1, p2, p3, ps);
    };
    G__9238.cljs$lang$maxFixedArity = 3;
    G__9238.cljs$lang$applyTo = function(arglist__9241) {
      var p1 = cljs.core.first(arglist__9241);
      arglist__9241 = cljs.core.next(arglist__9241);
      var p2 = cljs.core.first(arglist__9241);
      arglist__9241 = cljs.core.next(arglist__9241);
      var p3 = cljs.core.first(arglist__9241);
      var ps = cljs.core.rest(arglist__9241);
      return G__9238__delegate(p1, p2, p3, ps);
    };
    G__9238.cljs$core$IFn$_invoke$arity$variadic = G__9238__delegate;
    return G__9238;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4399__auto___9243 = size;
          var i_9244 = 0;
          while (true) {
            if (i_9244 < n__4399__auto___9243) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_9244)));
              var G__9245 = i_9244 + 1;
              i_9244 = G__9245;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__9246__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__9242_SHARP_) {
          return cljs.core.apply.call(null, f, p1__9242_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__9246 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9246__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9246.cljs$lang$maxFixedArity = 4;
    G__9246.cljs$lang$applyTo = function(arglist__9247) {
      var f = cljs.core.first(arglist__9247);
      arglist__9247 = cljs.core.next(arglist__9247);
      var c1 = cljs.core.first(arglist__9247);
      arglist__9247 = cljs.core.next(arglist__9247);
      var c2 = cljs.core.first(arglist__9247);
      arglist__9247 = cljs.core.next(arglist__9247);
      var c3 = cljs.core.first(arglist__9247);
      var colls = cljs.core.rest(arglist__9247);
      return G__9246__delegate(f, c1, c2, c3, colls);
    };
    G__9246.cljs$core$IFn$_invoke$arity$variadic = G__9246__delegate;
    return G__9246;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__9248 = n__$1 - 1;
        var G__9249 = cljs.core.rest.call(null, s);
        n__$1 = G__9248;
        coll__$1 = G__9249;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, n, coll);
    };
  }(step), null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__9250 = cljs.core.next.call(null, s);
      var G__9251 = cljs.core.next.call(null, lead);
      s = G__9250;
      lead = G__9251;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__3531__auto__ = s;
        if (and__3531__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__3531__auto__;
        }
      }())) {
        var G__9252 = pred__$1;
        var G__9253 = cljs.core.rest.call(null, s);
        pred__$1 = G__9252;
        coll__$1 = G__9253;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step.call(null, pred, coll);
    };
  }(step), null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__9254__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__9254 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9254__delegate.call(this, c1, c2, colls);
    };
    G__9254.cljs$lang$maxFixedArity = 2;
    G__9254.cljs$lang$applyTo = function(arglist__9255) {
      var c1 = cljs.core.first(arglist__9255);
      arglist__9255 = cljs.core.next(arglist__9255);
      var c2 = cljs.core.first(arglist__9255);
      var colls = cljs.core.rest(arglist__9255);
      return G__9254__delegate(c1, c2, colls);
    };
    G__9254.cljs$core$IFn$_invoke$arity$variadic = G__9254__delegate;
    return G__9254;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__9256__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__9256 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__9256__delegate.call(this, f, coll, colls);
    };
    G__9256.cljs$lang$maxFixedArity = 2;
    G__9256.cljs$lang$applyTo = function(arglist__9257) {
      var f = cljs.core.first(arglist__9257);
      arglist__9257 = cljs.core.next(arglist__9257);
      var coll = cljs.core.first(arglist__9257);
      var colls = cljs.core.rest(arglist__9257);
      return G__9256__delegate(f, coll, colls);
    };
    G__9256.cljs$core$IFn$_invoke$arity$variadic = G__9256__delegate;
    return G__9256;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__4399__auto___9258 = size;
        var i_9259 = 0;
        while (true) {
          if (i_9259 < n__4399__auto___9258) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_9259)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_9259));
            } else {
            }
            var G__9260 = i_9259 + 1;
            i_9259 = G__9260;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__9261_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__9261_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__9263 = to;
      if (G__9263) {
        var bit__4186__auto__ = G__9263.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4186__auto__ || G__9263.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__9264__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__9264 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9264__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__9264.cljs$lang$maxFixedArity = 4;
    G__9264.cljs$lang$applyTo = function(arglist__9265) {
      var f = cljs.core.first(arglist__9265);
      arglist__9265 = cljs.core.next(arglist__9265);
      var c1 = cljs.core.first(arglist__9265);
      arglist__9265 = cljs.core.next(arglist__9265);
      var c2 = cljs.core.first(arglist__9265);
      arglist__9265 = cljs.core.next(arglist__9265);
      var c3 = cljs.core.first(arglist__9265);
      var colls = cljs.core.rest(arglist__9265);
      return G__9264__delegate(f, c1, c2, c3, colls);
    };
    G__9264.cljs$core$IFn$_invoke$arity$variadic = G__9264__delegate;
    return G__9264;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__9267 = m__$1;
          if (G__9267) {
            var bit__4193__auto__ = G__9267.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4193__auto__ || G__9267.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__9267.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9267);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__9267);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__9268 = sentinel;
            var G__9269 = m__$2;
            var G__9270 = cljs.core.next.call(null, ks__$1);
            sentinel = G__9268;
            m__$1 = G__9269;
            ks__$1 = G__9270;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__9271, v) {
  var vec__9273 = p__9271;
  var k = cljs.core.nth.call(null, vec__9273, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__9273, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__9274, f) {
    var vec__9284 = p__9274;
    var k = cljs.core.nth.call(null, vec__9284, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9284, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__9275, f, a) {
    var vec__9285 = p__9275;
    var k = cljs.core.nth.call(null, vec__9285, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9285, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__9276, f, a, b) {
    var vec__9286 = p__9276;
    var k = cljs.core.nth.call(null, vec__9286, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9286, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__9277, f, a, b, c) {
    var vec__9287 = p__9277;
    var k = cljs.core.nth.call(null, vec__9287, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__9287, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__9289__delegate = function(m, p__9278, f, a, b, c, args) {
      var vec__9288 = p__9278;
      var k = cljs.core.nth.call(null, vec__9288, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__9288, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__9289 = function(m, p__9278, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__9289__delegate.call(this, m, p__9278, f, a, b, c, args);
    };
    G__9289.cljs$lang$maxFixedArity = 6;
    G__9289.cljs$lang$applyTo = function(arglist__9290) {
      var m = cljs.core.first(arglist__9290);
      arglist__9290 = cljs.core.next(arglist__9290);
      var p__9278 = cljs.core.first(arglist__9290);
      arglist__9290 = cljs.core.next(arglist__9290);
      var f = cljs.core.first(arglist__9290);
      arglist__9290 = cljs.core.next(arglist__9290);
      var a = cljs.core.first(arglist__9290);
      arglist__9290 = cljs.core.next(arglist__9290);
      var b = cljs.core.first(arglist__9290);
      arglist__9290 = cljs.core.next(arglist__9290);
      var c = cljs.core.first(arglist__9290);
      var args = cljs.core.rest(arglist__9290);
      return G__9289__delegate(m, p__9278, f, a, b, c, args);
    };
    G__9289.cljs$core$IFn$_invoke$arity$variadic = G__9289__delegate;
    return G__9289;
  }();
  update_in = function(m, p__9278, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__9278, f);
      case 4:
        return update_in__4.call(this, m, p__9278, f, a);
      case 5:
        return update_in__5.call(this, m, p__9278, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__9278, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__9278, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4113__auto__, writer__4114__auto__, opts__4115__auto__) {
  return cljs.core._write.call(null, writer__4114__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__9291 = ll - 5;
      var G__9292 = r;
      ll = G__9291;
      ret = G__9292;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9293 = cljs.core.pv_aget.call(null, node, 0);
      var G__9294 = level - 5;
      node = G__9293;
      level = G__9294;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9295 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__9296 = level - 5;
        node = G__9295;
        level = G__9296;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__9298 = j + 1;
              var G__9299 = init__$2;
              j = G__9298;
              init__$1 = G__9299;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__9300 = i + step_init[0];
        i = G__9300;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4399__auto___9301 = len;
    var i_9302 = 0;
    while (true) {
      if (i_9302 < n__4399__auto___9301) {
        new_tail[i_9302] = self__.tail[i_9302];
        var G__9303 = i_9302 + 1;
        i_9302 = G__9303;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9304 = null;
  var G__9304__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9304__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9304 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9304__2.call(this, self__, k);
      case 3:
        return G__9304__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9304;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9297) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9297)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__9305 = i + 1;
        var G__9306 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__9305;
        out = G__9306;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__9307) {
    var args = cljs.core.seq(arglist__9307);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3850__auto__ = self__.end;
    var y__3851__auto__ = v_pos + 1;
    return x__3850__auto__ > y__3851__auto__ ? x__3850__auto__ : y__3851__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9309 = null;
  var G__9309__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9309__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9309 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9309__2.call(this, self__, k);
      case 3:
        return G__9309__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9309;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9308) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9308)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9310 = meta;
      var G__9311 = v.v;
      var G__9312 = v.start + start;
      var G__9313 = v.start + end;
      var G__9314 = __hash;
      meta = G__9310;
      v = G__9311;
      start = G__9312;
      end = G__9313;
      __hash = G__9314;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9318 = {};
    return obj9318;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9319 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__9320 = level - 5;
        node = G__9319;
        level = G__9320;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9322 = null;
  var G__9322__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9322__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9322 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9322__2.call(this, self__, k);
      case 3:
        return G__9322__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9322;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9321) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9321)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3543__auto__ = self__.front;
    if (cljs.core.truth_(or__3543__auto__)) {
      return or__3543__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3543__auto__ = self__.rear;
      if (cljs.core.truth_(or__3543__auto__)) {
        return or__3543__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9323 = i + incr;
        i = G__9323;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9324 = i + 1;
      var G__9325 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__9324;
      out = G__9325;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9329 = {};
    return obj9329;
  }();
  var l = ks.length;
  var i_9330 = 0;
  while (true) {
    if (i_9330 < l) {
      var k_9331 = ks[i_9330];
      new_obj[k_9331] = obj[k_9331];
      var G__9332 = i_9330 + 1;
      i_9330 = G__9332;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9335 = cljs.core.rest.call(null, keys__$1);
        var G__9336 = init__$2;
        keys__$1 = G__9335;
        init__$1 = G__9336;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__9333_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9333_SHARP_, self__.strobj[p1__9333_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9337 = null;
  var G__9337__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9337__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9337 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9337__2.call(this, self__, k);
      case 3:
        return G__9337__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9337;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9334) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9334)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9339 = {};
  return obj9339;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9340 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__9340, 0, null);
    var v = cljs.core.nth.call(null, vec__9340, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__9341 = i + 2;
          i = G__9341;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__9342 = i + 2;
          i = G__9342;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__9343 = i + 2;
          i = G__9343;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__9344 = i + 2;
          i = G__9344;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var G__9345 = i + 2;
          i = G__9345;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9346 = 0;
  while (true) {
    if (i_9346 < l) {
      narr[i_9346] = arr[i_9346];
      var G__9347 = i_9346 + 1;
      i_9346 = G__9347;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9349 = cljs.core.seq.call(null, coll);
  var chunk__9350 = null;
  var count__9351 = 0;
  var i__9352 = 0;
  while (true) {
    if (i__9352 < count__9351) {
      var vec__9353 = cljs.core._nth.call(null, chunk__9350, i__9352);
      var k = cljs.core.nth.call(null, vec__9353, 0, null);
      var v = cljs.core.nth.call(null, vec__9353, 1, null);
      f.call(null, v, k);
      var G__9358 = seq__9349;
      var G__9359 = chunk__9350;
      var G__9360 = count__9351;
      var G__9361 = i__9352 + 1;
      seq__9349 = G__9358;
      chunk__9350 = G__9359;
      count__9351 = G__9360;
      i__9352 = G__9361;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9349);
      if (temp__4126__auto__) {
        var seq__9349__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9349__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9349__$1);
          var G__9362 = cljs.core.chunk_rest.call(null, seq__9349__$1);
          var G__9363 = c__4299__auto__;
          var G__9364 = cljs.core.count.call(null, c__4299__auto__);
          var G__9365 = 0;
          seq__9349 = G__9362;
          chunk__9350 = G__9363;
          count__9351 = G__9364;
          i__9352 = G__9365;
          continue;
        } else {
          var vec__9354 = cljs.core.first.call(null, seq__9349__$1);
          var k = cljs.core.nth.call(null, vec__9354, 0, null);
          var v = cljs.core.nth.call(null, vec__9354, 1, null);
          f.call(null, v, k);
          var G__9366 = cljs.core.next.call(null, seq__9349__$1);
          var G__9367 = null;
          var G__9368 = 0;
          var G__9369 = 0;
          seq__9349 = G__9366;
          chunk__9350 = G__9367;
          count__9351 = G__9368;
          i__9352 = G__9369;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9370 = i + 2;
        var G__9371 = init__$2;
        i = G__9370;
        init__$1 = G__9371;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9356 = {};
    return obj9356;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__9372 = s + 2;
            var G__9373 = d;
            s = G__9372;
            d = G__9373;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__9374 = s + 2;
              var G__9375 = d + 2;
              s = G__9374;
              d = G__9375;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var arr__$1 = function() {
          var G__9357 = cljs.core.aclone.call(null, self__.arr);
          G__9357[idx + 1] = v;
          return G__9357;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9376 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9377 = cljs.core.next.call(null, es);
          ret = G__9376;
          es = G__9377;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9378 = null;
  var G__9378__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9378__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9378 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9378__2.call(this, self__, k);
      case 3:
        return G__9378__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9378;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9348) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9348)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9379 = i + 2;
        var G__9380 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__9379;
        ret = G__9380;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9381_9383 = self__.arr;
      G__9381_9383.pop();
      G__9381_9383.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9382 = o;
      if (G__9382) {
        var bit__4193__auto__ = G__9382.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4193__auto__ || G__9382.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9382.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9382);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9382);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9384 = cljs.core.next.call(null, es);
          var G__9385 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9384;
          tcoll__$2 = G__9385;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9386 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__9387 = i + 2;
      out = G__9386;
      i = G__9387;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4113__auto__, writer__4114__auto__, opts__4115__auto__) {
  return cljs.core._write.call(null, writer__4114__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__9390 = cljs.core.aclone.call(null, arr);
    G__9390[i] = a;
    return G__9390;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__9391 = cljs.core.aclone.call(null, arr);
    G__9391[i] = a;
    G__9391[j] = b;
    return G__9391;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__9392 = i + 2;
        var G__9393 = init__$2;
        i = G__9392;
        init__$1 = G__9393;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9394 = 0;
        var j_9395 = 0;
        while (true) {
          if (i_9394 < 32) {
            if ((self__.bitmap >>> i_9394 & 1) === 0) {
              var G__9396 = i_9394 + 1;
              var G__9397 = j_9395;
              i_9394 = G__9396;
              j_9395 = G__9397;
              continue;
            } else {
              nodes[i_9394] = !(self__.arr[j_9395] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_9395]), self__.arr[j_9395], self__.arr[j_9395 + 1], added_leaf_QMARK_) : self__.arr[j_9395 + 1];
              var G__9398 = i_9394 + 1;
              var G__9399 = j_9395 + 2;
              i_9394 = G__9398;
              j_9395 = G__9399;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9400 = 0;
      var j_9401 = 0;
      while (true) {
        if (i_9400 < 32) {
          if ((self__.bitmap >>> i_9400 & 1) === 0) {
            var G__9402 = i_9400 + 1;
            var G__9403 = j_9401;
            i_9400 = G__9402;
            j_9401 = G__9403;
            continue;
          } else {
            nodes[i_9400] = !(self__.arr[j_9401] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_9401]), self__.arr[j_9401], self__.arr[j_9401 + 1], added_leaf_QMARK_) : self__.arr[j_9401 + 1];
            var G__9404 = i_9400 + 1;
            var G__9405 = j_9401 + 2;
            i_9400 = G__9404;
            j_9401 = G__9405;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9406 = i + 1;
        var G__9407 = j + 2;
        var G__9408 = bitmap | 1 << i;
        i = G__9406;
        j = G__9407;
        bitmap = G__9408;
        continue;
      } else {
        var G__9409 = i + 1;
        var G__9410 = j;
        var G__9411 = bitmap;
        i = G__9409;
        j = G__9410;
        bitmap = G__9411;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__9412 = i + 1;
          var G__9413 = init__$2;
          i = G__9412;
          init__$1 = G__9413;
          continue;
        }
      } else {
        var G__9414 = i + 1;
        var G__9415 = init__$1;
        i = G__9414;
        init__$1 = G__9415;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__9416 = i + 2;
        i = G__9416;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__9417 = j + 2;
                j = G__9417;
                continue;
              }
            } else {
              var G__9418 = j + 2;
              j = G__9418;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__9419 = j + 1;
              j = G__9419;
              continue;
            }
          } else {
            var G__9420 = j + 1;
            j = G__9420;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9422 = cljs.core.seq.call(null, coll);
  var chunk__9423 = null;
  var count__9424 = 0;
  var i__9425 = 0;
  while (true) {
    if (i__9425 < count__9424) {
      var vec__9426 = cljs.core._nth.call(null, chunk__9423, i__9425);
      var k = cljs.core.nth.call(null, vec__9426, 0, null);
      var v = cljs.core.nth.call(null, vec__9426, 1, null);
      f.call(null, v, k);
      var G__9430 = seq__9422;
      var G__9431 = chunk__9423;
      var G__9432 = count__9424;
      var G__9433 = i__9425 + 1;
      seq__9422 = G__9430;
      chunk__9423 = G__9431;
      count__9424 = G__9432;
      i__9425 = G__9433;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9422);
      if (temp__4126__auto__) {
        var seq__9422__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9422__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9422__$1);
          var G__9434 = cljs.core.chunk_rest.call(null, seq__9422__$1);
          var G__9435 = c__4299__auto__;
          var G__9436 = cljs.core.count.call(null, c__4299__auto__);
          var G__9437 = 0;
          seq__9422 = G__9434;
          chunk__9423 = G__9435;
          count__9424 = G__9436;
          i__9425 = G__9437;
          continue;
        } else {
          var vec__9427 = cljs.core.first.call(null, seq__9422__$1);
          var k = cljs.core.nth.call(null, vec__9427, 0, null);
          var v = cljs.core.nth.call(null, vec__9427, 1, null);
          f.call(null, v, k);
          var G__9438 = cljs.core.next.call(null, seq__9422__$1);
          var G__9439 = null;
          var G__9440 = 0;
          var G__9441 = 0;
          seq__9422 = G__9438;
          chunk__9423 = G__9439;
          count__9424 = G__9440;
          i__9425 = G__9441;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9429 = {};
    return obj9429;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9442 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9443 = cljs.core.next.call(null, es);
          ret = G__9442;
          es = G__9443;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9444 = null;
  var G__9444__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9444__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9444 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9444__2.call(this, self__, k);
      case 3:
        return G__9444__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9444;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9421) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9421)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9445 = i + 1;
      var G__9446 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__9445;
      out = G__9446;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9447 = o;
      if (G__9447) {
        var bit__4193__auto__ = G__9447.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4193__auto__ || G__9447.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9447.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9447);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__9447);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__9448 = cljs.core.next.call(null, es);
          var G__9449 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__9448;
          tcoll__$1 = G__9449;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9450 = ascending_QMARK_ ? t.left : t.right;
      var G__9451 = cljs.core.conj.call(null, stack__$1, t);
      t = G__9450;
      stack__$1 = G__9451;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9453 = null;
  var G__9453__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9453__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9453 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9453__2.call(this, self__, k);
      case 3:
        return G__9453__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9453;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9452) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9452)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9455 = null;
  var G__9455__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9455__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9455 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9455__2.call(this, self__, k);
      case 3:
        return G__9455__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9455;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9454) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9454)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9457 = cljs.core.seq.call(null, coll);
  var chunk__9458 = null;
  var count__9459 = 0;
  var i__9460 = 0;
  while (true) {
    if (i__9460 < count__9459) {
      var vec__9461 = cljs.core._nth.call(null, chunk__9458, i__9460);
      var k = cljs.core.nth.call(null, vec__9461, 0, null);
      var v = cljs.core.nth.call(null, vec__9461, 1, null);
      f.call(null, v, k);
      var G__9463 = seq__9457;
      var G__9464 = chunk__9458;
      var G__9465 = count__9459;
      var G__9466 = i__9460 + 1;
      seq__9457 = G__9463;
      chunk__9458 = G__9464;
      count__9459 = G__9465;
      i__9460 = G__9466;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9457);
      if (temp__4126__auto__) {
        var seq__9457__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9457__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9457__$1);
          var G__9467 = cljs.core.chunk_rest.call(null, seq__9457__$1);
          var G__9468 = c__4299__auto__;
          var G__9469 = cljs.core.count.call(null, c__4299__auto__);
          var G__9470 = 0;
          seq__9457 = G__9467;
          chunk__9458 = G__9468;
          count__9459 = G__9469;
          i__9460 = G__9470;
          continue;
        } else {
          var vec__9462 = cljs.core.first.call(null, seq__9457__$1);
          var k = cljs.core.nth.call(null, vec__9462, 0, null);
          var v = cljs.core.nth.call(null, vec__9462, 1, null);
          f.call(null, v, k);
          var G__9471 = cljs.core.next.call(null, seq__9457__$1);
          var G__9472 = null;
          var G__9473 = 0;
          var G__9474 = 0;
          seq__9457 = G__9471;
          chunk__9458 = G__9472;
          count__9459 = G__9473;
          i__9460 = G__9474;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9475 = t.left;
          t = G__9475;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
            var G__9476 = t.right;
            t = G__9476;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__9477 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__9478 = cljs.core.next.call(null, es);
          ret = G__9477;
          es = G__9478;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9479 = null;
  var G__9479__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9479__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9479 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9479__2.call(this, self__, k);
      case 3:
        return G__9479__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9479;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9456) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9456)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9480 = cljs.core.conj.call(null, stack, t);
              var G__9481 = t.left;
              stack = G__9480;
              t = G__9481;
              continue;
            } else {
              var G__9482 = stack;
              var G__9483 = t.right;
              stack = G__9482;
              t = G__9483;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
              if (c > 0) {
                var G__9484 = cljs.core.conj.call(null, stack, t);
                var G__9485 = t.right;
                stack = G__9484;
                t = G__9485;
                continue;
              } else {
                var G__9486 = stack;
                var G__9487 = t.left;
                stack = G__9486;
                t = G__9487;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__9488 = cljs.core.nnext.call(null, in$);
        var G__9489 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9488;
        out = G__9489;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__9490) {
    var keyvals = cljs.core.seq(arglist__9490);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__9491) {
    var keyvals = cljs.core.seq(arglist__9491);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj9495 = {};
      return obj9495;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__9496 = cljs.core.nnext.call(null, kvs);
        kvs = G__9496;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__9497) {
    var keyvals = cljs.core.seq(arglist__9497);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__9498 = cljs.core.nnext.call(null, in$);
        var G__9499 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9498;
        out = G__9499;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__9500) {
    var keyvals = cljs.core.seq(arglist__9500);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__9501 = cljs.core.nnext.call(null, in$);
        var G__9502 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__9501;
        out = G__9502;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__9503) {
    var comparator = cljs.core.first(arglist__9503);
    var keyvals = cljs.core.rest(arglist__9503);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9504 = self__.mseq;
    if (G__9504) {
      var bit__4193__auto__ = G__9504.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4193__auto__ || G__9504.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9504.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9504);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9504);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9505 = self__.mseq;
    if (G__9505) {
      var bit__4193__auto__ = G__9505.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4193__auto__ || G__9505.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9505.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9505);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9505);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9506 = self__.mseq;
    if (G__9506) {
      var bit__4193__auto__ = G__9506.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4193__auto__ || G__9506.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9506.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9506);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9506);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__9507 = self__.mseq;
    if (G__9507) {
      var bit__4193__auto__ = G__9507.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4193__auto__ || G__9507.cljs$core$INext$) {
        return true;
      } else {
        if (!G__9507.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9507);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__9507);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__9508_SHARP_, p2__9509_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3543__auto__ = p1__9508_SHARP_;
          if (cljs.core.truth_(or__3543__auto__)) {
            return or__3543__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__9509_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__9510) {
    var maps = cljs.core.seq(arglist__9510);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3543__auto__ = m1;
            if (cljs.core.truth_(or__3543__auto__)) {
              return or__3543__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__9511) {
    var f = cljs.core.first(arglist__9511);
    var maps = cljs.core.rest(arglist__9511);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__9512 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__9513 = cljs.core.next.call(null, keys);
      ret = G__9512;
      keys = G__9513;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9516 = cljs.core.seq.call(null, coll);
  var chunk__9517 = null;
  var count__9518 = 0;
  var i__9519 = 0;
  while (true) {
    if (i__9519 < count__9518) {
      var vec__9520 = cljs.core._nth.call(null, chunk__9517, i__9519);
      var k = cljs.core.nth.call(null, vec__9520, 0, null);
      var v = cljs.core.nth.call(null, vec__9520, 1, null);
      f.call(null, v, k);
      var G__9522 = seq__9516;
      var G__9523 = chunk__9517;
      var G__9524 = count__9518;
      var G__9525 = i__9519 + 1;
      seq__9516 = G__9522;
      chunk__9517 = G__9523;
      count__9518 = G__9524;
      i__9519 = G__9525;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9516);
      if (temp__4126__auto__) {
        var seq__9516__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9516__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9516__$1);
          var G__9526 = cljs.core.chunk_rest.call(null, seq__9516__$1);
          var G__9527 = c__4299__auto__;
          var G__9528 = cljs.core.count.call(null, c__4299__auto__);
          var G__9529 = 0;
          seq__9516 = G__9526;
          chunk__9517 = G__9527;
          count__9518 = G__9528;
          i__9519 = G__9529;
          continue;
        } else {
          var vec__9521 = cljs.core.first.call(null, seq__9516__$1);
          var k = cljs.core.nth.call(null, vec__9521, 0, null);
          var v = cljs.core.nth.call(null, vec__9521, 1, null);
          f.call(null, v, k);
          var G__9530 = cljs.core.next.call(null, seq__9516__$1);
          var G__9531 = null;
          var G__9532 = 0;
          var G__9533 = 0;
          seq__9516 = G__9530;
          chunk__9517 = G__9531;
          count__9518 = G__9532;
          i__9519 = G__9533;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__9514_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9514_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__9534 = null;
  var G__9534__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9534__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9534 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9534__2.call(this, self__, k);
      case 3:
        return G__9534__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9534;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args9515) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9515)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__9535 = i + 1;
        var G__9536 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__9535;
        out = G__9536;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__9537 = i + 1;
        var G__9538 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__9537;
        out = G__9538;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__9540 = null;
  var G__9540__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__9540__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__9540 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9540__2.call(this, self__, k);
      case 3:
        return G__9540__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9540;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args9539) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9539)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9543 = cljs.core.seq.call(null, coll);
  var chunk__9544 = null;
  var count__9545 = 0;
  var i__9546 = 0;
  while (true) {
    if (i__9546 < count__9545) {
      var vec__9547 = cljs.core._nth.call(null, chunk__9544, i__9546);
      var k = cljs.core.nth.call(null, vec__9547, 0, null);
      var v = cljs.core.nth.call(null, vec__9547, 1, null);
      f.call(null, v, k);
      var G__9549 = seq__9543;
      var G__9550 = chunk__9544;
      var G__9551 = count__9545;
      var G__9552 = i__9546 + 1;
      seq__9543 = G__9549;
      chunk__9544 = G__9550;
      count__9545 = G__9551;
      i__9546 = G__9552;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9543);
      if (temp__4126__auto__) {
        var seq__9543__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9543__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9543__$1);
          var G__9553 = cljs.core.chunk_rest.call(null, seq__9543__$1);
          var G__9554 = c__4299__auto__;
          var G__9555 = cljs.core.count.call(null, c__4299__auto__);
          var G__9556 = 0;
          seq__9543 = G__9553;
          chunk__9544 = G__9554;
          count__9545 = G__9555;
          i__9546 = G__9556;
          continue;
        } else {
          var vec__9548 = cljs.core.first.call(null, seq__9543__$1);
          var k = cljs.core.nth.call(null, vec__9548, 0, null);
          var v = cljs.core.nth.call(null, vec__9548, 1, null);
          f.call(null, v, k);
          var G__9557 = cljs.core.next.call(null, seq__9543__$1);
          var G__9558 = null;
          var G__9559 = 0;
          var G__9560 = 0;
          seq__9543 = G__9557;
          chunk__9544 = G__9558;
          count__9545 = G__9559;
          i__9546 = G__9560;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__9541_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__9541_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__9561 = null;
  var G__9561__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9561__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9561 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9561__2.call(this, self__, k);
      case 3:
        return G__9561__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9561;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args9542) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9542)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4393__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4393__auto__.length) {
        var G__9562 = i + 1;
        var G__9563 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__9562;
        res = G__9563;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__9564 = cljs.core._next.call(null, in$__$1);
            var G__9565 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__9564;
            out = G__9565;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__9566__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__9566 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__9566__delegate.call(this, keys);
    };
    G__9566.cljs$lang$maxFixedArity = 0;
    G__9566.cljs$lang$applyTo = function(arglist__9567) {
      var keys = cljs.core.seq(arglist__9567);
      return G__9566__delegate(keys);
    };
    G__9566.cljs$core$IFn$_invoke$arity$variadic = G__9566__delegate;
    return G__9566;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__9568) {
    var keys = cljs.core.seq(arglist__9568);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__9569) {
    var comparator = cljs.core.first(arglist__9569);
    var keys = cljs.core.rest(arglist__9569);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(n) {
      return function(v, i) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__9570_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__9570_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__9570_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__9577, seen__$1) {
        while (true) {
          var vec__9578 = p__9577;
          var f = cljs.core.nth.call(null, vec__9578, 0, null);
          var xs__$1 = vec__9578;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__9579 = cljs.core.rest.call(null, s);
              var G__9580 = seen__$1;
              p__9577 = G__9579;
              seen__$1 = G__9580;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__9581 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__9582 = cljs.core.next.call(null, s__$1);
      ret = G__9581;
      s__$1 = G__9582;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__9584 = x;
    if (G__9584) {
      var bit__4186__auto__ = G__9584.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4186__auto__ || G__9584.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__9585 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__9586 = cljs.core.next.call(null, ks);
      var G__9587 = cljs.core.next.call(null, vs);
      map = G__9585;
      ks = G__9586;
      vs = G__9587;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__9590__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9588_SHARP_, p2__9589_SHARP_) {
        return max_key.call(null, k, p1__9588_SHARP_, p2__9589_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__9590 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9590__delegate.call(this, k, x, y, more);
    };
    G__9590.cljs$lang$maxFixedArity = 3;
    G__9590.cljs$lang$applyTo = function(arglist__9591) {
      var k = cljs.core.first(arglist__9591);
      arglist__9591 = cljs.core.next(arglist__9591);
      var x = cljs.core.first(arglist__9591);
      arglist__9591 = cljs.core.next(arglist__9591);
      var y = cljs.core.first(arglist__9591);
      var more = cljs.core.rest(arglist__9591);
      return G__9590__delegate(k, x, y, more);
    };
    G__9590.cljs$core$IFn$_invoke$arity$variadic = G__9590__delegate;
    return G__9590;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__9594__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__9592_SHARP_, p2__9593_SHARP_) {
        return min_key.call(null, k, p1__9592_SHARP_, p2__9593_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__9594 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9594__delegate.call(this, k, x, y, more);
    };
    G__9594.cljs$lang$maxFixedArity = 3;
    G__9594.cljs$lang$applyTo = function(arglist__9595) {
      var k = cljs.core.first(arglist__9595);
      arglist__9595 = cljs.core.next(arglist__9595);
      var x = cljs.core.first(arglist__9595);
      arglist__9595 = cljs.core.next(arglist__9595);
      var y = cljs.core.first(arglist__9595);
      var more = cljs.core.rest(arglist__9595);
      return G__9594__delegate(k, x, y, more);
    };
    G__9594.cljs$core$IFn$_invoke$arity$variadic = G__9594__delegate;
    return G__9594;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__9598 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__9598, 0, null);
        var s = vec__9598;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__9599 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__9599, 0, null);
      var s = vec__9599;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__9602 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__9602, 0, null);
        var s = vec__9602;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__9603 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__9603, 0, null);
      var s = vec__9603;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
        return function(p1__9604_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__9604_SHARP_));
        };
      }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__9615 = null;
      var G__9615__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__9615__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__9615__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__9615__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__9615__4 = function() {
        var G__9616__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__9616 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9616__delegate.call(this, x, y, z, args);
        };
        G__9616.cljs$lang$maxFixedArity = 3;
        G__9616.cljs$lang$applyTo = function(arglist__9617) {
          var x = cljs.core.first(arglist__9617);
          arglist__9617 = cljs.core.next(arglist__9617);
          var y = cljs.core.first(arglist__9617);
          arglist__9617 = cljs.core.next(arglist__9617);
          var z = cljs.core.first(arglist__9617);
          var args = cljs.core.rest(arglist__9617);
          return G__9616__delegate(x, y, z, args);
        };
        G__9616.cljs$core$IFn$_invoke$arity$variadic = G__9616__delegate;
        return G__9616;
      }();
      G__9615 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9615__0.call(this);
          case 1:
            return G__9615__1.call(this, x);
          case 2:
            return G__9615__2.call(this, x, y);
          case 3:
            return G__9615__3.call(this, x, y, z);
          default:
            return G__9615__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9615.cljs$lang$maxFixedArity = 3;
      G__9615.cljs$lang$applyTo = G__9615__4.cljs$lang$applyTo;
      return G__9615;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__9618 = null;
      var G__9618__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__9618__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__9618__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__9618__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__9618__4 = function() {
        var G__9619__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__9619 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9619__delegate.call(this, x, y, z, args);
        };
        G__9619.cljs$lang$maxFixedArity = 3;
        G__9619.cljs$lang$applyTo = function(arglist__9620) {
          var x = cljs.core.first(arglist__9620);
          arglist__9620 = cljs.core.next(arglist__9620);
          var y = cljs.core.first(arglist__9620);
          arglist__9620 = cljs.core.next(arglist__9620);
          var z = cljs.core.first(arglist__9620);
          var args = cljs.core.rest(arglist__9620);
          return G__9619__delegate(x, y, z, args);
        };
        G__9619.cljs$core$IFn$_invoke$arity$variadic = G__9619__delegate;
        return G__9619;
      }();
      G__9618 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9618__0.call(this);
          case 1:
            return G__9618__1.call(this, x);
          case 2:
            return G__9618__2.call(this, x, y);
          case 3:
            return G__9618__3.call(this, x, y, z);
          default:
            return G__9618__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9618.cljs$lang$maxFixedArity = 3;
      G__9618.cljs$lang$applyTo = G__9618__4.cljs$lang$applyTo;
      return G__9618;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__9621 = null;
      var G__9621__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__9621__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__9621__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__9621__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__9621__4 = function() {
        var G__9622__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__9622 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__9622__delegate.call(this, x, y, z, args);
        };
        G__9622.cljs$lang$maxFixedArity = 3;
        G__9622.cljs$lang$applyTo = function(arglist__9623) {
          var x = cljs.core.first(arglist__9623);
          arglist__9623 = cljs.core.next(arglist__9623);
          var y = cljs.core.first(arglist__9623);
          arglist__9623 = cljs.core.next(arglist__9623);
          var z = cljs.core.first(arglist__9623);
          var args = cljs.core.rest(arglist__9623);
          return G__9622__delegate(x, y, z, args);
        };
        G__9622.cljs$core$IFn$_invoke$arity$variadic = G__9622__delegate;
        return G__9622;
      }();
      G__9621 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__9621__0.call(this);
          case 1:
            return G__9621__1.call(this, x);
          case 2:
            return G__9621__2.call(this, x, y);
          case 3:
            return G__9621__3.call(this, x, y, z);
          default:
            return G__9621__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9621.cljs$lang$maxFixedArity = 3;
      G__9621.cljs$lang$applyTo = G__9621__4.cljs$lang$applyTo;
      return G__9621;
    }();
  };
  var juxt__4 = function() {
    var G__9624__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__9625 = null;
          var G__9625__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9605_SHARP_, p2__9606_SHARP_) {
                return cljs.core.conj.call(null, p1__9605_SHARP_, p2__9606_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9625__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9607_SHARP_, p2__9608_SHARP_) {
                return cljs.core.conj.call(null, p1__9607_SHARP_, p2__9608_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9625__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9609_SHARP_, p2__9610_SHARP_) {
                return cljs.core.conj.call(null, p1__9609_SHARP_, p2__9610_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9625__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__9611_SHARP_, p2__9612_SHARP_) {
                return cljs.core.conj.call(null, p1__9611_SHARP_, p2__9612_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__9625__4 = function() {
            var G__9626__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__9613_SHARP_, p2__9614_SHARP_) {
                  return cljs.core.conj.call(null, p1__9613_SHARP_, cljs.core.apply.call(null, p2__9614_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__9626 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__9626__delegate.call(this, x, y, z, args);
            };
            G__9626.cljs$lang$maxFixedArity = 3;
            G__9626.cljs$lang$applyTo = function(arglist__9627) {
              var x = cljs.core.first(arglist__9627);
              arglist__9627 = cljs.core.next(arglist__9627);
              var y = cljs.core.first(arglist__9627);
              arglist__9627 = cljs.core.next(arglist__9627);
              var z = cljs.core.first(arglist__9627);
              var args = cljs.core.rest(arglist__9627);
              return G__9626__delegate(x, y, z, args);
            };
            G__9626.cljs$core$IFn$_invoke$arity$variadic = G__9626__delegate;
            return G__9626;
          }();
          G__9625 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__9625__0.call(this);
              case 1:
                return G__9625__1.call(this, x);
              case 2:
                return G__9625__2.call(this, x, y);
              case 3:
                return G__9625__3.call(this, x, y, z);
              default:
                return G__9625__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__9625.cljs$lang$maxFixedArity = 3;
          G__9625.cljs$lang$applyTo = G__9625__4.cljs$lang$applyTo;
          return G__9625;
        }();
      }(fs__$1);
    };
    var G__9624 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__9624__delegate.call(this, f, g, h, fs);
    };
    G__9624.cljs$lang$maxFixedArity = 3;
    G__9624.cljs$lang$applyTo = function(arglist__9628) {
      var f = cljs.core.first(arglist__9628);
      arglist__9628 = cljs.core.next(arglist__9628);
      var g = cljs.core.first(arglist__9628);
      arglist__9628 = cljs.core.next(arglist__9628);
      var h = cljs.core.first(arglist__9628);
      var fs = cljs.core.rest(arglist__9628);
      return G__9624__delegate(f, g, h, fs);
    };
    G__9624.cljs$core$IFn$_invoke$arity$variadic = G__9624__delegate;
    return G__9624;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__9629 = cljs.core.next.call(null, coll);
        coll = G__9629;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__9630 = n - 1;
        var G__9631 = cljs.core.next.call(null, coll);
        n = G__9630;
        coll = G__9631;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__9633 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__9633, 0, null);
  var flags = cljs.core.nth.call(null, vec__9633, 1, null);
  var pattern = cljs.core.nth.call(null, vec__9633, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_9635 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_9636__$1 = cljs.core.next.call(null, coll);
      var n_9637 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_9636__$1 && (n_9637 == null || !(n_9637 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_9636__$1), writer, opts);
          var G__9638 = cljs.core.next.call(null, coll_9636__$1);
          var G__9639 = n_9637 - 1;
          coll_9636__$1 = G__9638;
          n_9637 = G__9639;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_9636__$1) && n_9637 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_9635;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__9644 = cljs.core.seq.call(null, ss);
    var chunk__9645 = null;
    var count__9646 = 0;
    var i__9647 = 0;
    while (true) {
      if (i__9647 < count__9646) {
        var s = cljs.core._nth.call(null, chunk__9645, i__9647);
        cljs.core._write.call(null, writer, s);
        var G__9648 = seq__9644;
        var G__9649 = chunk__9645;
        var G__9650 = count__9646;
        var G__9651 = i__9647 + 1;
        seq__9644 = G__9648;
        chunk__9645 = G__9649;
        count__9646 = G__9650;
        i__9647 = G__9651;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__9644);
        if (temp__4126__auto__) {
          var seq__9644__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9644__$1)) {
            var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9644__$1);
            var G__9652 = cljs.core.chunk_rest.call(null, seq__9644__$1);
            var G__9653 = c__4299__auto__;
            var G__9654 = cljs.core.count.call(null, c__4299__auto__);
            var G__9655 = 0;
            seq__9644 = G__9652;
            chunk__9645 = G__9653;
            count__9646 = G__9654;
            i__9647 = G__9655;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__9644__$1);
            cljs.core._write.call(null, writer, s);
            var G__9656 = cljs.core.next.call(null, seq__9644__$1);
            var G__9657 = null;
            var G__9658 = 0;
            var G__9659 = 0;
            seq__9644 = G__9656;
            chunk__9645 = G__9657;
            count__9646 = G__9658;
            i__9647 = G__9659;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__9660) {
    var writer = cljs.core.first(arglist__9660);
    var ss = cljs.core.rest(arglist__9660);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj9662 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj9662;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        if (cljs.core.truth_(function() {
          var and__3531__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
          if (cljs.core.truth_(and__3531__auto__)) {
            var and__3531__auto____$1 = function() {
              var G__9668 = obj;
              if (G__9668) {
                var bit__4193__auto__ = G__9668.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__4193__auto__ || G__9668.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__9668.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9668);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__9668);
              }
            }();
            if (and__3531__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__3531__auto____$1;
            }
          } else {
            return and__3531__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__9669 = obj;
              if (G__9669) {
                var bit__4186__auto__ = G__9669.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__4186__auto__ || G__9669.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__9671 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                                ns = G__9671;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__9670 = obj;
                              if (G__9670) {
                                var bit__4193__auto__ = G__9670.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__4193__auto__ || G__9670.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__9670.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9670);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__9670);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__9676 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__9677 = null;
  var count__9678 = 0;
  var i__9679 = 0;
  while (true) {
    if (i__9679 < count__9678) {
      var obj = cljs.core._nth.call(null, chunk__9677, i__9679);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__9680 = seq__9676;
      var G__9681 = chunk__9677;
      var G__9682 = count__9678;
      var G__9683 = i__9679 + 1;
      seq__9676 = G__9680;
      chunk__9677 = G__9681;
      count__9678 = G__9682;
      i__9679 = G__9683;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9676);
      if (temp__4126__auto__) {
        var seq__9676__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9676__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9676__$1);
          var G__9684 = cljs.core.chunk_rest.call(null, seq__9676__$1);
          var G__9685 = c__4299__auto__;
          var G__9686 = cljs.core.count.call(null, c__4299__auto__);
          var G__9687 = 0;
          seq__9676 = G__9684;
          chunk__9677 = G__9685;
          count__9678 = G__9686;
          i__9679 = G__9687;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__9676__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__9688 = cljs.core.next.call(null, seq__9676__$1);
          var G__9689 = null;
          var G__9690 = 0;
          var G__9691 = 0;
          seq__9676 = G__9688;
          chunk__9677 = G__9689;
          count__9678 = G__9690;
          i__9679 = G__9691;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__9692) {
    var objs = cljs.core.seq(arglist__9692);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__9693) {
    var objs = cljs.core.seq(arglist__9693);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__9694) {
    var objs = cljs.core.seq(arglist__9694);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__9695) {
    var objs = cljs.core.seq(arglist__9695);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__9696) {
    var objs = cljs.core.seq(arglist__9696);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__9697) {
    var objs = cljs.core.seq(arglist__9697);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__9698) {
    var objs = cljs.core.seq(arglist__9698);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__9699) {
    var objs = cljs.core.seq(arglist__9699);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.IAtom = function() {
  var obj9701 = {};
  return obj9701;
}();
cljs.core.IReset = function() {
  var obj9703 = {};
  return obj9703;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3531__auto__ = o;
    if (and__3531__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4170__auto__ = o == null ? null : o;
    return function() {
      var or__3543__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj9705 = {};
  return obj9705;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3531__auto__ = o;
      if (and__3531__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4170__auto__ = o == null ? null : o;
      return function() {
        var or__3543__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__9706 = cljs.core.seq.call(null, self__.watches);
  var chunk__9707 = null;
  var count__9708 = 0;
  var i__9709 = 0;
  while (true) {
    if (i__9709 < count__9708) {
      var vec__9710 = cljs.core._nth.call(null, chunk__9707, i__9709);
      var key = cljs.core.nth.call(null, vec__9710, 0, null);
      var f = cljs.core.nth.call(null, vec__9710, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__9712 = seq__9706;
      var G__9713 = chunk__9707;
      var G__9714 = count__9708;
      var G__9715 = i__9709 + 1;
      seq__9706 = G__9712;
      chunk__9707 = G__9713;
      count__9708 = G__9714;
      i__9709 = G__9715;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__9706);
      if (temp__4126__auto__) {
        var seq__9706__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9706__$1)) {
          var c__4299__auto__ = cljs.core.chunk_first.call(null, seq__9706__$1);
          var G__9716 = cljs.core.chunk_rest.call(null, seq__9706__$1);
          var G__9717 = c__4299__auto__;
          var G__9718 = cljs.core.count.call(null, c__4299__auto__);
          var G__9719 = 0;
          seq__9706 = G__9716;
          chunk__9707 = G__9717;
          count__9708 = G__9718;
          i__9709 = G__9719;
          continue;
        } else {
          var vec__9711 = cljs.core.first.call(null, seq__9706__$1);
          var key = cljs.core.nth.call(null, vec__9711, 0, null);
          var f = cljs.core.nth.call(null, vec__9711, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__9720 = cljs.core.next.call(null, seq__9706__$1);
          var G__9721 = null;
          var G__9722 = 0;
          var G__9723 = 0;
          seq__9706 = G__9720;
          chunk__9707 = G__9721;
          count__9708 = G__9722;
          i__9709 = G__9723;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__9727__delegate = function(x, p__9724) {
      var map__9726 = p__9724;
      var map__9726__$1 = cljs.core.seq_QMARK_.call(null, map__9726) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9726) : map__9726;
      var validator = cljs.core.get.call(null, map__9726__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__9726__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__9727 = function(x, var_args) {
      var p__9724 = null;
      if (arguments.length > 1) {
        p__9724 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9727__delegate.call(this, x, p__9724);
    };
    G__9727.cljs$lang$maxFixedArity = 1;
    G__9727.cljs$lang$applyTo = function(arglist__9728) {
      var x = cljs.core.first(arglist__9728);
      var p__9724 = cljs.core.rest(arglist__9728);
      return G__9727__delegate(x, p__9724);
    };
    G__9727.cljs$core$IFn$_invoke$arity$variadic = G__9727__delegate;
    return G__9727;
  }();
  atom = function(x, var_args) {
    var p__9724 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__9729__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__9729 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__9729__delegate.call(this, a, f, x, y, more);
    };
    G__9729.cljs$lang$maxFixedArity = 4;
    G__9729.cljs$lang$applyTo = function(arglist__9730) {
      var a = cljs.core.first(arglist__9730);
      arglist__9730 = cljs.core.next(arglist__9730);
      var f = cljs.core.first(arglist__9730);
      arglist__9730 = cljs.core.next(arglist__9730);
      var x = cljs.core.first(arglist__9730);
      arglist__9730 = cljs.core.next(arglist__9730);
      var y = cljs.core.first(arglist__9730);
      var more = cljs.core.rest(arglist__9730);
      return G__9729__delegate(a, f, x, y, more);
    };
    G__9729.cljs$core$IFn$_invoke$arity$variadic = G__9729__delegate;
    return G__9729;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__9731) {
    var iref = cljs.core.first(arglist__9731);
    arglist__9731 = cljs.core.next(arglist__9731);
    var f = cljs.core.first(arglist__9731);
    var args = cljs.core.rest(arglist__9731);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj9733 = {};
  return obj9733;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__9735 = k;
    if (G__9735) {
      var bit__4193__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3543__auto__ = bit__4193__auto__;
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          return G__9735.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__9735.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9735);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9735);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__9749 = x;
      if (G__9749) {
        var bit__4193__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3543__auto__ = bit__4193__auto__;
          if (cljs.core.truth_(or__3543__auto__)) {
            return or__3543__auto__;
          } else {
            return G__9749.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__9749.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9749);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__9749);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj9751 = {};
              return obj9751;
            }();
            var seq__9752_9762 = cljs.core.seq.call(null, x);
            var chunk__9753_9763 = null;
            var count__9754_9764 = 0;
            var i__9755_9765 = 0;
            while (true) {
              if (i__9755_9765 < count__9754_9764) {
                var vec__9756_9766 = cljs.core._nth.call(null, chunk__9753_9763, i__9755_9765);
                var k_9767 = cljs.core.nth.call(null, vec__9756_9766, 0, null);
                var v_9768 = cljs.core.nth.call(null, vec__9756_9766, 1, null);
                m[cljs.core.key__GT_js.call(null, k_9767)] = clj__GT_js.call(null, v_9768);
                var G__9769 = seq__9752_9762;
                var G__9770 = chunk__9753_9763;
                var G__9771 = count__9754_9764;
                var G__9772 = i__9755_9765 + 1;
                seq__9752_9762 = G__9769;
                chunk__9753_9763 = G__9770;
                count__9754_9764 = G__9771;
                i__9755_9765 = G__9772;
                continue;
              } else {
                var temp__4126__auto___9773 = cljs.core.seq.call(null, seq__9752_9762);
                if (temp__4126__auto___9773) {
                  var seq__9752_9774__$1 = temp__4126__auto___9773;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__9752_9774__$1)) {
                    var c__4299__auto___9775 = cljs.core.chunk_first.call(null, seq__9752_9774__$1);
                    var G__9776 = cljs.core.chunk_rest.call(null, seq__9752_9774__$1);
                    var G__9777 = c__4299__auto___9775;
                    var G__9778 = cljs.core.count.call(null, c__4299__auto___9775);
                    var G__9779 = 0;
                    seq__9752_9762 = G__9776;
                    chunk__9753_9763 = G__9777;
                    count__9754_9764 = G__9778;
                    i__9755_9765 = G__9779;
                    continue;
                  } else {
                    var vec__9757_9780 = cljs.core.first.call(null, seq__9752_9774__$1);
                    var k_9781 = cljs.core.nth.call(null, vec__9757_9780, 0, null);
                    var v_9782 = cljs.core.nth.call(null, vec__9757_9780, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_9781)] = clj__GT_js.call(null, v_9782);
                    var G__9783 = cljs.core.next.call(null, seq__9752_9774__$1);
                    var G__9784 = null;
                    var G__9785 = 0;
                    var G__9786 = 0;
                    seq__9752_9762 = G__9783;
                    chunk__9753_9763 = G__9784;
                    count__9754_9764 = G__9785;
                    i__9755_9765 = G__9786;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__9758_9787 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__9759_9788 = null;
              var count__9760_9789 = 0;
              var i__9761_9790 = 0;
              while (true) {
                if (i__9761_9790 < count__9760_9789) {
                  var x_9791__$1 = cljs.core._nth.call(null, chunk__9759_9788, i__9761_9790);
                  arr.push(x_9791__$1);
                  var G__9792 = seq__9758_9787;
                  var G__9793 = chunk__9759_9788;
                  var G__9794 = count__9760_9789;
                  var G__9795 = i__9761_9790 + 1;
                  seq__9758_9787 = G__9792;
                  chunk__9759_9788 = G__9793;
                  count__9760_9789 = G__9794;
                  i__9761_9790 = G__9795;
                  continue;
                } else {
                  var temp__4126__auto___9796 = cljs.core.seq.call(null, seq__9758_9787);
                  if (temp__4126__auto___9796) {
                    var seq__9758_9797__$1 = temp__4126__auto___9796;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__9758_9797__$1)) {
                      var c__4299__auto___9798 = cljs.core.chunk_first.call(null, seq__9758_9797__$1);
                      var G__9799 = cljs.core.chunk_rest.call(null, seq__9758_9797__$1);
                      var G__9800 = c__4299__auto___9798;
                      var G__9801 = cljs.core.count.call(null, c__4299__auto___9798);
                      var G__9802 = 0;
                      seq__9758_9787 = G__9799;
                      chunk__9759_9788 = G__9800;
                      count__9760_9789 = G__9801;
                      i__9761_9790 = G__9802;
                      continue;
                    } else {
                      var x_9803__$1 = cljs.core.first.call(null, seq__9758_9797__$1);
                      arr.push(x_9803__$1);
                      var G__9804 = cljs.core.next.call(null, seq__9758_9797__$1);
                      var G__9805 = null;
                      var G__9806 = 0;
                      var G__9807 = 0;
                      seq__9758_9787 = G__9804;
                      chunk__9759_9788 = G__9805;
                      count__9760_9789 = G__9806;
                      i__9761_9790 = G__9807;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj9809 = {};
  return obj9809;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3531__auto__ = x;
    if (and__3531__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4170__auto__ = x == null ? null : x;
    return function() {
      var or__3543__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__9830__delegate = function(x, opts) {
      if (function() {
        var G__9820 = x;
        if (G__9820) {
          var bit__4193__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3543__auto__ = bit__4193__auto__;
            if (cljs.core.truth_(or__3543__auto__)) {
              return or__3543__auto__;
            } else {
              return G__9820.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__9820.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__9820);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__9820);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__9821 = opts;
          var map__9821__$1 = cljs.core.seq_QMARK_.call(null, map__9821) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9821) : map__9821;
          var keywordize_keys = cljs.core.get.call(null, map__9821__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__9821, map__9821__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4268__auto__ = function(map__9821, map__9821__$1, keywordize_keys, keyfn) {
                          return function iter__9826(s__9827) {
                            return new cljs.core.LazySeq(null, function(map__9821, map__9821__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__9827__$1 = s__9827;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__9827__$1);
                                  if (temp__4126__auto__) {
                                    var s__9827__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__9827__$2)) {
                                      var c__4266__auto__ = cljs.core.chunk_first.call(null, s__9827__$2);
                                      var size__4267__auto__ = cljs.core.count.call(null, c__4266__auto__);
                                      var b__9829 = cljs.core.chunk_buffer.call(null, size__4267__auto__);
                                      if (function() {
                                        var i__9828 = 0;
                                        while (true) {
                                          if (i__9828 < size__4267__auto__) {
                                            var k = cljs.core._nth.call(null, c__4266__auto__, i__9828);
                                            cljs.core.chunk_append.call(null, b__9829, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__9831 = i__9828 + 1;
                                            i__9828 = G__9831;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9829), iter__9826.call(null, cljs.core.chunk_rest.call(null, s__9827__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__9829), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__9827__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__9826.call(null, cljs.core.rest.call(null, s__9827__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__9821, map__9821__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__9821, map__9821__$1, keywordize_keys, keyfn);
                        return iter__4268__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__9821, map__9821__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__9830 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9830__delegate.call(this, x, opts);
    };
    G__9830.cljs$lang$maxFixedArity = 1;
    G__9830.cljs$lang$applyTo = function(arglist__9832) {
      var x = cljs.core.first(arglist__9832);
      var opts = cljs.core.rest(arglist__9832);
      return G__9830__delegate(x, opts);
    };
    G__9830.cljs$core$IFn$_invoke$arity$variadic = G__9830__delegate;
    return G__9830;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__9833__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__9833 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__9833__delegate.call(this, args);
      };
      G__9833.cljs$lang$maxFixedArity = 0;
      G__9833.cljs$lang$applyTo = function(arglist__9834) {
        var args = cljs.core.seq(arglist__9834);
        return G__9833__delegate(args);
      };
      G__9833.cljs$core$IFn$_invoke$arity$variadic = G__9833__delegate;
      return G__9833;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__9835 = ret;
        f = G__9835;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__9836__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__9836 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__9836__delegate.call(this, f, args);
    };
    G__9836.cljs$lang$maxFixedArity = 1;
    G__9836.cljs$lang$applyTo = function(arglist__9837) {
      var f = cljs.core.first(arglist__9837);
      var args = cljs.core.rest(arglist__9837);
      return G__9836__delegate(f, args);
    };
    G__9836.cljs$core$IFn$_invoke$arity$variadic = G__9836__delegate;
    return G__9836;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__9838) {
    var f = cljs.core.first(arglist__9838);
    var args = cljs.core.rest(arglist__9838);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3543__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3543__auto__) {
      return or__3543__auto__;
    } else {
      var or__3543__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3543__auto____$1) {
        return or__3543__auto____$1;
      } else {
        var and__3531__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3531__auto__) {
          var and__3531__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3531__auto____$1) {
            var and__3531__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3531__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__9839 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__9840 = i + 1;
                  ret = G__9839;
                  i = G__9840;
                  continue;
                }
                break;
              }
            } else {
              return and__3531__auto____$2;
            }
          } else {
            return and__3531__auto____$1;
          }
        } else {
          return and__3531__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3543__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3543__auto__)) {
      return or__3543__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__9841_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__9841_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__9841_SHARP_), cljs.core.second.call(null, p1__9841_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__9842_SHARP_, p2__9843_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__9842_SHARP_, p2__9843_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3543__auto__ = cljs.core.truth_(function() {
    var and__3531__auto__ = xprefs;
    if (cljs.core.truth_(and__3531__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3531__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3543__auto__)) {
    return or__3543__auto__;
  } else {
    var or__3543__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__9844 = cljs.core.rest.call(null, ps);
          ps = G__9844;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3543__auto____$1)) {
      return or__3543__auto____$1;
    } else {
      var or__3543__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__9845 = cljs.core.rest.call(null, ps);
            ps = G__9845;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3543__auto____$2)) {
        return or__3543__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3543__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3543__auto__)) {
    return or__3543__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__9848) {
    var vec__9849 = p__9848;
    var k = cljs.core.nth.call(null, vec__9849, 0, null);
    var _ = cljs.core.nth.call(null, vec__9849, 1, null);
    var e = vec__9849;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3543__auto__ = be == null;
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj9851 = {};
  return obj9851;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._reset[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._reset["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._add_method[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._add_method["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._remove_method[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._remove_method["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._prefer_method[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._get_method[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._get_method["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._methods[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._methods["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3531__auto__ = mf;
    if (and__3531__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4170__auto__ = mf == null ? null : mf;
    return function() {
      var or__3543__auto__ = cljs.core._prefers[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core._prefers["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__9853 = null;
  var G__9853__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__9853__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__9853__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__9853__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__9853__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__9853__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__9853__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__9853__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__9853__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9853__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9853__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9853__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9853__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9853__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9853__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9853__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9853__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9853__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9853__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9853__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9853__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__9853 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__9853__2.call(this, self__, a);
      case 3:
        return G__9853__3.call(this, self__, a, b);
      case 4:
        return G__9853__4.call(this, self__, a, b, c);
      case 5:
        return G__9853__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9853__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9853__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9853__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9853__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9853__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9853__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9853__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9853__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9853__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9853__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9853__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9853__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9853__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9853__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9853__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9853__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9853__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__9853;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args9852) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args9852)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4113__auto__, writer__4114__auto__, opts__4115__auto__) {
  return cljs.core._write.call(null, writer__4114__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj12586 = {};
  return obj12586;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3531__auto__ = port;
    if (and__3531__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4170__auto__ = port == null ? null : port;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj12588 = {};
  return obj12588;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3531__auto__ = port;
    if (and__3531__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4170__auto__ = port == null ? null : port;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj12590 = {};
  return obj12590;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3531__auto__ = chan;
    if (and__3531__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4170__auto__ = chan == null ? null : chan;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3531__auto__ = chan;
    if (and__3531__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4170__auto__ = chan == null ? null : chan;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj12592 = {};
  return obj12592;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3531__auto__ = h;
    if (and__3531__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4170__auto__ = h == null ? null : h;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3531__auto__ = h;
    if (and__3531__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4170__auto__ = h == null ? null : h;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj12594 = {};
  return obj12594;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3531__auto__ = b;
    if (and__3531__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4170__auto__ = b == null ? null : b;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3531__auto__ = b;
    if (and__3531__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4170__auto__ = b == null ? null : b;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function add_BANG_(b, itm) {
  if (function() {
    var and__3531__auto__ = b;
    if (and__3531__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2(b, itm);
  } else {
    var x__4170__auto__ = b == null ? null : b;
    return function() {
      var or__3543__auto__ = cljs.core.async.impl.protocols.add_BANG_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.impl.protocols.add_BANG_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj12596 = {};
  return obj12596;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__12597 = cnt + 1;
      cnt = G__12597;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4399__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4399__auto__) {
      var v_12598 = this$.pop();
      if (keep_QMARK_.call(null, v_12598)) {
        this$.unshift(v_12598);
      } else {
      }
      var G__12599 = x + 1;
      x = G__12599;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, this$__$1))) {
  } else {
    throw new Error("Assert failed: Can't add to a full buffer\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol("impl", "full?", "impl/full?", -97582774, null), new cljs.core.Symbol(null, "this", "this", 1028897902, null))))));
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    return null;
  } else {
    return self__.buf.unshift(itm);
  }
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  return self__.buf.unshift(itm);
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.message_channel = null;
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_12600 = 0;
  while (true) {
    var m_12601 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_12601 == null) {
    } else {
      m_12601.call(null);
      if (count_12600 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__12602 = count_12600 + 1;
        count_12600 = G__12602;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
if (typeof MessageChannel !== "undefined") {
  cljs.core.async.impl.dispatch.message_channel = new MessageChannel;
  cljs.core.async.impl.dispatch.message_channel.port1.onmessage = function(msg) {
    return cljs.core.async.impl.dispatch.process_messages.call(null);
  };
} else {
}
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3531__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (and__3531__auto__) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3531__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    if (typeof MessageChannel !== "undefined") {
      return cljs.core.async.impl.dispatch.message_channel.port2.postMessage(0);
    } else {
      if (typeof setImmediate !== "undefined") {
        return setImmediate(cljs.core.async.impl.dispatch.process_messages);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
          return setTimeout(cljs.core.async.impl.dispatch.process_messages, 0);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t12606 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t12606 = function(val, box, meta12607) {
      this.val = val;
      this.box = box;
      this.meta12607 = meta12607;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t12606.cljs$lang$type = true;
    cljs.core.async.impl.channels.t12606.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t12606";
    cljs.core.async.impl.channels.t12606.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.channels/t12606");
    };
    cljs.core.async.impl.channels.t12606.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t12606.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12608) {
      var self__ = this;
      var _12608__$1 = this;
      return self__.meta12607;
    };
    cljs.core.async.impl.channels.t12606.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12608, meta12607__$1) {
      var self__ = this;
      var _12608__$1 = this;
      return new cljs.core.async.impl.channels.t12606(self__.val, self__.box, meta12607__$1);
    };
    cljs.core.async.impl.channels.__GT_t12606 = function __GT_t12606(val__$1, box__$1, meta12607) {
      return new cljs.core.async.impl.channels.t12606(val__$1, box__$1, meta12607);
    };
  }
  return new cljs.core.async.impl.channels.t12606(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4113__auto__, writer__4114__auto__, opts__4115__auto__) {
  return cljs.core._write.call(null, writer__4114__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    while (true) {
      var taker_12609 = self__.takes.pop();
      if (taker_12609 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_12609)) {
          var take_cb_12610 = cljs.core.async.impl.protocols.commit.call(null, taker_12609);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_12610, taker_12609, this$__$1) {
            return function() {
              return take_cb_12610.call(null, null);
            };
          }(take_cb_12610, taker_12609, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        var putter_12611 = self__.puts.pop();
        if (!(putter_12611 == null)) {
          var put_handler_12612 = putter_12611.handler;
          var val_12613 = putter_12611.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_12612)) {
            var put_cb_12614 = cljs.core.async.impl.protocols.commit.call(null, put_handler_12612);
            var __12615__$1 = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb_12614, __12615__$1, put_handler_12612, val_12613, putter_12611, _, retval, this$__$1) {
              return function() {
                return put_cb_12614.call(null, true);
              };
            }(put_cb_12614, __12615__$1, put_handler_12612, val_12613, putter_12611, _, retval, this$__$1));
            cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val_12613);
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      return retval;
    } else {
      while (true) {
        var putter = self__.puts.pop();
        if (!(putter == null)) {
          var put_handler = putter.handler;
          var val = putter.val;
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler)) {
            var put_cb = cljs.core.async.impl.protocols.commit.call(null, put_handler);
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            cljs.core.async.impl.dispatch.run.call(null, function(put_cb, _, put_handler, val, putter, this$__$1) {
              return function() {
                return put_cb.call(null, true);
              };
            }(put_cb, _, put_handler, val, putter, this$__$1));
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            continue;
          }
        } else {
          if (self__.closed) {
            var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
            return cljs.core.async.impl.channels.box.call(null, null);
          } else {
            if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
              self__.dirty_takes = 0;
              self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
            } else {
              self__.dirty_takes = self__.dirty_takes + 1;
            }
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
            }
            self__.takes.unbounded_unshift(handler);
            return null;
          }
        }
        break;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    while (true) {
      var taker = self__.takes.pop();
      if (!(taker == null)) {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker)) {
          var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb, _, taker, closed__$1, this$__$1) {
            return function() {
              return take_cb.call(null, val);
            };
          }(take_cb, _, taker, closed__$1, this$__$1));
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          continue;
        }
      } else {
        if (!(self__.buf == null || cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
          var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
          cljs.core.async.impl.protocols.add_BANG_.call(null, self__.buf, val);
          return cljs.core.async.impl.channels.box.call(null, true);
        } else {
          if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_puts = 0;
            self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
          } else {
            self__.dirty_puts = self__.dirty_puts + 1;
          }
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
          return null;
        }
      }
      break;
    }
  }
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed);
};
cljs.core.async.impl.channels.chan = function chan(buf) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false);
};
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t12533 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t12533 = function(f, fn_handler, meta12534) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta12534 = meta12534;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t12533.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t12533.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t12533";
    cljs.core.async.impl.ioc_helpers.t12533.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.ioc-helpers/t12533");
    };
    cljs.core.async.impl.ioc_helpers.t12533.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t12533.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t12533.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t12533.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12535) {
      var self__ = this;
      var _12535__$1 = this;
      return self__.meta12534;
    };
    cljs.core.async.impl.ioc_helpers.t12533.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12535, meta12534__$1) {
      var self__ = this;
      var _12535__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t12533(self__.f, self__.fn_handler, meta12534__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t12533 = function __GT_t12533(f__$1, fn_handler__$1, meta12534) {
      return new cljs.core.async.impl.ioc_helpers.t12533(f__$1, fn_handler__$1, meta12534);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t12533(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e12537) {
    if (e12537 instanceof Object) {
      var ex = e12537;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
        throw e12537;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_12540_12542 = state;
    statearr_12540_12542[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_12540_12542[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_12541_12543 = state;
    statearr_12541_12543[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12541_12543[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_12546_12548 = state;
    statearr_12546_12548[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_12546_12548[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4124__auto__)) {
    var cb = temp__4124__auto__;
    var statearr_12547_12549 = state;
    statearr_12547_12549[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_12547_12549[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__12550) {
    var map__12555 = p__12550;
    var map__12555__$1 = cljs.core.seq_QMARK_.call(null, map__12555) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12555) : map__12555;
    var opts = map__12555__$1;
    var statearr_12556_12559 = state;
    statearr_12556_12559[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4126__auto__ = cljs.core.async.do_alts.call(null, function(map__12555, map__12555__$1, opts) {
      return function(val) {
        var statearr_12557_12560 = state;
        statearr_12557_12560[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__12555, map__12555__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var cb = temp__4126__auto__;
      var statearr_12558_12561 = state;
      statearr_12558_12561[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__12550 = null;
    if (arguments.length > 3) {
      p__12550 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__12550);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__12562) {
    var state = cljs.core.first(arglist__12562);
    arglist__12562 = cljs.core.next(arglist__12562);
    var cont_block = cljs.core.first(arglist__12562);
    arglist__12562 = cljs.core.next(arglist__12562);
    var ports = cljs.core.first(arglist__12562);
    var p__12550 = cljs.core.rest(arglist__12562);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__12550);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4129__auto__, k__4130__auto__) {
  var self__ = this;
  var this__4129__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4129__auto____$1, k__4130__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4131__auto__, k12564, else__4132__auto__) {
  var self__ = this;
  var this__4131__auto____$1 = this;
  var G__12566 = k12564 instanceof cljs.core.Keyword ? k12564.fqn : null;
  switch(G__12566) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k12564, else__4132__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4143__auto__, writer__4144__auto__, opts__4145__auto__) {
  var self__ = this;
  var this__4143__auto____$1 = this;
  var pr_pair__4146__auto__ = function(this__4143__auto____$1) {
    return function(keyval__4147__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4144__auto__, cljs.core.pr_writer, "", " ", "", opts__4145__auto__, keyval__4147__auto__);
    };
  }(this__4143__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4144__auto__, pr_pair__4146__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4145__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4127__auto__) {
  var self__ = this;
  var this__4127__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4123__auto__) {
  var self__ = this;
  var this__4123__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4133__auto__) {
  var self__ = this;
  var this__4133__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4124__auto__) {
  var self__ = this;
  var this__4124__auto____$1 = this;
  var h__3954__auto__ = self__.__hash;
  if (!(h__3954__auto__ == null)) {
    return h__3954__auto__;
  } else {
    var h__3954__auto____$1 = cljs.core.hash_imap.call(null, this__4124__auto____$1);
    self__.__hash = h__3954__auto____$1;
    return h__3954__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4125__auto__, other__4126__auto__) {
  var self__ = this;
  var this__4125__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3531__auto__ = other__4126__auto__;
    if (cljs.core.truth_(and__3531__auto__)) {
      return this__4125__auto____$1.constructor === other__4126__auto__.constructor && cljs.core.equiv_map.call(null, this__4125__auto____$1, other__4126__auto__);
    } else {
      return and__3531__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4138__auto__, k__4139__auto__) {
  var self__ = this;
  var this__4138__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4139__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4138__auto____$1), self__.__meta), k__4139__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4139__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4136__auto__, k__4137__auto__, G__12563) {
  var self__ = this;
  var this__4136__auto____$1 = this;
  var pred__12567 = cljs.core.keyword_identical_QMARK_;
  var expr__12568 = k__4137__auto__;
  if (cljs.core.truth_(pred__12567.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__12568))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__12563, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__12567.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__12568))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__12563, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__12567.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__12568))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__12563, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__12567.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__12568))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__12563, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__12567.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__12568))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__12563, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4137__auto__, G__12563), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4141__auto__) {
  var self__ = this;
  var this__4141__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4128__auto__, G__12563) {
  var self__ = this;
  var this__4128__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__12563, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4134__auto__, entry__4135__auto__) {
  var self__ = this;
  var this__4134__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4135__auto__)) {
    return cljs.core._assoc.call(null, this__4134__auto____$1, cljs.core._nth.call(null, entry__4135__auto__, 0), cljs.core._nth.call(null, entry__4135__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4134__auto____$1, entry__4135__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4163__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4163__auto__, writer__4164__auto__) {
  return cljs.core._write.call(null, writer__4164__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__12565) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__12565), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__12565), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__12565), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__12565), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__12565), null, cljs.core.dissoc.call(null, G__12565, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_12572 = state;
  statearr_12572[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_12572;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3531__auto__ = exception;
      if (cljs.core.truth_(and__3531__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3531__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3531__auto__ = exception;
        if (cljs.core.truth_(and__3531__auto__)) {
          var and__3531__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3531__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3531__auto____$1;
          }
        } else {
          return and__3531__auto__;
        }
      }())) {
        var statearr_12578 = state;
        statearr_12578[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_12578[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_12578[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_12578[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_12578;
      } else {
        if (cljs.core.truth_(function() {
          var and__3531__auto__ = exception;
          if (cljs.core.truth_(and__3531__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3531__auto__;
          }
        }())) {
          var statearr_12579_12583 = state;
          statearr_12579_12583[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__12584 = state;
          state = G__12584;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3531__auto__ = exception;
            if (cljs.core.truth_(and__3531__auto__)) {
              var and__3531__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3531__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3531__auto____$1;
              }
            } else {
              return and__3531__auto__;
            }
          }())) {
            var statearr_12580 = state;
            statearr_12580[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_12580[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_12580;
          } else {
            if (cljs.core.truth_(function() {
              var and__3531__auto__ = cljs.core.not.call(null, exception);
              if (and__3531__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3531__auto__;
              }
            }())) {
              var statearr_12581 = state;
              statearr_12581[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_12581[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_12581;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_12582 = state;
                statearr_12582[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_12582[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_12582;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                  if (false) {
                    return null;
                  } else {
                    throw new Error("Assert failed: No matching clause\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, false)));
                  }
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__12506 = level + 1;
        level = G__12506;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_12507 = 0;
    while (true) {
      if (i_12507 < arr.length) {
        arr[i_12507] = null;
        var G__12508 = i_12507 + 1;
        i_12507 = G__12508;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4124__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var x_SINGLEQUOTE_ = temp__4124__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__12509 = x_SINGLEQUOTE_;
                x__$1 = G__12509;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__12510 = x__$1;
        var G__12511 = k;
        var G__12512 = level - 1;
        var G__12513 = update;
        x = G__12510;
        k = G__12511;
        level = G__12512;
        update = G__12513;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
  return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_12514 = self__.level + 1;
      while (true) {
        if (i_12514 <= new_level + 1) {
          update[i_12514] = self__.header;
          var G__12515 = i_12514 + 1;
          i_12514 = G__12515;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_12516 = 0;
    while (true) {
      if (i_12516 <= self__.level) {
        var links_12517 = update[i_12516].forward;
        if (links_12517[i_12516] === x__$1) {
          links_12517[i_12516] = x__$1.forward[i_12516];
          var G__12518 = i_12516 + 1;
          i_12516 = G__12518;
          continue;
        } else {
          var G__12519 = i_12516 + 1;
          i_12516 = G__12519;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__12520 = x_SINGLEQUOTE_;
              x__$1 = G__12520;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__12521 = nx;
        var G__12522 = level__$1 - 1;
        x = G__12521;
        level__$1 = G__12522;
        continue;
      } else {
        var G__12523 = x;
        var G__12524 = level__$1 - 1;
        x = G__12523;
        level__$1 = G__12524;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__12525 = x_SINGLEQUOTE_;
              x__$1 = G__12525;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__12526 = nx;
        var G__12527 = level__$1 - 1;
        x = G__12526;
        level__$1 = G__12527;
        continue;
      } else {
        var G__12528 = x;
        var G__12529 = level__$1 - 1;
        x = G__12528;
        level__$1 = G__12529;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3543__auto__ = cljs.core.truth_(function() {
    var and__3531__auto__ = me;
    if (cljs.core.truth_(and__3531__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3531__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3543__auto__)) {
    return or__3543__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3543__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3543__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t9857 !== "undefined") {
  } else {
    cljs.core.async.t9857 = function(f, fn_handler, meta9858) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta9858 = meta9858;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9857.cljs$lang$type = true;
    cljs.core.async.t9857.cljs$lang$ctorStr = "cljs.core.async/t9857";
    cljs.core.async.t9857.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9857");
    };
    cljs.core.async.t9857.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9857.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t9857.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t9857.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9859) {
      var self__ = this;
      var _9859__$1 = this;
      return self__.meta9858;
    };
    cljs.core.async.t9857.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9859, meta9858__$1) {
      var self__ = this;
      var _9859__$1 = this;
      return new cljs.core.async.t9857(self__.f, self__.fn_handler, meta9858__$1);
    };
    cljs.core.async.__GT_t9857 = function __GT_t9857(f__$1, fn_handler__$1, meta9858) {
      return new cljs.core.async.t9857(f__$1, fn_handler__$1, meta9858);
    };
  }
  return new cljs.core.async.t9857(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__9861 = buff;
  if (G__9861) {
    var bit__4193__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3543__auto__ = bit__4193__auto__;
      if (cljs.core.truth_(or__3543__auto__)) {
        return or__3543__auto__;
      } else {
        return G__9861.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__9861.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9861);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__9861);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1);
  };
  chan = function(buf_or_n) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3c! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_9862 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_9862);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_9862, ret) {
          return function() {
            return fn1.call(null, val_9862);
          };
        }(val_9862, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  if (null) {
    return null;
  } else {
    throw new Error("Assert failed: \x3e! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
  }
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var ret = temp__4124__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4124__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4124__auto__)) {
      var retb = temp__4124__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4124__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4124__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4399__auto___9863 = n;
  var x_9864 = 0;
  while (true) {
    if (x_9864 < n__4399__auto___9863) {
      a[x_9864] = 0;
      var G__9865 = x_9864 + 1;
      x_9864 = G__9865;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__9866 = i + 1;
      i = G__9866;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t9870 !== "undefined") {
  } else {
    cljs.core.async.t9870 = function(flag, alt_flag, meta9871) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta9871 = meta9871;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9870.cljs$lang$type = true;
    cljs.core.async.t9870.cljs$lang$ctorStr = "cljs.core.async/t9870";
    cljs.core.async.t9870.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
        return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9870");
      };
    }(flag);
    cljs.core.async.t9870.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9870.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t9870.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t9870.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_9872) {
        var self__ = this;
        var _9872__$1 = this;
        return self__.meta9871;
      };
    }(flag);
    cljs.core.async.t9870.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_9872, meta9871__$1) {
        var self__ = this;
        var _9872__$1 = this;
        return new cljs.core.async.t9870(self__.flag, self__.alt_flag, meta9871__$1);
      };
    }(flag);
    cljs.core.async.__GT_t9870 = function(flag) {
      return function __GT_t9870(flag__$1, alt_flag__$1, meta9871) {
        return new cljs.core.async.t9870(flag__$1, alt_flag__$1, meta9871);
      };
    }(flag);
  }
  return new cljs.core.async.t9870(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t9876 !== "undefined") {
  } else {
    cljs.core.async.t9876 = function(cb, flag, alt_handler, meta9877) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta9877 = meta9877;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9876.cljs$lang$type = true;
    cljs.core.async.t9876.cljs$lang$ctorStr = "cljs.core.async/t9876";
    cljs.core.async.t9876.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9876");
    };
    cljs.core.async.t9876.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t9876.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t9876.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t9876.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9878) {
      var self__ = this;
      var _9878__$1 = this;
      return self__.meta9877;
    };
    cljs.core.async.t9876.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9878, meta9877__$1) {
      var self__ = this;
      var _9878__$1 = this;
      return new cljs.core.async.t9876(self__.cb, self__.flag, self__.alt_handler, meta9877__$1);
    };
    cljs.core.async.__GT_t9876 = function __GT_t9876(cb__$1, flag__$1, alt_handler__$1, meta9877) {
      return new cljs.core.async.t9876(cb__$1, flag__$1, alt_handler__$1, meta9877);
    };
  }
  return new cljs.core.async.t9876(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__9879_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9879_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__9880_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9880_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3543__auto__ = wport;
            if (cljs.core.truth_(or__3543__auto__)) {
              return or__3543__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__9881 = i + 1;
          i = G__9881;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3543__auto__ = ret;
  if (cljs.core.truth_(or__3543__auto__)) {
    return or__3543__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4126__auto__ = function() {
        var and__3531__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3531__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3531__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4126__auto__)) {
        var got = temp__4126__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__9882) {
    var map__9884 = p__9882;
    var map__9884__$1 = cljs.core.seq_QMARK_.call(null, map__9884) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9884) : map__9884;
    var opts = map__9884__$1;
    if (null) {
      return null;
    } else {
      throw new Error("Assert failed: alts! used not in (go ...) block\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, null)));
    }
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__9882 = null;
    if (arguments.length > 1) {
      p__9882 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__9882);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__9885) {
    var ports = cljs.core.first(arglist__9885);
    var p__9882 = cljs.core.rest(arglist__9885);
    return alts_BANG___delegate(ports, p__9882);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t9893 !== "undefined") {
  } else {
    cljs.core.async.t9893 = function(ch, f, map_LT_, meta9894) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta9894 = meta9894;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9893.cljs$lang$type = true;
    cljs.core.async.t9893.cljs$lang$ctorStr = "cljs.core.async/t9893";
    cljs.core.async.t9893.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9893");
    };
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t9896 !== "undefined") {
        } else {
          cljs.core.async.t9896 = function(fn1, _, meta9894, ch, f, map_LT_, meta9897) {
            this.fn1 = fn1;
            this._ = _;
            this.meta9894 = meta9894;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta9897 = meta9897;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t9896.cljs$lang$type = true;
          cljs.core.async.t9896.cljs$lang$ctorStr = "cljs.core.async/t9896";
          cljs.core.async.t9896.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
              return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9896");
            };
          }(___$1);
          cljs.core.async.t9896.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t9896.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t9896.prototype.cljs$core$async$impl$protocols$Handler$lock_id$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.lock_id.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t9896.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__9886_SHARP_) {
                  return f1.call(null, p1__9886_SHARP_ == null ? null : self__.f.call(null, p1__9886_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t9896.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_9898) {
              var self__ = this;
              var _9898__$1 = this;
              return self__.meta9897;
            };
          }(___$1);
          cljs.core.async.t9896.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_9898, meta9897__$1) {
              var self__ = this;
              var _9898__$1 = this;
              return new cljs.core.async.t9896(self__.fn1, self__._, self__.meta9894, self__.ch, self__.f, self__.map_LT_, meta9897__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t9896 = function(___$1) {
            return function __GT_t9896(fn1__$1, ___$2, meta9894__$1, ch__$2, f__$2, map_LT___$2, meta9897) {
              return new cljs.core.async.t9896(fn1__$1, ___$2, meta9894__$1, ch__$2, f__$2, map_LT___$2, meta9897);
            };
          }(___$1);
        }
        return new cljs.core.async.t9896(fn1, ___$1, self__.meta9894, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3531__auto__ = ret;
        if (cljs.core.truth_(and__3531__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3531__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t9893.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t9893.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9895) {
      var self__ = this;
      var _9895__$1 = this;
      return self__.meta9894;
    };
    cljs.core.async.t9893.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9895, meta9894__$1) {
      var self__ = this;
      var _9895__$1 = this;
      return new cljs.core.async.t9893(self__.ch, self__.f, self__.map_LT_, meta9894__$1);
    };
    cljs.core.async.__GT_t9893 = function __GT_t9893(ch__$1, f__$1, map_LT___$1, meta9894) {
      return new cljs.core.async.t9893(ch__$1, f__$1, map_LT___$1, meta9894);
    };
  }
  return new cljs.core.async.t9893(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t9902 !== "undefined") {
  } else {
    cljs.core.async.t9902 = function(ch, f, map_GT_, meta9903) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta9903 = meta9903;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9902.cljs$lang$type = true;
    cljs.core.async.t9902.cljs$lang$ctorStr = "cljs.core.async/t9902";
    cljs.core.async.t9902.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9902");
    };
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t9902.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t9902.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9904) {
      var self__ = this;
      var _9904__$1 = this;
      return self__.meta9903;
    };
    cljs.core.async.t9902.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9904, meta9903__$1) {
      var self__ = this;
      var _9904__$1 = this;
      return new cljs.core.async.t9902(self__.ch, self__.f, self__.map_GT_, meta9903__$1);
    };
    cljs.core.async.__GT_t9902 = function __GT_t9902(ch__$1, f__$1, map_GT___$1, meta9903) {
      return new cljs.core.async.t9902(ch__$1, f__$1, map_GT___$1, meta9903);
    };
  }
  return new cljs.core.async.t9902(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t9908 !== "undefined") {
  } else {
    cljs.core.async.t9908 = function(ch, p, filter_GT_, meta9909) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta9909 = meta9909;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t9908.cljs$lang$type = true;
    cljs.core.async.t9908.cljs$lang$ctorStr = "cljs.core.async/t9908";
    cljs.core.async.t9908.cljs$lang$ctorPrWriter = function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
      return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t9908");
    };
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t9908.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t9908.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9910) {
      var self__ = this;
      var _9910__$1 = this;
      return self__.meta9909;
    };
    cljs.core.async.t9908.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9910, meta9909__$1) {
      var self__ = this;
      var _9910__$1 = this;
      return new cljs.core.async.t9908(self__.ch, self__.p, self__.filter_GT_, meta9909__$1);
    };
    cljs.core.async.__GT_t9908 = function __GT_t9908(ch__$1, p__$1, filter_GT___$1, meta9909) {
      return new cljs.core.async.t9908(ch__$1, p__$1, filter_GT___$1, meta9909);
    };
  }
  return new cljs.core.async.t9908(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___9993 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___9993, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___9993, out) {
            return function(state_9972) {
              var state_val_9973 = state_9972[1];
              if (state_val_9973 === 7) {
                var inst_9968 = state_9972[2];
                var state_9972__$1 = state_9972;
                var statearr_9974_9994 = state_9972__$1;
                statearr_9974_9994[2] = inst_9968;
                statearr_9974_9994[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_9973 === 1) {
                  var state_9972__$1 = state_9972;
                  var statearr_9975_9995 = state_9972__$1;
                  statearr_9975_9995[2] = null;
                  statearr_9975_9995[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_9973 === 4) {
                    var inst_9954 = state_9972[7];
                    var inst_9954__$1 = state_9972[2];
                    var inst_9955 = inst_9954__$1 == null;
                    var state_9972__$1 = function() {
                      var statearr_9976 = state_9972;
                      statearr_9976[7] = inst_9954__$1;
                      return statearr_9976;
                    }();
                    if (cljs.core.truth_(inst_9955)) {
                      var statearr_9977_9996 = state_9972__$1;
                      statearr_9977_9996[1] = 5;
                    } else {
                      var statearr_9978_9997 = state_9972__$1;
                      statearr_9978_9997[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_9973 === 6) {
                      var inst_9954 = state_9972[7];
                      var inst_9959 = p.call(null, inst_9954);
                      var state_9972__$1 = state_9972;
                      if (cljs.core.truth_(inst_9959)) {
                        var statearr_9979_9998 = state_9972__$1;
                        statearr_9979_9998[1] = 8;
                      } else {
                        var statearr_9980_9999 = state_9972__$1;
                        statearr_9980_9999[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_9973 === 3) {
                        var inst_9970 = state_9972[2];
                        var state_9972__$1 = state_9972;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_9972__$1, inst_9970);
                      } else {
                        if (state_val_9973 === 2) {
                          var state_9972__$1 = state_9972;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_9972__$1, 4, ch);
                        } else {
                          if (state_val_9973 === 11) {
                            var inst_9962 = state_9972[2];
                            var state_9972__$1 = state_9972;
                            var statearr_9981_10000 = state_9972__$1;
                            statearr_9981_10000[2] = inst_9962;
                            statearr_9981_10000[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_9973 === 9) {
                              var state_9972__$1 = state_9972;
                              var statearr_9982_10001 = state_9972__$1;
                              statearr_9982_10001[2] = null;
                              statearr_9982_10001[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_9973 === 5) {
                                var inst_9957 = cljs.core.async.close_BANG_.call(null, out);
                                var state_9972__$1 = state_9972;
                                var statearr_9983_10002 = state_9972__$1;
                                statearr_9983_10002[2] = inst_9957;
                                statearr_9983_10002[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_9973 === 10) {
                                  var inst_9965 = state_9972[2];
                                  var state_9972__$1 = function() {
                                    var statearr_9984 = state_9972;
                                    statearr_9984[8] = inst_9965;
                                    return statearr_9984;
                                  }();
                                  var statearr_9985_10003 = state_9972__$1;
                                  statearr_9985_10003[2] = null;
                                  statearr_9985_10003[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_9973 === 8) {
                                    var inst_9954 = state_9972[7];
                                    var state_9972__$1 = state_9972;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_9972__$1, 11, out, inst_9954);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___9993, out);
          return function(switch__5693__auto__, c__5708__auto___9993, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_9989 = [null, null, null, null, null, null, null, null, null];
                statearr_9989[0] = state_machine__5694__auto__;
                statearr_9989[1] = 1;
                return statearr_9989;
              };
              var state_machine__5694__auto____1 = function(state_9972) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_9972);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e9990) {
                      if (e9990 instanceof Object) {
                        var ex__5697__auto__ = e9990;
                        var statearr_9991_10004 = state_9972;
                        statearr_9991_10004[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_9972);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e9990;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10005 = state_9972;
                    state_9972 = G__10005;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_9972) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_9972);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___9993, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_9992 = f__5709__auto__.call(null);
          statearr_9992[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___9993;
          return statearr_9992;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___9993, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5708__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto__) {
    return function() {
      var f__5709__auto__ = function() {
        var switch__5693__auto__ = function(c__5708__auto__) {
          return function(state_10171) {
            var state_val_10172 = state_10171[1];
            if (state_val_10172 === 7) {
              var inst_10167 = state_10171[2];
              var state_10171__$1 = state_10171;
              var statearr_10173_10214 = state_10171__$1;
              statearr_10173_10214[2] = inst_10167;
              statearr_10173_10214[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10172 === 20) {
                var inst_10137 = state_10171[7];
                var inst_10148 = state_10171[2];
                var inst_10149 = cljs.core.next.call(null, inst_10137);
                var inst_10123 = inst_10149;
                var inst_10124 = null;
                var inst_10125 = 0;
                var inst_10126 = 0;
                var state_10171__$1 = function() {
                  var statearr_10174 = state_10171;
                  statearr_10174[8] = inst_10125;
                  statearr_10174[9] = inst_10148;
                  statearr_10174[10] = inst_10126;
                  statearr_10174[11] = inst_10124;
                  statearr_10174[12] = inst_10123;
                  return statearr_10174;
                }();
                var statearr_10175_10215 = state_10171__$1;
                statearr_10175_10215[2] = null;
                statearr_10175_10215[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10172 === 1) {
                  var state_10171__$1 = state_10171;
                  var statearr_10176_10216 = state_10171__$1;
                  statearr_10176_10216[2] = null;
                  statearr_10176_10216[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10172 === 4) {
                    var inst_10112 = state_10171[13];
                    var inst_10112__$1 = state_10171[2];
                    var inst_10113 = inst_10112__$1 == null;
                    var state_10171__$1 = function() {
                      var statearr_10177 = state_10171;
                      statearr_10177[13] = inst_10112__$1;
                      return statearr_10177;
                    }();
                    if (cljs.core.truth_(inst_10113)) {
                      var statearr_10178_10217 = state_10171__$1;
                      statearr_10178_10217[1] = 5;
                    } else {
                      var statearr_10179_10218 = state_10171__$1;
                      statearr_10179_10218[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10172 === 15) {
                      var state_10171__$1 = state_10171;
                      var statearr_10183_10219 = state_10171__$1;
                      statearr_10183_10219[2] = null;
                      statearr_10183_10219[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10172 === 21) {
                        var state_10171__$1 = state_10171;
                        var statearr_10184_10220 = state_10171__$1;
                        statearr_10184_10220[2] = null;
                        statearr_10184_10220[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10172 === 13) {
                          var inst_10125 = state_10171[8];
                          var inst_10126 = state_10171[10];
                          var inst_10124 = state_10171[11];
                          var inst_10123 = state_10171[12];
                          var inst_10133 = state_10171[2];
                          var inst_10134 = inst_10126 + 1;
                          var tmp10180 = inst_10125;
                          var tmp10181 = inst_10124;
                          var tmp10182 = inst_10123;
                          var inst_10123__$1 = tmp10182;
                          var inst_10124__$1 = tmp10181;
                          var inst_10125__$1 = tmp10180;
                          var inst_10126__$1 = inst_10134;
                          var state_10171__$1 = function() {
                            var statearr_10185 = state_10171;
                            statearr_10185[8] = inst_10125__$1;
                            statearr_10185[10] = inst_10126__$1;
                            statearr_10185[14] = inst_10133;
                            statearr_10185[11] = inst_10124__$1;
                            statearr_10185[12] = inst_10123__$1;
                            return statearr_10185;
                          }();
                          var statearr_10186_10221 = state_10171__$1;
                          statearr_10186_10221[2] = null;
                          statearr_10186_10221[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_10172 === 22) {
                            var state_10171__$1 = state_10171;
                            var statearr_10187_10222 = state_10171__$1;
                            statearr_10187_10222[2] = null;
                            statearr_10187_10222[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10172 === 6) {
                              var inst_10112 = state_10171[13];
                              var inst_10121 = f.call(null, inst_10112);
                              var inst_10122 = cljs.core.seq.call(null, inst_10121);
                              var inst_10123 = inst_10122;
                              var inst_10124 = null;
                              var inst_10125 = 0;
                              var inst_10126 = 0;
                              var state_10171__$1 = function() {
                                var statearr_10188 = state_10171;
                                statearr_10188[8] = inst_10125;
                                statearr_10188[10] = inst_10126;
                                statearr_10188[11] = inst_10124;
                                statearr_10188[12] = inst_10123;
                                return statearr_10188;
                              }();
                              var statearr_10189_10223 = state_10171__$1;
                              statearr_10189_10223[2] = null;
                              statearr_10189_10223[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10172 === 17) {
                                var inst_10137 = state_10171[7];
                                var inst_10141 = cljs.core.chunk_first.call(null, inst_10137);
                                var inst_10142 = cljs.core.chunk_rest.call(null, inst_10137);
                                var inst_10143 = cljs.core.count.call(null, inst_10141);
                                var inst_10123 = inst_10142;
                                var inst_10124 = inst_10141;
                                var inst_10125 = inst_10143;
                                var inst_10126 = 0;
                                var state_10171__$1 = function() {
                                  var statearr_10190 = state_10171;
                                  statearr_10190[8] = inst_10125;
                                  statearr_10190[10] = inst_10126;
                                  statearr_10190[11] = inst_10124;
                                  statearr_10190[12] = inst_10123;
                                  return statearr_10190;
                                }();
                                var statearr_10191_10224 = state_10171__$1;
                                statearr_10191_10224[2] = null;
                                statearr_10191_10224[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10172 === 3) {
                                  var inst_10169 = state_10171[2];
                                  var state_10171__$1 = state_10171;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10171__$1, inst_10169);
                                } else {
                                  if (state_val_10172 === 12) {
                                    var inst_10157 = state_10171[2];
                                    var state_10171__$1 = state_10171;
                                    var statearr_10192_10225 = state_10171__$1;
                                    statearr_10192_10225[2] = inst_10157;
                                    statearr_10192_10225[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10172 === 2) {
                                      var state_10171__$1 = state_10171;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10171__$1, 4, in$);
                                    } else {
                                      if (state_val_10172 === 23) {
                                        var inst_10165 = state_10171[2];
                                        var state_10171__$1 = state_10171;
                                        var statearr_10193_10226 = state_10171__$1;
                                        statearr_10193_10226[2] = inst_10165;
                                        statearr_10193_10226[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10172 === 19) {
                                          var inst_10152 = state_10171[2];
                                          var state_10171__$1 = state_10171;
                                          var statearr_10194_10227 = state_10171__$1;
                                          statearr_10194_10227[2] = inst_10152;
                                          statearr_10194_10227[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_10172 === 11) {
                                            var inst_10137 = state_10171[7];
                                            var inst_10123 = state_10171[12];
                                            var inst_10137__$1 = cljs.core.seq.call(null, inst_10123);
                                            var state_10171__$1 = function() {
                                              var statearr_10195 = state_10171;
                                              statearr_10195[7] = inst_10137__$1;
                                              return statearr_10195;
                                            }();
                                            if (inst_10137__$1) {
                                              var statearr_10196_10228 = state_10171__$1;
                                              statearr_10196_10228[1] = 14;
                                            } else {
                                              var statearr_10197_10229 = state_10171__$1;
                                              statearr_10197_10229[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_10172 === 9) {
                                              var inst_10159 = state_10171[2];
                                              var inst_10160 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_10171__$1 = function() {
                                                var statearr_10198 = state_10171;
                                                statearr_10198[15] = inst_10159;
                                                return statearr_10198;
                                              }();
                                              if (cljs.core.truth_(inst_10160)) {
                                                var statearr_10199_10230 = state_10171__$1;
                                                statearr_10199_10230[1] = 21;
                                              } else {
                                                var statearr_10200_10231 = state_10171__$1;
                                                statearr_10200_10231[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_10172 === 5) {
                                                var inst_10115 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_10171__$1 = state_10171;
                                                var statearr_10201_10232 = state_10171__$1;
                                                statearr_10201_10232[2] = inst_10115;
                                                statearr_10201_10232[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_10172 === 14) {
                                                  var inst_10137 = state_10171[7];
                                                  var inst_10139 = cljs.core.chunked_seq_QMARK_.call(null, inst_10137);
                                                  var state_10171__$1 = state_10171;
                                                  if (inst_10139) {
                                                    var statearr_10202_10233 = state_10171__$1;
                                                    statearr_10202_10233[1] = 17;
                                                  } else {
                                                    var statearr_10203_10234 = state_10171__$1;
                                                    statearr_10203_10234[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_10172 === 16) {
                                                    var inst_10155 = state_10171[2];
                                                    var state_10171__$1 = state_10171;
                                                    var statearr_10204_10235 = state_10171__$1;
                                                    statearr_10204_10235[2] = inst_10155;
                                                    statearr_10204_10235[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_10172 === 10) {
                                                      var inst_10126 = state_10171[10];
                                                      var inst_10124 = state_10171[11];
                                                      var inst_10131 = cljs.core._nth.call(null, inst_10124, inst_10126);
                                                      var state_10171__$1 = state_10171;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10171__$1, 13, out, inst_10131);
                                                    } else {
                                                      if (state_val_10172 === 18) {
                                                        var inst_10137 = state_10171[7];
                                                        var inst_10146 = cljs.core.first.call(null, inst_10137);
                                                        var state_10171__$1 = state_10171;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10171__$1, 20, out, inst_10146);
                                                      } else {
                                                        if (state_val_10172 === 8) {
                                                          var inst_10125 = state_10171[8];
                                                          var inst_10126 = state_10171[10];
                                                          var inst_10128 = inst_10126 < inst_10125;
                                                          var inst_10129 = inst_10128;
                                                          var state_10171__$1 = state_10171;
                                                          if (cljs.core.truth_(inst_10129)) {
                                                            var statearr_10205_10236 = state_10171__$1;
                                                            statearr_10205_10236[1] = 10;
                                                          } else {
                                                            var statearr_10206_10237 = state_10171__$1;
                                                            statearr_10206_10237[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5708__auto__);
        return function(switch__5693__auto__, c__5708__auto__) {
          return function() {
            var state_machine__5694__auto__ = null;
            var state_machine__5694__auto____0 = function() {
              var statearr_10210 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_10210[0] = state_machine__5694__auto__;
              statearr_10210[1] = 1;
              return statearr_10210;
            };
            var state_machine__5694__auto____1 = function(state_10171) {
              while (true) {
                var ret_value__5695__auto__ = function() {
                  try {
                    while (true) {
                      var result__5696__auto__ = switch__5693__auto__.call(null, state_10171);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5696__auto__;
                      }
                      break;
                    }
                  } catch (e10211) {
                    if (e10211 instanceof Object) {
                      var ex__5697__auto__ = e10211;
                      var statearr_10212_10238 = state_10171;
                      statearr_10212_10238[5] = ex__5697__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10171);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e10211;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10239 = state_10171;
                  state_10171 = G__10239;
                  continue;
                } else {
                  return ret_value__5695__auto__;
                }
                break;
              }
            };
            state_machine__5694__auto__ = function(state_10171) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5694__auto____0.call(this);
                case 1:
                  return state_machine__5694__auto____1.call(this, state_10171);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
            return state_machine__5694__auto__;
          }();
        }(switch__5693__auto__, c__5708__auto__);
      }();
      var state__5710__auto__ = function() {
        var statearr_10213 = f__5709__auto__.call(null);
        statearr_10213[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto__;
        return statearr_10213;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
    };
  }(c__5708__auto__));
  return c__5708__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5708__auto___10334 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___10334) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___10334) {
            return function(state_10310) {
              var state_val_10311 = state_10310[1];
              if (state_val_10311 === 7) {
                var inst_10306 = state_10310[2];
                var state_10310__$1 = state_10310;
                var statearr_10312_10335 = state_10310__$1;
                statearr_10312_10335[2] = inst_10306;
                statearr_10312_10335[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10311 === 1) {
                  var state_10310__$1 = state_10310;
                  var statearr_10313_10336 = state_10310__$1;
                  statearr_10313_10336[2] = null;
                  statearr_10313_10336[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10311 === 4) {
                    var inst_10289 = state_10310[7];
                    var inst_10289__$1 = state_10310[2];
                    var inst_10290 = inst_10289__$1 == null;
                    var state_10310__$1 = function() {
                      var statearr_10314 = state_10310;
                      statearr_10314[7] = inst_10289__$1;
                      return statearr_10314;
                    }();
                    if (cljs.core.truth_(inst_10290)) {
                      var statearr_10315_10337 = state_10310__$1;
                      statearr_10315_10337[1] = 5;
                    } else {
                      var statearr_10316_10338 = state_10310__$1;
                      statearr_10316_10338[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10311 === 13) {
                      var state_10310__$1 = state_10310;
                      var statearr_10317_10339 = state_10310__$1;
                      statearr_10317_10339[2] = null;
                      statearr_10317_10339[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10311 === 6) {
                        var inst_10289 = state_10310[7];
                        var state_10310__$1 = state_10310;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10310__$1, 11, to, inst_10289);
                      } else {
                        if (state_val_10311 === 3) {
                          var inst_10308 = state_10310[2];
                          var state_10310__$1 = state_10310;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10310__$1, inst_10308);
                        } else {
                          if (state_val_10311 === 12) {
                            var state_10310__$1 = state_10310;
                            var statearr_10318_10340 = state_10310__$1;
                            statearr_10318_10340[2] = null;
                            statearr_10318_10340[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10311 === 2) {
                              var state_10310__$1 = state_10310;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10310__$1, 4, from);
                            } else {
                              if (state_val_10311 === 11) {
                                var inst_10299 = state_10310[2];
                                var state_10310__$1 = state_10310;
                                if (cljs.core.truth_(inst_10299)) {
                                  var statearr_10319_10341 = state_10310__$1;
                                  statearr_10319_10341[1] = 12;
                                } else {
                                  var statearr_10320_10342 = state_10310__$1;
                                  statearr_10320_10342[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10311 === 9) {
                                  var state_10310__$1 = state_10310;
                                  var statearr_10321_10343 = state_10310__$1;
                                  statearr_10321_10343[2] = null;
                                  statearr_10321_10343[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10311 === 5) {
                                    var state_10310__$1 = state_10310;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_10322_10344 = state_10310__$1;
                                      statearr_10322_10344[1] = 8;
                                    } else {
                                      var statearr_10323_10345 = state_10310__$1;
                                      statearr_10323_10345[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10311 === 14) {
                                      var inst_10304 = state_10310[2];
                                      var state_10310__$1 = state_10310;
                                      var statearr_10324_10346 = state_10310__$1;
                                      statearr_10324_10346[2] = inst_10304;
                                      statearr_10324_10346[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10311 === 10) {
                                        var inst_10296 = state_10310[2];
                                        var state_10310__$1 = state_10310;
                                        var statearr_10325_10347 = state_10310__$1;
                                        statearr_10325_10347[2] = inst_10296;
                                        statearr_10325_10347[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10311 === 8) {
                                          var inst_10293 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_10310__$1 = state_10310;
                                          var statearr_10326_10348 = state_10310__$1;
                                          statearr_10326_10348[2] = inst_10293;
                                          statearr_10326_10348[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___10334);
          return function(switch__5693__auto__, c__5708__auto___10334) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_10330 = [null, null, null, null, null, null, null, null];
                statearr_10330[0] = state_machine__5694__auto__;
                statearr_10330[1] = 1;
                return statearr_10330;
              };
              var state_machine__5694__auto____1 = function(state_10310) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_10310);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e10331) {
                      if (e10331 instanceof Object) {
                        var ex__5697__auto__ = e10331;
                        var statearr_10332_10349 = state_10310;
                        statearr_10332_10349[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10310);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e10331;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10350 = state_10310;
                    state_10310 = G__10350;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_10310) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_10310);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___10334);
        }();
        var state__5710__auto__ = function() {
          var statearr_10333 = f__5709__auto__.call(null);
          statearr_10333[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___10334;
          return statearr_10333;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___10334));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5708__auto___10451 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___10451, tc, fc) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___10451, tc, fc) {
            return function(state_10426) {
              var state_val_10427 = state_10426[1];
              if (state_val_10427 === 7) {
                var inst_10422 = state_10426[2];
                var state_10426__$1 = state_10426;
                var statearr_10428_10452 = state_10426__$1;
                statearr_10428_10452[2] = inst_10422;
                statearr_10428_10452[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10427 === 1) {
                  var state_10426__$1 = state_10426;
                  var statearr_10429_10453 = state_10426__$1;
                  statearr_10429_10453[2] = null;
                  statearr_10429_10453[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10427 === 4) {
                    var inst_10403 = state_10426[7];
                    var inst_10403__$1 = state_10426[2];
                    var inst_10404 = inst_10403__$1 == null;
                    var state_10426__$1 = function() {
                      var statearr_10430 = state_10426;
                      statearr_10430[7] = inst_10403__$1;
                      return statearr_10430;
                    }();
                    if (cljs.core.truth_(inst_10404)) {
                      var statearr_10431_10454 = state_10426__$1;
                      statearr_10431_10454[1] = 5;
                    } else {
                      var statearr_10432_10455 = state_10426__$1;
                      statearr_10432_10455[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10427 === 13) {
                      var state_10426__$1 = state_10426;
                      var statearr_10433_10456 = state_10426__$1;
                      statearr_10433_10456[2] = null;
                      statearr_10433_10456[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10427 === 6) {
                        var inst_10403 = state_10426[7];
                        var inst_10409 = p.call(null, inst_10403);
                        var state_10426__$1 = state_10426;
                        if (cljs.core.truth_(inst_10409)) {
                          var statearr_10434_10457 = state_10426__$1;
                          statearr_10434_10457[1] = 9;
                        } else {
                          var statearr_10435_10458 = state_10426__$1;
                          statearr_10435_10458[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10427 === 3) {
                          var inst_10424 = state_10426[2];
                          var state_10426__$1 = state_10426;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10426__$1, inst_10424);
                        } else {
                          if (state_val_10427 === 12) {
                            var state_10426__$1 = state_10426;
                            var statearr_10436_10459 = state_10426__$1;
                            statearr_10436_10459[2] = null;
                            statearr_10436_10459[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10427 === 2) {
                              var state_10426__$1 = state_10426;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10426__$1, 4, ch);
                            } else {
                              if (state_val_10427 === 11) {
                                var inst_10403 = state_10426[7];
                                var inst_10413 = state_10426[2];
                                var state_10426__$1 = state_10426;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10426__$1, 8, inst_10413, inst_10403);
                              } else {
                                if (state_val_10427 === 9) {
                                  var state_10426__$1 = state_10426;
                                  var statearr_10437_10460 = state_10426__$1;
                                  statearr_10437_10460[2] = tc;
                                  statearr_10437_10460[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10427 === 5) {
                                    var inst_10406 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_10407 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_10426__$1 = function() {
                                      var statearr_10438 = state_10426;
                                      statearr_10438[8] = inst_10406;
                                      return statearr_10438;
                                    }();
                                    var statearr_10439_10461 = state_10426__$1;
                                    statearr_10439_10461[2] = inst_10407;
                                    statearr_10439_10461[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10427 === 14) {
                                      var inst_10420 = state_10426[2];
                                      var state_10426__$1 = state_10426;
                                      var statearr_10440_10462 = state_10426__$1;
                                      statearr_10440_10462[2] = inst_10420;
                                      statearr_10440_10462[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10427 === 10) {
                                        var state_10426__$1 = state_10426;
                                        var statearr_10441_10463 = state_10426__$1;
                                        statearr_10441_10463[2] = fc;
                                        statearr_10441_10463[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_10427 === 8) {
                                          var inst_10415 = state_10426[2];
                                          var state_10426__$1 = state_10426;
                                          if (cljs.core.truth_(inst_10415)) {
                                            var statearr_10442_10464 = state_10426__$1;
                                            statearr_10442_10464[1] = 12;
                                          } else {
                                            var statearr_10443_10465 = state_10426__$1;
                                            statearr_10443_10465[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___10451, tc, fc);
          return function(switch__5693__auto__, c__5708__auto___10451, tc, fc) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_10447 = [null, null, null, null, null, null, null, null, null];
                statearr_10447[0] = state_machine__5694__auto__;
                statearr_10447[1] = 1;
                return statearr_10447;
              };
              var state_machine__5694__auto____1 = function(state_10426) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_10426);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e10448) {
                      if (e10448 instanceof Object) {
                        var ex__5697__auto__ = e10448;
                        var statearr_10449_10466 = state_10426;
                        statearr_10449_10466[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10426);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e10448;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10467 = state_10426;
                    state_10426 = G__10467;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_10426) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_10426);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___10451, tc, fc);
        }();
        var state__5710__auto__ = function() {
          var statearr_10450 = f__5709__auto__.call(null);
          statearr_10450[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___10451;
          return statearr_10450;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___10451, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5708__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto__) {
    return function() {
      var f__5709__auto__ = function() {
        var switch__5693__auto__ = function(c__5708__auto__) {
          return function(state_10514) {
            var state_val_10515 = state_10514[1];
            if (state_val_10515 === 7) {
              var inst_10510 = state_10514[2];
              var state_10514__$1 = state_10514;
              var statearr_10516_10532 = state_10514__$1;
              statearr_10516_10532[2] = inst_10510;
              statearr_10516_10532[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10515 === 6) {
                var inst_10500 = state_10514[7];
                var inst_10503 = state_10514[8];
                var inst_10507 = f.call(null, inst_10500, inst_10503);
                var inst_10500__$1 = inst_10507;
                var state_10514__$1 = function() {
                  var statearr_10517 = state_10514;
                  statearr_10517[7] = inst_10500__$1;
                  return statearr_10517;
                }();
                var statearr_10518_10533 = state_10514__$1;
                statearr_10518_10533[2] = null;
                statearr_10518_10533[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10515 === 5) {
                  var inst_10500 = state_10514[7];
                  var state_10514__$1 = state_10514;
                  var statearr_10519_10534 = state_10514__$1;
                  statearr_10519_10534[2] = inst_10500;
                  statearr_10519_10534[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10515 === 4) {
                    var inst_10503 = state_10514[8];
                    var inst_10503__$1 = state_10514[2];
                    var inst_10504 = inst_10503__$1 == null;
                    var state_10514__$1 = function() {
                      var statearr_10520 = state_10514;
                      statearr_10520[8] = inst_10503__$1;
                      return statearr_10520;
                    }();
                    if (cljs.core.truth_(inst_10504)) {
                      var statearr_10521_10535 = state_10514__$1;
                      statearr_10521_10535[1] = 5;
                    } else {
                      var statearr_10522_10536 = state_10514__$1;
                      statearr_10522_10536[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_10515 === 3) {
                      var inst_10512 = state_10514[2];
                      var state_10514__$1 = state_10514;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10514__$1, inst_10512);
                    } else {
                      if (state_val_10515 === 2) {
                        var state_10514__$1 = state_10514;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10514__$1, 4, ch);
                      } else {
                        if (state_val_10515 === 1) {
                          var inst_10500 = init;
                          var state_10514__$1 = function() {
                            var statearr_10523 = state_10514;
                            statearr_10523[7] = inst_10500;
                            return statearr_10523;
                          }();
                          var statearr_10524_10537 = state_10514__$1;
                          statearr_10524_10537[2] = null;
                          statearr_10524_10537[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5708__auto__);
        return function(switch__5693__auto__, c__5708__auto__) {
          return function() {
            var state_machine__5694__auto__ = null;
            var state_machine__5694__auto____0 = function() {
              var statearr_10528 = [null, null, null, null, null, null, null, null, null];
              statearr_10528[0] = state_machine__5694__auto__;
              statearr_10528[1] = 1;
              return statearr_10528;
            };
            var state_machine__5694__auto____1 = function(state_10514) {
              while (true) {
                var ret_value__5695__auto__ = function() {
                  try {
                    while (true) {
                      var result__5696__auto__ = switch__5693__auto__.call(null, state_10514);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5696__auto__;
                      }
                      break;
                    }
                  } catch (e10529) {
                    if (e10529 instanceof Object) {
                      var ex__5697__auto__ = e10529;
                      var statearr_10530_10538 = state_10514;
                      statearr_10530_10538[5] = ex__5697__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10514);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e10529;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10539 = state_10514;
                  state_10514 = G__10539;
                  continue;
                } else {
                  return ret_value__5695__auto__;
                }
                break;
              }
            };
            state_machine__5694__auto__ = function(state_10514) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5694__auto____0.call(this);
                case 1:
                  return state_machine__5694__auto____1.call(this, state_10514);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
            return state_machine__5694__auto__;
          }();
        }(switch__5693__auto__, c__5708__auto__);
      }();
      var state__5710__auto__ = function() {
        var statearr_10531 = f__5709__auto__.call(null);
        statearr_10531[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto__;
        return statearr_10531;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
    };
  }(c__5708__auto__));
  return c__5708__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5708__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto__) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto__) {
            return function(state_10613) {
              var state_val_10614 = state_10613[1];
              if (state_val_10614 === 7) {
                var inst_10595 = state_10613[2];
                var state_10613__$1 = state_10613;
                var statearr_10615_10638 = state_10613__$1;
                statearr_10615_10638[2] = inst_10595;
                statearr_10615_10638[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_10614 === 1) {
                  var inst_10589 = cljs.core.seq.call(null, coll);
                  var inst_10590 = inst_10589;
                  var state_10613__$1 = function() {
                    var statearr_10616 = state_10613;
                    statearr_10616[7] = inst_10590;
                    return statearr_10616;
                  }();
                  var statearr_10617_10639 = state_10613__$1;
                  statearr_10617_10639[2] = null;
                  statearr_10617_10639[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_10614 === 4) {
                    var inst_10590 = state_10613[7];
                    var inst_10593 = cljs.core.first.call(null, inst_10590);
                    var state_10613__$1 = state_10613;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_10613__$1, 7, ch, inst_10593);
                  } else {
                    if (state_val_10614 === 13) {
                      var inst_10607 = state_10613[2];
                      var state_10613__$1 = state_10613;
                      var statearr_10618_10640 = state_10613__$1;
                      statearr_10618_10640[2] = inst_10607;
                      statearr_10618_10640[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_10614 === 6) {
                        var inst_10598 = state_10613[2];
                        var state_10613__$1 = state_10613;
                        if (cljs.core.truth_(inst_10598)) {
                          var statearr_10619_10641 = state_10613__$1;
                          statearr_10619_10641[1] = 8;
                        } else {
                          var statearr_10620_10642 = state_10613__$1;
                          statearr_10620_10642[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_10614 === 3) {
                          var inst_10611 = state_10613[2];
                          var state_10613__$1 = state_10613;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10613__$1, inst_10611);
                        } else {
                          if (state_val_10614 === 12) {
                            var state_10613__$1 = state_10613;
                            var statearr_10621_10643 = state_10613__$1;
                            statearr_10621_10643[2] = null;
                            statearr_10621_10643[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_10614 === 2) {
                              var inst_10590 = state_10613[7];
                              var state_10613__$1 = state_10613;
                              if (cljs.core.truth_(inst_10590)) {
                                var statearr_10622_10644 = state_10613__$1;
                                statearr_10622_10644[1] = 4;
                              } else {
                                var statearr_10623_10645 = state_10613__$1;
                                statearr_10623_10645[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_10614 === 11) {
                                var inst_10604 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_10613__$1 = state_10613;
                                var statearr_10624_10646 = state_10613__$1;
                                statearr_10624_10646[2] = inst_10604;
                                statearr_10624_10646[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_10614 === 9) {
                                  var state_10613__$1 = state_10613;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_10625_10647 = state_10613__$1;
                                    statearr_10625_10647[1] = 11;
                                  } else {
                                    var statearr_10626_10648 = state_10613__$1;
                                    statearr_10626_10648[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_10614 === 5) {
                                    var inst_10590 = state_10613[7];
                                    var state_10613__$1 = state_10613;
                                    var statearr_10627_10649 = state_10613__$1;
                                    statearr_10627_10649[2] = inst_10590;
                                    statearr_10627_10649[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_10614 === 10) {
                                      var inst_10609 = state_10613[2];
                                      var state_10613__$1 = state_10613;
                                      var statearr_10628_10650 = state_10613__$1;
                                      statearr_10628_10650[2] = inst_10609;
                                      statearr_10628_10650[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_10614 === 8) {
                                        var inst_10590 = state_10613[7];
                                        var inst_10600 = cljs.core.next.call(null, inst_10590);
                                        var inst_10590__$1 = inst_10600;
                                        var state_10613__$1 = function() {
                                          var statearr_10629 = state_10613;
                                          statearr_10629[7] = inst_10590__$1;
                                          return statearr_10629;
                                        }();
                                        var statearr_10630_10651 = state_10613__$1;
                                        statearr_10630_10651[2] = null;
                                        statearr_10630_10651[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto__);
          return function(switch__5693__auto__, c__5708__auto__) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_10634 = [null, null, null, null, null, null, null, null];
                statearr_10634[0] = state_machine__5694__auto__;
                statearr_10634[1] = 1;
                return statearr_10634;
              };
              var state_machine__5694__auto____1 = function(state_10613) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_10613);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e10635) {
                      if (e10635 instanceof Object) {
                        var ex__5697__auto__ = e10635;
                        var statearr_10636_10652 = state_10613;
                        statearr_10636_10652[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10613);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e10635;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__10653 = state_10613;
                    state_10613 = G__10653;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_10613) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_10613);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto__);
        }();
        var state__5710__auto__ = function() {
          var statearr_10637 = f__5709__auto__.call(null);
          statearr_10637[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto__;
          return statearr_10637;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto__));
    return c__5708__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj10655 = {};
  return obj10655;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3531__auto__ = _;
    if (and__3531__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4170__auto__ = _ == null ? null : _;
    return function() {
      var or__3543__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj10657 = {};
  return obj10657;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t10879 !== "undefined") {
    } else {
      cljs.core.async.t10879 = function(cs, ch, mult, meta10880) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta10880 = meta10880;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t10879.cljs$lang$type = true;
      cljs.core.async.t10879.cljs$lang$ctorStr = "cljs.core.async/t10879";
      cljs.core.async.t10879.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
          return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t10879");
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t10879.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t10879.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_10881) {
          var self__ = this;
          var _10881__$1 = this;
          return self__.meta10880;
        };
      }(cs);
      cljs.core.async.t10879.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_10881, meta10880__$1) {
          var self__ = this;
          var _10881__$1 = this;
          return new cljs.core.async.t10879(self__.cs, self__.ch, self__.mult, meta10880__$1);
        };
      }(cs);
      cljs.core.async.__GT_t10879 = function(cs) {
        return function __GT_t10879(cs__$1, ch__$1, mult__$1, meta10880) {
          return new cljs.core.async.t10879(cs__$1, ch__$1, mult__$1, meta10880);
        };
      }(cs);
    }
    return new cljs.core.async.t10879(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5708__auto___11100 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___11100, cs, m, dchan, dctr, done) {
    return function() {
      var f__5709__auto__ = function() {
        var switch__5693__auto__ = function(c__5708__auto___11100, cs, m, dchan, dctr, done) {
          return function(state_11012) {
            var state_val_11013 = state_11012[1];
            if (state_val_11013 === 7) {
              var inst_11008 = state_11012[2];
              var state_11012__$1 = state_11012;
              var statearr_11014_11101 = state_11012__$1;
              statearr_11014_11101[2] = inst_11008;
              statearr_11014_11101[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11013 === 20) {
                var inst_10913 = state_11012[7];
                var inst_10923 = cljs.core.first.call(null, inst_10913);
                var inst_10924 = cljs.core.nth.call(null, inst_10923, 0, null);
                var inst_10925 = cljs.core.nth.call(null, inst_10923, 1, null);
                var state_11012__$1 = function() {
                  var statearr_11015 = state_11012;
                  statearr_11015[8] = inst_10924;
                  return statearr_11015;
                }();
                if (cljs.core.truth_(inst_10925)) {
                  var statearr_11016_11102 = state_11012__$1;
                  statearr_11016_11102[1] = 22;
                } else {
                  var statearr_11017_11103 = state_11012__$1;
                  statearr_11017_11103[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11013 === 27) {
                  var inst_10955 = state_11012[9];
                  var inst_10960 = state_11012[10];
                  var inst_10953 = state_11012[11];
                  var inst_10884 = state_11012[12];
                  var inst_10960__$1 = cljs.core._nth.call(null, inst_10953, inst_10955);
                  var inst_10961 = cljs.core.async.put_BANG_.call(null, inst_10960__$1, inst_10884, done);
                  var state_11012__$1 = function() {
                    var statearr_11018 = state_11012;
                    statearr_11018[10] = inst_10960__$1;
                    return statearr_11018;
                  }();
                  if (cljs.core.truth_(inst_10961)) {
                    var statearr_11019_11104 = state_11012__$1;
                    statearr_11019_11104[1] = 30;
                  } else {
                    var statearr_11020_11105 = state_11012__$1;
                    statearr_11020_11105[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11013 === 1) {
                    var state_11012__$1 = state_11012;
                    var statearr_11021_11106 = state_11012__$1;
                    statearr_11021_11106[2] = null;
                    statearr_11021_11106[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11013 === 24) {
                      var inst_10913 = state_11012[7];
                      var inst_10930 = state_11012[2];
                      var inst_10931 = cljs.core.next.call(null, inst_10913);
                      var inst_10893 = inst_10931;
                      var inst_10894 = null;
                      var inst_10895 = 0;
                      var inst_10896 = 0;
                      var state_11012__$1 = function() {
                        var statearr_11022 = state_11012;
                        statearr_11022[13] = inst_10930;
                        statearr_11022[14] = inst_10896;
                        statearr_11022[15] = inst_10894;
                        statearr_11022[16] = inst_10893;
                        statearr_11022[17] = inst_10895;
                        return statearr_11022;
                      }();
                      var statearr_11023_11107 = state_11012__$1;
                      statearr_11023_11107[2] = null;
                      statearr_11023_11107[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11013 === 39) {
                        var state_11012__$1 = state_11012;
                        var statearr_11027_11108 = state_11012__$1;
                        statearr_11027_11108[2] = null;
                        statearr_11027_11108[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11013 === 4) {
                          var inst_10884 = state_11012[12];
                          var inst_10884__$1 = state_11012[2];
                          var inst_10885 = inst_10884__$1 == null;
                          var state_11012__$1 = function() {
                            var statearr_11028 = state_11012;
                            statearr_11028[12] = inst_10884__$1;
                            return statearr_11028;
                          }();
                          if (cljs.core.truth_(inst_10885)) {
                            var statearr_11029_11109 = state_11012__$1;
                            statearr_11029_11109[1] = 5;
                          } else {
                            var statearr_11030_11110 = state_11012__$1;
                            statearr_11030_11110[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11013 === 15) {
                            var inst_10896 = state_11012[14];
                            var inst_10894 = state_11012[15];
                            var inst_10893 = state_11012[16];
                            var inst_10895 = state_11012[17];
                            var inst_10909 = state_11012[2];
                            var inst_10910 = inst_10896 + 1;
                            var tmp11024 = inst_10894;
                            var tmp11025 = inst_10893;
                            var tmp11026 = inst_10895;
                            var inst_10893__$1 = tmp11025;
                            var inst_10894__$1 = tmp11024;
                            var inst_10895__$1 = tmp11026;
                            var inst_10896__$1 = inst_10910;
                            var state_11012__$1 = function() {
                              var statearr_11031 = state_11012;
                              statearr_11031[18] = inst_10909;
                              statearr_11031[14] = inst_10896__$1;
                              statearr_11031[15] = inst_10894__$1;
                              statearr_11031[16] = inst_10893__$1;
                              statearr_11031[17] = inst_10895__$1;
                              return statearr_11031;
                            }();
                            var statearr_11032_11111 = state_11012__$1;
                            statearr_11032_11111[2] = null;
                            statearr_11032_11111[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11013 === 21) {
                              var inst_10934 = state_11012[2];
                              var state_11012__$1 = state_11012;
                              var statearr_11036_11112 = state_11012__$1;
                              statearr_11036_11112[2] = inst_10934;
                              statearr_11036_11112[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11013 === 31) {
                                var inst_10960 = state_11012[10];
                                var inst_10964 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                var inst_10965 = cljs.core.async.untap_STAR_.call(null, m, inst_10960);
                                var state_11012__$1 = function() {
                                  var statearr_11037 = state_11012;
                                  statearr_11037[19] = inst_10964;
                                  return statearr_11037;
                                }();
                                var statearr_11038_11113 = state_11012__$1;
                                statearr_11038_11113[2] = inst_10965;
                                statearr_11038_11113[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11013 === 32) {
                                  var inst_10955 = state_11012[9];
                                  var inst_10953 = state_11012[11];
                                  var inst_10954 = state_11012[20];
                                  var inst_10952 = state_11012[21];
                                  var inst_10967 = state_11012[2];
                                  var inst_10968 = inst_10955 + 1;
                                  var tmp11033 = inst_10953;
                                  var tmp11034 = inst_10954;
                                  var tmp11035 = inst_10952;
                                  var inst_10952__$1 = tmp11035;
                                  var inst_10953__$1 = tmp11033;
                                  var inst_10954__$1 = tmp11034;
                                  var inst_10955__$1 = inst_10968;
                                  var state_11012__$1 = function() {
                                    var statearr_11039 = state_11012;
                                    statearr_11039[22] = inst_10967;
                                    statearr_11039[9] = inst_10955__$1;
                                    statearr_11039[11] = inst_10953__$1;
                                    statearr_11039[20] = inst_10954__$1;
                                    statearr_11039[21] = inst_10952__$1;
                                    return statearr_11039;
                                  }();
                                  var statearr_11040_11114 = state_11012__$1;
                                  statearr_11040_11114[2] = null;
                                  statearr_11040_11114[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11013 === 40) {
                                    var inst_10980 = state_11012[23];
                                    var inst_10984 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                    var inst_10985 = cljs.core.async.untap_STAR_.call(null, m, inst_10980);
                                    var state_11012__$1 = function() {
                                      var statearr_11041 = state_11012;
                                      statearr_11041[24] = inst_10984;
                                      return statearr_11041;
                                    }();
                                    var statearr_11042_11115 = state_11012__$1;
                                    statearr_11042_11115[2] = inst_10985;
                                    statearr_11042_11115[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11013 === 33) {
                                      var inst_10971 = state_11012[25];
                                      var inst_10973 = cljs.core.chunked_seq_QMARK_.call(null, inst_10971);
                                      var state_11012__$1 = state_11012;
                                      if (inst_10973) {
                                        var statearr_11043_11116 = state_11012__$1;
                                        statearr_11043_11116[1] = 36;
                                      } else {
                                        var statearr_11044_11117 = state_11012__$1;
                                        statearr_11044_11117[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11013 === 13) {
                                        var inst_10903 = state_11012[26];
                                        var inst_10906 = cljs.core.async.close_BANG_.call(null, inst_10903);
                                        var state_11012__$1 = state_11012;
                                        var statearr_11045_11118 = state_11012__$1;
                                        statearr_11045_11118[2] = inst_10906;
                                        statearr_11045_11118[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11013 === 22) {
                                          var inst_10924 = state_11012[8];
                                          var inst_10927 = cljs.core.async.close_BANG_.call(null, inst_10924);
                                          var state_11012__$1 = state_11012;
                                          var statearr_11046_11119 = state_11012__$1;
                                          statearr_11046_11119[2] = inst_10927;
                                          statearr_11046_11119[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11013 === 36) {
                                            var inst_10971 = state_11012[25];
                                            var inst_10975 = cljs.core.chunk_first.call(null, inst_10971);
                                            var inst_10976 = cljs.core.chunk_rest.call(null, inst_10971);
                                            var inst_10977 = cljs.core.count.call(null, inst_10975);
                                            var inst_10952 = inst_10976;
                                            var inst_10953 = inst_10975;
                                            var inst_10954 = inst_10977;
                                            var inst_10955 = 0;
                                            var state_11012__$1 = function() {
                                              var statearr_11047 = state_11012;
                                              statearr_11047[9] = inst_10955;
                                              statearr_11047[11] = inst_10953;
                                              statearr_11047[20] = inst_10954;
                                              statearr_11047[21] = inst_10952;
                                              return statearr_11047;
                                            }();
                                            var statearr_11048_11120 = state_11012__$1;
                                            statearr_11048_11120[2] = null;
                                            statearr_11048_11120[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11013 === 41) {
                                              var inst_10971 = state_11012[25];
                                              var inst_10987 = state_11012[2];
                                              var inst_10988 = cljs.core.next.call(null, inst_10971);
                                              var inst_10952 = inst_10988;
                                              var inst_10953 = null;
                                              var inst_10954 = 0;
                                              var inst_10955 = 0;
                                              var state_11012__$1 = function() {
                                                var statearr_11049 = state_11012;
                                                statearr_11049[9] = inst_10955;
                                                statearr_11049[27] = inst_10987;
                                                statearr_11049[11] = inst_10953;
                                                statearr_11049[20] = inst_10954;
                                                statearr_11049[21] = inst_10952;
                                                return statearr_11049;
                                              }();
                                              var statearr_11050_11121 = state_11012__$1;
                                              statearr_11050_11121[2] = null;
                                              statearr_11050_11121[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11013 === 43) {
                                                var state_11012__$1 = state_11012;
                                                var statearr_11051_11122 = state_11012__$1;
                                                statearr_11051_11122[2] = null;
                                                statearr_11051_11122[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11013 === 29) {
                                                  var inst_10996 = state_11012[2];
                                                  var state_11012__$1 = state_11012;
                                                  var statearr_11052_11123 = state_11012__$1;
                                                  statearr_11052_11123[2] = inst_10996;
                                                  statearr_11052_11123[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11013 === 44) {
                                                    var inst_11005 = state_11012[2];
                                                    var state_11012__$1 = function() {
                                                      var statearr_11053 = state_11012;
                                                      statearr_11053[28] = inst_11005;
                                                      return statearr_11053;
                                                    }();
                                                    var statearr_11054_11124 = state_11012__$1;
                                                    statearr_11054_11124[2] = null;
                                                    statearr_11054_11124[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11013 === 6) {
                                                      var inst_10944 = state_11012[29];
                                                      var inst_10943 = cljs.core.deref.call(null, cs);
                                                      var inst_10944__$1 = cljs.core.keys.call(null, inst_10943);
                                                      var inst_10945 = cljs.core.count.call(null, inst_10944__$1);
                                                      var inst_10946 = cljs.core.reset_BANG_.call(null, dctr, inst_10945);
                                                      var inst_10951 = cljs.core.seq.call(null, inst_10944__$1);
                                                      var inst_10952 = inst_10951;
                                                      var inst_10953 = null;
                                                      var inst_10954 = 0;
                                                      var inst_10955 = 0;
                                                      var state_11012__$1 = function() {
                                                        var statearr_11055 = state_11012;
                                                        statearr_11055[9] = inst_10955;
                                                        statearr_11055[30] = inst_10946;
                                                        statearr_11055[11] = inst_10953;
                                                        statearr_11055[29] = inst_10944__$1;
                                                        statearr_11055[20] = inst_10954;
                                                        statearr_11055[21] = inst_10952;
                                                        return statearr_11055;
                                                      }();
                                                      var statearr_11056_11125 = state_11012__$1;
                                                      statearr_11056_11125[2] = null;
                                                      statearr_11056_11125[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11013 === 28) {
                                                        var inst_10971 = state_11012[25];
                                                        var inst_10952 = state_11012[21];
                                                        var inst_10971__$1 = cljs.core.seq.call(null, inst_10952);
                                                        var state_11012__$1 = function() {
                                                          var statearr_11057 = state_11012;
                                                          statearr_11057[25] = inst_10971__$1;
                                                          return statearr_11057;
                                                        }();
                                                        if (inst_10971__$1) {
                                                          var statearr_11058_11126 = state_11012__$1;
                                                          statearr_11058_11126[1] = 33;
                                                        } else {
                                                          var statearr_11059_11127 = state_11012__$1;
                                                          statearr_11059_11127[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11013 === 25) {
                                                          var inst_10955 = state_11012[9];
                                                          var inst_10954 = state_11012[20];
                                                          var inst_10957 = inst_10955 < inst_10954;
                                                          var inst_10958 = inst_10957;
                                                          var state_11012__$1 = state_11012;
                                                          if (cljs.core.truth_(inst_10958)) {
                                                            var statearr_11060_11128 = state_11012__$1;
                                                            statearr_11060_11128[1] = 27;
                                                          } else {
                                                            var statearr_11061_11129 = state_11012__$1;
                                                            statearr_11061_11129[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11013 === 34) {
                                                            var state_11012__$1 = state_11012;
                                                            var statearr_11062_11130 = state_11012__$1;
                                                            statearr_11062_11130[2] = null;
                                                            statearr_11062_11130[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11013 === 17) {
                                                              var state_11012__$1 = state_11012;
                                                              var statearr_11063_11131 = state_11012__$1;
                                                              statearr_11063_11131[2] = null;
                                                              statearr_11063_11131[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11013 === 3) {
                                                                var inst_11010 = state_11012[2];
                                                                var state_11012__$1 = state_11012;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11012__$1, inst_11010);
                                                              } else {
                                                                if (state_val_11013 === 12) {
                                                                  var inst_10939 = state_11012[2];
                                                                  var state_11012__$1 = state_11012;
                                                                  var statearr_11064_11132 = state_11012__$1;
                                                                  statearr_11064_11132[2] = inst_10939;
                                                                  statearr_11064_11132[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_11013 === 2) {
                                                                    var state_11012__$1 = state_11012;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11012__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_11013 === 23) {
                                                                      var state_11012__$1 = state_11012;
                                                                      var statearr_11065_11133 = state_11012__$1;
                                                                      statearr_11065_11133[2] = null;
                                                                      statearr_11065_11133[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_11013 === 35) {
                                                                        var inst_10994 = state_11012[2];
                                                                        var state_11012__$1 = state_11012;
                                                                        var statearr_11066_11134 = state_11012__$1;
                                                                        statearr_11066_11134[2] = inst_10994;
                                                                        statearr_11066_11134[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_11013 === 19) {
                                                                          var inst_10913 = state_11012[7];
                                                                          var inst_10917 = cljs.core.chunk_first.call(null, inst_10913);
                                                                          var inst_10918 = cljs.core.chunk_rest.call(null, inst_10913);
                                                                          var inst_10919 = cljs.core.count.call(null, inst_10917);
                                                                          var inst_10893 = inst_10918;
                                                                          var inst_10894 = inst_10917;
                                                                          var inst_10895 = inst_10919;
                                                                          var inst_10896 = 0;
                                                                          var state_11012__$1 = function() {
                                                                            var statearr_11067 = state_11012;
                                                                            statearr_11067[14] = inst_10896;
                                                                            statearr_11067[15] = inst_10894;
                                                                            statearr_11067[16] = inst_10893;
                                                                            statearr_11067[17] = inst_10895;
                                                                            return statearr_11067;
                                                                          }();
                                                                          var statearr_11068_11135 = state_11012__$1;
                                                                          statearr_11068_11135[2] = null;
                                                                          statearr_11068_11135[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_11013 === 11) {
                                                                            var inst_10893 = state_11012[16];
                                                                            var inst_10913 = state_11012[7];
                                                                            var inst_10913__$1 = cljs.core.seq.call(null, inst_10893);
                                                                            var state_11012__$1 = function() {
                                                                              var statearr_11069 = state_11012;
                                                                              statearr_11069[7] = inst_10913__$1;
                                                                              return statearr_11069;
                                                                            }();
                                                                            if (inst_10913__$1) {
                                                                              var statearr_11070_11136 = state_11012__$1;
                                                                              statearr_11070_11136[1] = 16;
                                                                            } else {
                                                                              var statearr_11071_11137 = state_11012__$1;
                                                                              statearr_11071_11137[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_11013 === 9) {
                                                                              var inst_10941 = state_11012[2];
                                                                              var state_11012__$1 = state_11012;
                                                                              var statearr_11072_11138 = state_11012__$1;
                                                                              statearr_11072_11138[2] = inst_10941;
                                                                              statearr_11072_11138[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_11013 === 5) {
                                                                                var inst_10891 = cljs.core.deref.call(null, cs);
                                                                                var inst_10892 = cljs.core.seq.call(null, inst_10891);
                                                                                var inst_10893 = inst_10892;
                                                                                var inst_10894 = null;
                                                                                var inst_10895 = 0;
                                                                                var inst_10896 = 0;
                                                                                var state_11012__$1 = function() {
                                                                                  var statearr_11073 = state_11012;
                                                                                  statearr_11073[14] = inst_10896;
                                                                                  statearr_11073[15] = inst_10894;
                                                                                  statearr_11073[16] = inst_10893;
                                                                                  statearr_11073[17] = inst_10895;
                                                                                  return statearr_11073;
                                                                                }();
                                                                                var statearr_11074_11139 = state_11012__$1;
                                                                                statearr_11074_11139[2] = null;
                                                                                statearr_11074_11139[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_11013 === 14) {
                                                                                  var state_11012__$1 = state_11012;
                                                                                  var statearr_11075_11140 = state_11012__$1;
                                                                                  statearr_11075_11140[2] = null;
                                                                                  statearr_11075_11140[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_11013 === 45) {
                                                                                    var inst_11002 = state_11012[2];
                                                                                    var state_11012__$1 = state_11012;
                                                                                    var statearr_11076_11141 = state_11012__$1;
                                                                                    statearr_11076_11141[2] = inst_11002;
                                                                                    statearr_11076_11141[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_11013 === 26) {
                                                                                      var inst_10944 = state_11012[29];
                                                                                      var inst_10998 = state_11012[2];
                                                                                      var inst_10999 = cljs.core.seq.call(null, inst_10944);
                                                                                      var state_11012__$1 = function() {
                                                                                        var statearr_11077 = state_11012;
                                                                                        statearr_11077[31] = inst_10998;
                                                                                        return statearr_11077;
                                                                                      }();
                                                                                      if (inst_10999) {
                                                                                        var statearr_11078_11142 = state_11012__$1;
                                                                                        statearr_11078_11142[1] = 42;
                                                                                      } else {
                                                                                        var statearr_11079_11143 = state_11012__$1;
                                                                                        statearr_11079_11143[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_11013 === 16) {
                                                                                        var inst_10913 = state_11012[7];
                                                                                        var inst_10915 = cljs.core.chunked_seq_QMARK_.call(null, inst_10913);
                                                                                        var state_11012__$1 = state_11012;
                                                                                        if (inst_10915) {
                                                                                          var statearr_11080_11144 = state_11012__$1;
                                                                                          statearr_11080_11144[1] = 19;
                                                                                        } else {
                                                                                          var statearr_11081_11145 = state_11012__$1;
                                                                                          statearr_11081_11145[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_11013 === 38) {
                                                                                          var inst_10991 = state_11012[2];
                                                                                          var state_11012__$1 = state_11012;
                                                                                          var statearr_11082_11146 = state_11012__$1;
                                                                                          statearr_11082_11146[2] = inst_10991;
                                                                                          statearr_11082_11146[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_11013 === 30) {
                                                                                            var state_11012__$1 = state_11012;
                                                                                            var statearr_11083_11147 = state_11012__$1;
                                                                                            statearr_11083_11147[2] = null;
                                                                                            statearr_11083_11147[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_11013 === 10) {
                                                                                              var inst_10896 = state_11012[14];
                                                                                              var inst_10894 = state_11012[15];
                                                                                              var inst_10902 = cljs.core._nth.call(null, inst_10894, inst_10896);
                                                                                              var inst_10903 = cljs.core.nth.call(null, inst_10902, 0, null);
                                                                                              var inst_10904 = cljs.core.nth.call(null, inst_10902, 1, null);
                                                                                              var state_11012__$1 = function() {
                                                                                                var statearr_11084 = state_11012;
                                                                                                statearr_11084[26] = inst_10903;
                                                                                                return statearr_11084;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_10904)) {
                                                                                                var statearr_11085_11148 = state_11012__$1;
                                                                                                statearr_11085_11148[1] = 13;
                                                                                              } else {
                                                                                                var statearr_11086_11149 = state_11012__$1;
                                                                                                statearr_11086_11149[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_11013 === 18) {
                                                                                                var inst_10937 = state_11012[2];
                                                                                                var state_11012__$1 = state_11012;
                                                                                                var statearr_11087_11150 = state_11012__$1;
                                                                                                statearr_11087_11150[2] = inst_10937;
                                                                                                statearr_11087_11150[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_11013 === 42) {
                                                                                                  var state_11012__$1 = state_11012;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11012__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_11013 === 37) {
                                                                                                    var inst_10980 = state_11012[23];
                                                                                                    var inst_10884 = state_11012[12];
                                                                                                    var inst_10971 = state_11012[25];
                                                                                                    var inst_10980__$1 = cljs.core.first.call(null, inst_10971);
                                                                                                    var inst_10981 = cljs.core.async.put_BANG_.call(null, inst_10980__$1, inst_10884, done);
                                                                                                    var state_11012__$1 = function() {
                                                                                                      var statearr_11088 = state_11012;
                                                                                                      statearr_11088[23] = inst_10980__$1;
                                                                                                      return statearr_11088;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_10981)) {
                                                                                                      var statearr_11089_11151 = state_11012__$1;
                                                                                                      statearr_11089_11151[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_11090_11152 = state_11012__$1;
                                                                                                      statearr_11090_11152[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_11013 === 8) {
                                                                                                      var inst_10896 = state_11012[14];
                                                                                                      var inst_10895 = state_11012[17];
                                                                                                      var inst_10898 = inst_10896 < inst_10895;
                                                                                                      var inst_10899 = inst_10898;
                                                                                                      var state_11012__$1 = state_11012;
                                                                                                      if (cljs.core.truth_(inst_10899)) {
                                                                                                        var statearr_11091_11153 = state_11012__$1;
                                                                                                        statearr_11091_11153[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_11092_11154 = state_11012__$1;
                                                                                                        statearr_11092_11154[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5708__auto___11100, cs, m, dchan, dctr, done);
        return function(switch__5693__auto__, c__5708__auto___11100, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__5694__auto__ = null;
            var state_machine__5694__auto____0 = function() {
              var statearr_11096 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11096[0] = state_machine__5694__auto__;
              statearr_11096[1] = 1;
              return statearr_11096;
            };
            var state_machine__5694__auto____1 = function(state_11012) {
              while (true) {
                var ret_value__5695__auto__ = function() {
                  try {
                    while (true) {
                      var result__5696__auto__ = switch__5693__auto__.call(null, state_11012);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5696__auto__;
                      }
                      break;
                    }
                  } catch (e11097) {
                    if (e11097 instanceof Object) {
                      var ex__5697__auto__ = e11097;
                      var statearr_11098_11155 = state_11012;
                      statearr_11098_11155[5] = ex__5697__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11012);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e11097;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11156 = state_11012;
                  state_11012 = G__11156;
                  continue;
                } else {
                  return ret_value__5695__auto__;
                }
                break;
              }
            };
            state_machine__5694__auto__ = function(state_11012) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5694__auto____0.call(this);
                case 1:
                  return state_machine__5694__auto____1.call(this, state_11012);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
            return state_machine__5694__auto__;
          }();
        }(switch__5693__auto__, c__5708__auto___11100, cs, m, dchan, dctr, done);
      }();
      var state__5710__auto__ = function() {
        var statearr_11099 = f__5709__auto__.call(null);
        statearr_11099[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___11100;
        return statearr_11099;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
    };
  }(c__5708__auto___11100, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj11158 = {};
  return obj11158;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3531__auto__ = m;
    if (and__3531__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4170__auto__ = m == null ? null : m;
    return function() {
      var or__3543__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t11278 !== "undefined") {
    } else {
      cljs.core.async.t11278 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta11279) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta11279 = meta11279;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t11278.cljs$lang$type = true;
      cljs.core.async.t11278.cljs$lang$ctorStr = "cljs.core.async/t11278";
      cljs.core.async.t11278.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
          return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t11278");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11278.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11280) {
          var self__ = this;
          var _11280__$1 = this;
          return self__.meta11279;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t11278.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_11280, meta11279__$1) {
          var self__ = this;
          var _11280__$1 = this;
          return new cljs.core.async.t11278(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta11279__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t11278 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t11278(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11279) {
          return new cljs.core.async.t11278(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta11279);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t11278(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__5708__auto___11397 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__5709__auto__ = function() {
        var switch__5693__auto__ = function(c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_11350) {
            var state_val_11351 = state_11350[1];
            if (state_val_11351 === 7) {
              var inst_11294 = state_11350[7];
              var inst_11299 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11294);
              var state_11350__$1 = state_11350;
              var statearr_11352_11398 = state_11350__$1;
              statearr_11352_11398[2] = inst_11299;
              statearr_11352_11398[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11351 === 20) {
                var inst_11309 = state_11350[8];
                var state_11350__$1 = state_11350;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11350__$1, 23, out, inst_11309);
              } else {
                if (state_val_11351 === 1) {
                  var inst_11284 = state_11350[9];
                  var inst_11284__$1 = calc_state.call(null);
                  var inst_11285 = cljs.core.seq_QMARK_.call(null, inst_11284__$1);
                  var state_11350__$1 = function() {
                    var statearr_11353 = state_11350;
                    statearr_11353[9] = inst_11284__$1;
                    return statearr_11353;
                  }();
                  if (inst_11285) {
                    var statearr_11354_11399 = state_11350__$1;
                    statearr_11354_11399[1] = 2;
                  } else {
                    var statearr_11355_11400 = state_11350__$1;
                    statearr_11355_11400[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11351 === 24) {
                    var inst_11302 = state_11350[10];
                    var inst_11294 = inst_11302;
                    var state_11350__$1 = function() {
                      var statearr_11356 = state_11350;
                      statearr_11356[7] = inst_11294;
                      return statearr_11356;
                    }();
                    var statearr_11357_11401 = state_11350__$1;
                    statearr_11357_11401[2] = null;
                    statearr_11357_11401[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11351 === 4) {
                      var inst_11284 = state_11350[9];
                      var inst_11290 = state_11350[2];
                      var inst_11291 = cljs.core.get.call(null, inst_11290, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_11292 = cljs.core.get.call(null, inst_11290, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_11293 = cljs.core.get.call(null, inst_11290, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_11294 = inst_11284;
                      var state_11350__$1 = function() {
                        var statearr_11358 = state_11350;
                        statearr_11358[11] = inst_11292;
                        statearr_11358[12] = inst_11291;
                        statearr_11358[7] = inst_11294;
                        statearr_11358[13] = inst_11293;
                        return statearr_11358;
                      }();
                      var statearr_11359_11402 = state_11350__$1;
                      statearr_11359_11402[2] = null;
                      statearr_11359_11402[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11351 === 15) {
                        var state_11350__$1 = state_11350;
                        var statearr_11360_11403 = state_11350__$1;
                        statearr_11360_11403[2] = null;
                        statearr_11360_11403[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11351 === 21) {
                          var inst_11302 = state_11350[10];
                          var inst_11294 = inst_11302;
                          var state_11350__$1 = function() {
                            var statearr_11361 = state_11350;
                            statearr_11361[7] = inst_11294;
                            return statearr_11361;
                          }();
                          var statearr_11362_11404 = state_11350__$1;
                          statearr_11362_11404[2] = null;
                          statearr_11362_11404[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11351 === 13) {
                            var inst_11346 = state_11350[2];
                            var state_11350__$1 = state_11350;
                            var statearr_11363_11405 = state_11350__$1;
                            statearr_11363_11405[2] = inst_11346;
                            statearr_11363_11405[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11351 === 22) {
                              var inst_11344 = state_11350[2];
                              var state_11350__$1 = state_11350;
                              var statearr_11364_11406 = state_11350__$1;
                              statearr_11364_11406[2] = inst_11344;
                              statearr_11364_11406[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11351 === 6) {
                                var inst_11348 = state_11350[2];
                                var state_11350__$1 = state_11350;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11350__$1, inst_11348);
                              } else {
                                if (state_val_11351 === 25) {
                                  var state_11350__$1 = state_11350;
                                  var statearr_11365_11407 = state_11350__$1;
                                  statearr_11365_11407[2] = null;
                                  statearr_11365_11407[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11351 === 17) {
                                    var inst_11324 = state_11350[14];
                                    var state_11350__$1 = state_11350;
                                    var statearr_11366_11408 = state_11350__$1;
                                    statearr_11366_11408[2] = inst_11324;
                                    statearr_11366_11408[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11351 === 3) {
                                      var inst_11284 = state_11350[9];
                                      var state_11350__$1 = state_11350;
                                      var statearr_11367_11409 = state_11350__$1;
                                      statearr_11367_11409[2] = inst_11284;
                                      statearr_11367_11409[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11351 === 12) {
                                        var inst_11305 = state_11350[15];
                                        var inst_11324 = state_11350[14];
                                        var inst_11310 = state_11350[16];
                                        var inst_11324__$1 = inst_11305.call(null, inst_11310);
                                        var state_11350__$1 = function() {
                                          var statearr_11368 = state_11350;
                                          statearr_11368[14] = inst_11324__$1;
                                          return statearr_11368;
                                        }();
                                        if (cljs.core.truth_(inst_11324__$1)) {
                                          var statearr_11369_11410 = state_11350__$1;
                                          statearr_11369_11410[1] = 17;
                                        } else {
                                          var statearr_11370_11411 = state_11350__$1;
                                          statearr_11370_11411[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11351 === 2) {
                                          var inst_11284 = state_11350[9];
                                          var inst_11287 = cljs.core.apply.call(null, cljs.core.hash_map, inst_11284);
                                          var state_11350__$1 = state_11350;
                                          var statearr_11371_11412 = state_11350__$1;
                                          statearr_11371_11412[2] = inst_11287;
                                          statearr_11371_11412[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11351 === 23) {
                                            var inst_11335 = state_11350[2];
                                            var state_11350__$1 = state_11350;
                                            if (cljs.core.truth_(inst_11335)) {
                                              var statearr_11372_11413 = state_11350__$1;
                                              statearr_11372_11413[1] = 24;
                                            } else {
                                              var statearr_11373_11414 = state_11350__$1;
                                              statearr_11373_11414[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11351 === 19) {
                                              var inst_11332 = state_11350[2];
                                              var state_11350__$1 = state_11350;
                                              if (cljs.core.truth_(inst_11332)) {
                                                var statearr_11374_11415 = state_11350__$1;
                                                statearr_11374_11415[1] = 20;
                                              } else {
                                                var statearr_11375_11416 = state_11350__$1;
                                                statearr_11375_11416[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11351 === 11) {
                                                var inst_11309 = state_11350[8];
                                                var inst_11315 = inst_11309 == null;
                                                var state_11350__$1 = state_11350;
                                                if (cljs.core.truth_(inst_11315)) {
                                                  var statearr_11376_11417 = state_11350__$1;
                                                  statearr_11376_11417[1] = 14;
                                                } else {
                                                  var statearr_11377_11418 = state_11350__$1;
                                                  statearr_11377_11418[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11351 === 9) {
                                                  var inst_11302 = state_11350[10];
                                                  var inst_11302__$1 = state_11350[2];
                                                  var inst_11303 = cljs.core.get.call(null, inst_11302__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_11304 = cljs.core.get.call(null, inst_11302__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_11305 = cljs.core.get.call(null, inst_11302__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_11350__$1 = function() {
                                                    var statearr_11378 = state_11350;
                                                    statearr_11378[15] = inst_11305;
                                                    statearr_11378[17] = inst_11304;
                                                    statearr_11378[10] = inst_11302__$1;
                                                    return statearr_11378;
                                                  }();
                                                  return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_11350__$1, 10, inst_11303);
                                                } else {
                                                  if (state_val_11351 === 5) {
                                                    var inst_11294 = state_11350[7];
                                                    var inst_11297 = cljs.core.seq_QMARK_.call(null, inst_11294);
                                                    var state_11350__$1 = state_11350;
                                                    if (inst_11297) {
                                                      var statearr_11379_11419 = state_11350__$1;
                                                      statearr_11379_11419[1] = 7;
                                                    } else {
                                                      var statearr_11380_11420 = state_11350__$1;
                                                      statearr_11380_11420[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11351 === 14) {
                                                      var inst_11310 = state_11350[16];
                                                      var inst_11317 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_11310);
                                                      var state_11350__$1 = state_11350;
                                                      var statearr_11381_11421 = state_11350__$1;
                                                      statearr_11381_11421[2] = inst_11317;
                                                      statearr_11381_11421[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11351 === 26) {
                                                        var inst_11340 = state_11350[2];
                                                        var state_11350__$1 = state_11350;
                                                        var statearr_11382_11422 = state_11350__$1;
                                                        statearr_11382_11422[2] = inst_11340;
                                                        statearr_11382_11422[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11351 === 16) {
                                                          var inst_11320 = state_11350[2];
                                                          var inst_11321 = calc_state.call(null);
                                                          var inst_11294 = inst_11321;
                                                          var state_11350__$1 = function() {
                                                            var statearr_11383 = state_11350;
                                                            statearr_11383[18] = inst_11320;
                                                            statearr_11383[7] = inst_11294;
                                                            return statearr_11383;
                                                          }();
                                                          var statearr_11384_11423 = state_11350__$1;
                                                          statearr_11384_11423[2] = null;
                                                          statearr_11384_11423[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11351 === 10) {
                                                            var inst_11309 = state_11350[8];
                                                            var inst_11310 = state_11350[16];
                                                            var inst_11308 = state_11350[2];
                                                            var inst_11309__$1 = cljs.core.nth.call(null, inst_11308, 0, null);
                                                            var inst_11310__$1 = cljs.core.nth.call(null, inst_11308, 1, null);
                                                            var inst_11311 = inst_11309__$1 == null;
                                                            var inst_11312 = cljs.core._EQ_.call(null, inst_11310__$1, change);
                                                            var inst_11313 = inst_11311 || inst_11312;
                                                            var state_11350__$1 = function() {
                                                              var statearr_11385 = state_11350;
                                                              statearr_11385[8] = inst_11309__$1;
                                                              statearr_11385[16] = inst_11310__$1;
                                                              return statearr_11385;
                                                            }();
                                                            if (cljs.core.truth_(inst_11313)) {
                                                              var statearr_11386_11424 = state_11350__$1;
                                                              statearr_11386_11424[1] = 11;
                                                            } else {
                                                              var statearr_11387_11425 = state_11350__$1;
                                                              statearr_11387_11425[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11351 === 18) {
                                                              var inst_11305 = state_11350[15];
                                                              var inst_11304 = state_11350[17];
                                                              var inst_11310 = state_11350[16];
                                                              var inst_11327 = cljs.core.empty_QMARK_.call(null, inst_11305);
                                                              var inst_11328 = inst_11304.call(null, inst_11310);
                                                              var inst_11329 = cljs.core.not.call(null, inst_11328);
                                                              var inst_11330 = inst_11327 && inst_11329;
                                                              var state_11350__$1 = state_11350;
                                                              var statearr_11388_11426 = state_11350__$1;
                                                              statearr_11388_11426[2] = inst_11330;
                                                              statearr_11388_11426[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11351 === 8) {
                                                                var inst_11294 = state_11350[7];
                                                                var state_11350__$1 = state_11350;
                                                                var statearr_11389_11427 = state_11350__$1;
                                                                statearr_11389_11427[2] = inst_11294;
                                                                statearr_11389_11427[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__5693__auto__, c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__5694__auto__ = null;
            var state_machine__5694__auto____0 = function() {
              var statearr_11393 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11393[0] = state_machine__5694__auto__;
              statearr_11393[1] = 1;
              return statearr_11393;
            };
            var state_machine__5694__auto____1 = function(state_11350) {
              while (true) {
                var ret_value__5695__auto__ = function() {
                  try {
                    while (true) {
                      var result__5696__auto__ = switch__5693__auto__.call(null, state_11350);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5696__auto__;
                      }
                      break;
                    }
                  } catch (e11394) {
                    if (e11394 instanceof Object) {
                      var ex__5697__auto__ = e11394;
                      var statearr_11395_11428 = state_11350;
                      statearr_11395_11428[5] = ex__5697__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11350);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e11394;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11429 = state_11350;
                  state_11350 = G__11429;
                  continue;
                } else {
                  return ret_value__5695__auto__;
                }
                break;
              }
            };
            state_machine__5694__auto__ = function(state_11350) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5694__auto____0.call(this);
                case 1:
                  return state_machine__5694__auto____1.call(this, state_11350);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
            return state_machine__5694__auto__;
          }();
        }(switch__5693__auto__, c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__5710__auto__ = function() {
        var statearr_11396 = f__5709__auto__.call(null);
        statearr_11396[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___11397;
        return statearr_11396;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
    };
  }(c__5708__auto___11397, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj11431 = {};
  return obj11431;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3531__auto__ = p;
    if (and__3531__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4170__auto__ = p == null ? null : p;
    return function() {
      var or__3543__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3531__auto__ = p;
    if (and__3531__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3531__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4170__auto__ = p == null ? null : p;
    return function() {
      var or__3543__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4170__auto__)];
      if (or__3543__auto__) {
        return or__3543__auto__;
      } else {
        var or__3543__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3543__auto____$1) {
          return or__3543__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3531__auto__ = p;
      if (and__3531__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4170__auto__ = p == null ? null : p;
      return function() {
        var or__3543__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3531__auto__ = p;
      if (and__3531__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3531__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4170__auto__ = p == null ? null : p;
      return function() {
        var or__3543__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4170__auto__)];
        if (or__3543__auto__) {
          return or__3543__auto__;
        } else {
          var or__3543__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3543__auto____$1) {
            return or__3543__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3543__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3543__auto__)) {
          return or__3543__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3543__auto__, mults) {
            return function(p1__11432_SHARP_) {
              if (cljs.core.truth_(p1__11432_SHARP_.call(null, topic))) {
                return p1__11432_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__11432_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3543__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t11555 !== "undefined") {
      } else {
        cljs.core.async.t11555 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta11556) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta11556 = meta11556;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t11555.cljs$lang$type = true;
        cljs.core.async.t11555.cljs$lang$ctorStr = "cljs.core.async/t11555";
        cljs.core.async.t11555.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4110__auto__, writer__4111__auto__, opt__4112__auto__) {
            return cljs.core._write.call(null, writer__4111__auto__, "cljs.core.async/t11555");
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t11555.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4126__auto__)) {
              var m = temp__4126__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t11555.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_11557) {
            var self__ = this;
            var _11557__$1 = this;
            return self__.meta11556;
          };
        }(mults, ensure_mult);
        cljs.core.async.t11555.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_11557, meta11556__$1) {
            var self__ = this;
            var _11557__$1 = this;
            return new cljs.core.async.t11555(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta11556__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t11555 = function(mults, ensure_mult) {
          return function __GT_t11555(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11556) {
            return new cljs.core.async.t11555(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta11556);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t11555(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5708__auto___11677 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___11677, mults, ensure_mult, p) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___11677, mults, ensure_mult, p) {
            return function(state_11629) {
              var state_val_11630 = state_11629[1];
              if (state_val_11630 === 7) {
                var inst_11625 = state_11629[2];
                var state_11629__$1 = state_11629;
                var statearr_11631_11678 = state_11629__$1;
                statearr_11631_11678[2] = inst_11625;
                statearr_11631_11678[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11630 === 20) {
                  var state_11629__$1 = state_11629;
                  var statearr_11632_11679 = state_11629__$1;
                  statearr_11632_11679[2] = null;
                  statearr_11632_11679[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11630 === 1) {
                    var state_11629__$1 = state_11629;
                    var statearr_11633_11680 = state_11629__$1;
                    statearr_11633_11680[2] = null;
                    statearr_11633_11680[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11630 === 24) {
                      var inst_11608 = state_11629[7];
                      var inst_11617 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_11608);
                      var state_11629__$1 = state_11629;
                      var statearr_11634_11681 = state_11629__$1;
                      statearr_11634_11681[2] = inst_11617;
                      statearr_11634_11681[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11630 === 4) {
                        var inst_11560 = state_11629[8];
                        var inst_11560__$1 = state_11629[2];
                        var inst_11561 = inst_11560__$1 == null;
                        var state_11629__$1 = function() {
                          var statearr_11635 = state_11629;
                          statearr_11635[8] = inst_11560__$1;
                          return statearr_11635;
                        }();
                        if (cljs.core.truth_(inst_11561)) {
                          var statearr_11636_11682 = state_11629__$1;
                          statearr_11636_11682[1] = 5;
                        } else {
                          var statearr_11637_11683 = state_11629__$1;
                          statearr_11637_11683[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11630 === 15) {
                          var inst_11602 = state_11629[2];
                          var state_11629__$1 = state_11629;
                          var statearr_11638_11684 = state_11629__$1;
                          statearr_11638_11684[2] = inst_11602;
                          statearr_11638_11684[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11630 === 21) {
                            var inst_11622 = state_11629[2];
                            var state_11629__$1 = function() {
                              var statearr_11639 = state_11629;
                              statearr_11639[9] = inst_11622;
                              return statearr_11639;
                            }();
                            var statearr_11640_11685 = state_11629__$1;
                            statearr_11640_11685[2] = null;
                            statearr_11640_11685[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11630 === 13) {
                              var inst_11584 = state_11629[10];
                              var inst_11586 = cljs.core.chunked_seq_QMARK_.call(null, inst_11584);
                              var state_11629__$1 = state_11629;
                              if (inst_11586) {
                                var statearr_11641_11686 = state_11629__$1;
                                statearr_11641_11686[1] = 16;
                              } else {
                                var statearr_11642_11687 = state_11629__$1;
                                statearr_11642_11687[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11630 === 22) {
                                var inst_11614 = state_11629[2];
                                var state_11629__$1 = state_11629;
                                if (cljs.core.truth_(inst_11614)) {
                                  var statearr_11643_11688 = state_11629__$1;
                                  statearr_11643_11688[1] = 23;
                                } else {
                                  var statearr_11644_11689 = state_11629__$1;
                                  statearr_11644_11689[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11630 === 6) {
                                  var inst_11610 = state_11629[11];
                                  var inst_11560 = state_11629[8];
                                  var inst_11608 = state_11629[7];
                                  var inst_11608__$1 = topic_fn.call(null, inst_11560);
                                  var inst_11609 = cljs.core.deref.call(null, mults);
                                  var inst_11610__$1 = cljs.core.get.call(null, inst_11609, inst_11608__$1);
                                  var state_11629__$1 = function() {
                                    var statearr_11645 = state_11629;
                                    statearr_11645[11] = inst_11610__$1;
                                    statearr_11645[7] = inst_11608__$1;
                                    return statearr_11645;
                                  }();
                                  if (cljs.core.truth_(inst_11610__$1)) {
                                    var statearr_11646_11690 = state_11629__$1;
                                    statearr_11646_11690[1] = 19;
                                  } else {
                                    var statearr_11647_11691 = state_11629__$1;
                                    statearr_11647_11691[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11630 === 25) {
                                    var inst_11619 = state_11629[2];
                                    var state_11629__$1 = state_11629;
                                    var statearr_11648_11692 = state_11629__$1;
                                    statearr_11648_11692[2] = inst_11619;
                                    statearr_11648_11692[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11630 === 17) {
                                      var inst_11584 = state_11629[10];
                                      var inst_11593 = cljs.core.first.call(null, inst_11584);
                                      var inst_11594 = cljs.core.async.muxch_STAR_.call(null, inst_11593);
                                      var inst_11595 = cljs.core.async.close_BANG_.call(null, inst_11594);
                                      var inst_11596 = cljs.core.next.call(null, inst_11584);
                                      var inst_11570 = inst_11596;
                                      var inst_11571 = null;
                                      var inst_11572 = 0;
                                      var inst_11573 = 0;
                                      var state_11629__$1 = function() {
                                        var statearr_11649 = state_11629;
                                        statearr_11649[12] = inst_11572;
                                        statearr_11649[13] = inst_11571;
                                        statearr_11649[14] = inst_11595;
                                        statearr_11649[15] = inst_11570;
                                        statearr_11649[16] = inst_11573;
                                        return statearr_11649;
                                      }();
                                      var statearr_11650_11693 = state_11629__$1;
                                      statearr_11650_11693[2] = null;
                                      statearr_11650_11693[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11630 === 3) {
                                        var inst_11627 = state_11629[2];
                                        var state_11629__$1 = state_11629;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11629__$1, inst_11627);
                                      } else {
                                        if (state_val_11630 === 12) {
                                          var inst_11604 = state_11629[2];
                                          var state_11629__$1 = state_11629;
                                          var statearr_11651_11694 = state_11629__$1;
                                          statearr_11651_11694[2] = inst_11604;
                                          statearr_11651_11694[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11630 === 2) {
                                            var state_11629__$1 = state_11629;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11629__$1, 4, ch);
                                          } else {
                                            if (state_val_11630 === 23) {
                                              var state_11629__$1 = state_11629;
                                              var statearr_11652_11695 = state_11629__$1;
                                              statearr_11652_11695[2] = null;
                                              statearr_11652_11695[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11630 === 19) {
                                                var inst_11610 = state_11629[11];
                                                var inst_11560 = state_11629[8];
                                                var inst_11612 = cljs.core.async.muxch_STAR_.call(null, inst_11610);
                                                var state_11629__$1 = state_11629;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11629__$1, 22, inst_11612, inst_11560);
                                              } else {
                                                if (state_val_11630 === 11) {
                                                  var inst_11584 = state_11629[10];
                                                  var inst_11570 = state_11629[15];
                                                  var inst_11584__$1 = cljs.core.seq.call(null, inst_11570);
                                                  var state_11629__$1 = function() {
                                                    var statearr_11653 = state_11629;
                                                    statearr_11653[10] = inst_11584__$1;
                                                    return statearr_11653;
                                                  }();
                                                  if (inst_11584__$1) {
                                                    var statearr_11654_11696 = state_11629__$1;
                                                    statearr_11654_11696[1] = 13;
                                                  } else {
                                                    var statearr_11655_11697 = state_11629__$1;
                                                    statearr_11655_11697[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11630 === 9) {
                                                    var inst_11606 = state_11629[2];
                                                    var state_11629__$1 = state_11629;
                                                    var statearr_11656_11698 = state_11629__$1;
                                                    statearr_11656_11698[2] = inst_11606;
                                                    statearr_11656_11698[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11630 === 5) {
                                                      var inst_11567 = cljs.core.deref.call(null, mults);
                                                      var inst_11568 = cljs.core.vals.call(null, inst_11567);
                                                      var inst_11569 = cljs.core.seq.call(null, inst_11568);
                                                      var inst_11570 = inst_11569;
                                                      var inst_11571 = null;
                                                      var inst_11572 = 0;
                                                      var inst_11573 = 0;
                                                      var state_11629__$1 = function() {
                                                        var statearr_11657 = state_11629;
                                                        statearr_11657[12] = inst_11572;
                                                        statearr_11657[13] = inst_11571;
                                                        statearr_11657[15] = inst_11570;
                                                        statearr_11657[16] = inst_11573;
                                                        return statearr_11657;
                                                      }();
                                                      var statearr_11658_11699 = state_11629__$1;
                                                      statearr_11658_11699[2] = null;
                                                      statearr_11658_11699[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_11630 === 14) {
                                                        var state_11629__$1 = state_11629;
                                                        var statearr_11662_11700 = state_11629__$1;
                                                        statearr_11662_11700[2] = null;
                                                        statearr_11662_11700[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_11630 === 16) {
                                                          var inst_11584 = state_11629[10];
                                                          var inst_11588 = cljs.core.chunk_first.call(null, inst_11584);
                                                          var inst_11589 = cljs.core.chunk_rest.call(null, inst_11584);
                                                          var inst_11590 = cljs.core.count.call(null, inst_11588);
                                                          var inst_11570 = inst_11589;
                                                          var inst_11571 = inst_11588;
                                                          var inst_11572 = inst_11590;
                                                          var inst_11573 = 0;
                                                          var state_11629__$1 = function() {
                                                            var statearr_11663 = state_11629;
                                                            statearr_11663[12] = inst_11572;
                                                            statearr_11663[13] = inst_11571;
                                                            statearr_11663[15] = inst_11570;
                                                            statearr_11663[16] = inst_11573;
                                                            return statearr_11663;
                                                          }();
                                                          var statearr_11664_11701 = state_11629__$1;
                                                          statearr_11664_11701[2] = null;
                                                          statearr_11664_11701[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_11630 === 10) {
                                                            var inst_11572 = state_11629[12];
                                                            var inst_11571 = state_11629[13];
                                                            var inst_11570 = state_11629[15];
                                                            var inst_11573 = state_11629[16];
                                                            var inst_11578 = cljs.core._nth.call(null, inst_11571, inst_11573);
                                                            var inst_11579 = cljs.core.async.muxch_STAR_.call(null, inst_11578);
                                                            var inst_11580 = cljs.core.async.close_BANG_.call(null, inst_11579);
                                                            var inst_11581 = inst_11573 + 1;
                                                            var tmp11659 = inst_11572;
                                                            var tmp11660 = inst_11571;
                                                            var tmp11661 = inst_11570;
                                                            var inst_11570__$1 = tmp11661;
                                                            var inst_11571__$1 = tmp11660;
                                                            var inst_11572__$1 = tmp11659;
                                                            var inst_11573__$1 = inst_11581;
                                                            var state_11629__$1 = function() {
                                                              var statearr_11665 = state_11629;
                                                              statearr_11665[17] = inst_11580;
                                                              statearr_11665[12] = inst_11572__$1;
                                                              statearr_11665[13] = inst_11571__$1;
                                                              statearr_11665[15] = inst_11570__$1;
                                                              statearr_11665[16] = inst_11573__$1;
                                                              return statearr_11665;
                                                            }();
                                                            var statearr_11666_11702 = state_11629__$1;
                                                            statearr_11666_11702[2] = null;
                                                            statearr_11666_11702[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_11630 === 18) {
                                                              var inst_11599 = state_11629[2];
                                                              var state_11629__$1 = state_11629;
                                                              var statearr_11667_11703 = state_11629__$1;
                                                              statearr_11667_11703[2] = inst_11599;
                                                              statearr_11667_11703[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_11630 === 8) {
                                                                var inst_11572 = state_11629[12];
                                                                var inst_11573 = state_11629[16];
                                                                var inst_11575 = inst_11573 < inst_11572;
                                                                var inst_11576 = inst_11575;
                                                                var state_11629__$1 = state_11629;
                                                                if (cljs.core.truth_(inst_11576)) {
                                                                  var statearr_11668_11704 = state_11629__$1;
                                                                  statearr_11668_11704[1] = 10;
                                                                } else {
                                                                  var statearr_11669_11705 = state_11629__$1;
                                                                  statearr_11669_11705[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___11677, mults, ensure_mult, p);
          return function(switch__5693__auto__, c__5708__auto___11677, mults, ensure_mult, p) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_11673 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_11673[0] = state_machine__5694__auto__;
                statearr_11673[1] = 1;
                return statearr_11673;
              };
              var state_machine__5694__auto____1 = function(state_11629) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_11629);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e11674) {
                      if (e11674 instanceof Object) {
                        var ex__5697__auto__ = e11674;
                        var statearr_11675_11706 = state_11629;
                        statearr_11675_11706[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11629);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e11674;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11707 = state_11629;
                    state_11629 = G__11707;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_11629) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_11629);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___11677, mults, ensure_mult, p);
        }();
        var state__5710__auto__ = function() {
          var statearr_11676 = f__5709__auto__.call(null);
          statearr_11676[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___11677;
          return statearr_11676;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___11677, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5708__auto___11844 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_11814) {
              var state_val_11815 = state_11814[1];
              if (state_val_11815 === 7) {
                var state_11814__$1 = state_11814;
                var statearr_11816_11845 = state_11814__$1;
                statearr_11816_11845[2] = null;
                statearr_11816_11845[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11815 === 1) {
                  var state_11814__$1 = state_11814;
                  var statearr_11817_11846 = state_11814__$1;
                  statearr_11817_11846[2] = null;
                  statearr_11817_11846[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11815 === 4) {
                    var inst_11778 = state_11814[7];
                    var inst_11780 = inst_11778 < cnt;
                    var state_11814__$1 = state_11814;
                    if (cljs.core.truth_(inst_11780)) {
                      var statearr_11818_11847 = state_11814__$1;
                      statearr_11818_11847[1] = 6;
                    } else {
                      var statearr_11819_11848 = state_11814__$1;
                      statearr_11819_11848[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11815 === 15) {
                      var inst_11810 = state_11814[2];
                      var state_11814__$1 = state_11814;
                      var statearr_11820_11849 = state_11814__$1;
                      statearr_11820_11849[2] = inst_11810;
                      statearr_11820_11849[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11815 === 13) {
                        var inst_11803 = cljs.core.async.close_BANG_.call(null, out);
                        var state_11814__$1 = state_11814;
                        var statearr_11821_11850 = state_11814__$1;
                        statearr_11821_11850[2] = inst_11803;
                        statearr_11821_11850[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11815 === 6) {
                          var state_11814__$1 = state_11814;
                          var statearr_11822_11851 = state_11814__$1;
                          statearr_11822_11851[2] = null;
                          statearr_11822_11851[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11815 === 3) {
                            var inst_11812 = state_11814[2];
                            var state_11814__$1 = state_11814;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11814__$1, inst_11812);
                          } else {
                            if (state_val_11815 === 12) {
                              var inst_11800 = state_11814[8];
                              var inst_11800__$1 = state_11814[2];
                              var inst_11801 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_11800__$1);
                              var state_11814__$1 = function() {
                                var statearr_11823 = state_11814;
                                statearr_11823[8] = inst_11800__$1;
                                return statearr_11823;
                              }();
                              if (cljs.core.truth_(inst_11801)) {
                                var statearr_11824_11852 = state_11814__$1;
                                statearr_11824_11852[1] = 13;
                              } else {
                                var statearr_11825_11853 = state_11814__$1;
                                statearr_11825_11853[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11815 === 2) {
                                var inst_11777 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_11778 = 0;
                                var state_11814__$1 = function() {
                                  var statearr_11826 = state_11814;
                                  statearr_11826[9] = inst_11777;
                                  statearr_11826[7] = inst_11778;
                                  return statearr_11826;
                                }();
                                var statearr_11827_11854 = state_11814__$1;
                                statearr_11827_11854[2] = null;
                                statearr_11827_11854[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11815 === 11) {
                                  var inst_11778 = state_11814[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_11814, 10, Object, null, 9);
                                  var inst_11787 = chs__$1.call(null, inst_11778);
                                  var inst_11788 = done.call(null, inst_11778);
                                  var inst_11789 = cljs.core.async.take_BANG_.call(null, inst_11787, inst_11788);
                                  var state_11814__$1 = state_11814;
                                  var statearr_11828_11855 = state_11814__$1;
                                  statearr_11828_11855[2] = inst_11789;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11814__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11815 === 9) {
                                    var inst_11778 = state_11814[7];
                                    var inst_11791 = state_11814[2];
                                    var inst_11792 = inst_11778 + 1;
                                    var inst_11778__$1 = inst_11792;
                                    var state_11814__$1 = function() {
                                      var statearr_11829 = state_11814;
                                      statearr_11829[10] = inst_11791;
                                      statearr_11829[7] = inst_11778__$1;
                                      return statearr_11829;
                                    }();
                                    var statearr_11830_11856 = state_11814__$1;
                                    statearr_11830_11856[2] = null;
                                    statearr_11830_11856[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11815 === 5) {
                                      var inst_11798 = state_11814[2];
                                      var state_11814__$1 = function() {
                                        var statearr_11831 = state_11814;
                                        statearr_11831[11] = inst_11798;
                                        return statearr_11831;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11814__$1, 12, dchan);
                                    } else {
                                      if (state_val_11815 === 14) {
                                        var inst_11800 = state_11814[8];
                                        var inst_11805 = cljs.core.apply.call(null, f, inst_11800);
                                        var state_11814__$1 = state_11814;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11814__$1, 16, out, inst_11805);
                                      } else {
                                        if (state_val_11815 === 16) {
                                          var inst_11807 = state_11814[2];
                                          var state_11814__$1 = function() {
                                            var statearr_11832 = state_11814;
                                            statearr_11832[12] = inst_11807;
                                            return statearr_11832;
                                          }();
                                          var statearr_11833_11857 = state_11814__$1;
                                          statearr_11833_11857[2] = null;
                                          statearr_11833_11857[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11815 === 10) {
                                            var inst_11782 = state_11814[2];
                                            var inst_11783 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_11814__$1 = function() {
                                              var statearr_11834 = state_11814;
                                              statearr_11834[13] = inst_11782;
                                              return statearr_11834;
                                            }();
                                            var statearr_11835_11858 = state_11814__$1;
                                            statearr_11835_11858[2] = inst_11783;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11814__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11815 === 8) {
                                              var inst_11796 = state_11814[2];
                                              var state_11814__$1 = state_11814;
                                              var statearr_11836_11859 = state_11814__$1;
                                              statearr_11836_11859[2] = inst_11796;
                                              statearr_11836_11859[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__5693__auto__, c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_11840 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_11840[0] = state_machine__5694__auto__;
                statearr_11840[1] = 1;
                return statearr_11840;
              };
              var state_machine__5694__auto____1 = function(state_11814) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_11814);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e11841) {
                      if (e11841 instanceof Object) {
                        var ex__5697__auto__ = e11841;
                        var statearr_11842_11860 = state_11814;
                        statearr_11842_11860[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11814);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e11841;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11861 = state_11814;
                    state_11814 = G__11861;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_11814) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_11814);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__5710__auto__ = function() {
          var statearr_11843 = f__5709__auto__.call(null);
          statearr_11843[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___11844;
          return statearr_11843;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___11844, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___11969 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___11969, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___11969, out) {
            return function(state_11945) {
              var state_val_11946 = state_11945[1];
              if (state_val_11946 === 7) {
                var inst_11925 = state_11945[7];
                var inst_11924 = state_11945[8];
                var inst_11924__$1 = state_11945[2];
                var inst_11925__$1 = cljs.core.nth.call(null, inst_11924__$1, 0, null);
                var inst_11926 = cljs.core.nth.call(null, inst_11924__$1, 1, null);
                var inst_11927 = inst_11925__$1 == null;
                var state_11945__$1 = function() {
                  var statearr_11947 = state_11945;
                  statearr_11947[9] = inst_11926;
                  statearr_11947[7] = inst_11925__$1;
                  statearr_11947[8] = inst_11924__$1;
                  return statearr_11947;
                }();
                if (cljs.core.truth_(inst_11927)) {
                  var statearr_11948_11970 = state_11945__$1;
                  statearr_11948_11970[1] = 8;
                } else {
                  var statearr_11949_11971 = state_11945__$1;
                  statearr_11949_11971[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11946 === 1) {
                  var inst_11916 = cljs.core.vec.call(null, chs);
                  var inst_11917 = inst_11916;
                  var state_11945__$1 = function() {
                    var statearr_11950 = state_11945;
                    statearr_11950[10] = inst_11917;
                    return statearr_11950;
                  }();
                  var statearr_11951_11972 = state_11945__$1;
                  statearr_11951_11972[2] = null;
                  statearr_11951_11972[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11946 === 4) {
                    var inst_11917 = state_11945[10];
                    var state_11945__$1 = state_11945;
                    return cljs.core.async.impl.ioc_helpers.ioc_alts_BANG_.call(null, state_11945__$1, 7, inst_11917);
                  } else {
                    if (state_val_11946 === 6) {
                      var inst_11941 = state_11945[2];
                      var state_11945__$1 = state_11945;
                      var statearr_11952_11973 = state_11945__$1;
                      statearr_11952_11973[2] = inst_11941;
                      statearr_11952_11973[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11946 === 3) {
                        var inst_11943 = state_11945[2];
                        var state_11945__$1 = state_11945;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11945__$1, inst_11943);
                      } else {
                        if (state_val_11946 === 2) {
                          var inst_11917 = state_11945[10];
                          var inst_11919 = cljs.core.count.call(null, inst_11917);
                          var inst_11920 = inst_11919 > 0;
                          var state_11945__$1 = state_11945;
                          if (cljs.core.truth_(inst_11920)) {
                            var statearr_11954_11974 = state_11945__$1;
                            statearr_11954_11974[1] = 4;
                          } else {
                            var statearr_11955_11975 = state_11945__$1;
                            statearr_11955_11975[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11946 === 11) {
                            var inst_11917 = state_11945[10];
                            var inst_11934 = state_11945[2];
                            var tmp11953 = inst_11917;
                            var inst_11917__$1 = tmp11953;
                            var state_11945__$1 = function() {
                              var statearr_11956 = state_11945;
                              statearr_11956[11] = inst_11934;
                              statearr_11956[10] = inst_11917__$1;
                              return statearr_11956;
                            }();
                            var statearr_11957_11976 = state_11945__$1;
                            statearr_11957_11976[2] = null;
                            statearr_11957_11976[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11946 === 9) {
                              var inst_11925 = state_11945[7];
                              var state_11945__$1 = state_11945;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11945__$1, 11, out, inst_11925);
                            } else {
                              if (state_val_11946 === 5) {
                                var inst_11939 = cljs.core.async.close_BANG_.call(null, out);
                                var state_11945__$1 = state_11945;
                                var statearr_11958_11977 = state_11945__$1;
                                statearr_11958_11977[2] = inst_11939;
                                statearr_11958_11977[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11946 === 10) {
                                  var inst_11937 = state_11945[2];
                                  var state_11945__$1 = state_11945;
                                  var statearr_11959_11978 = state_11945__$1;
                                  statearr_11959_11978[2] = inst_11937;
                                  statearr_11959_11978[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11946 === 8) {
                                    var inst_11917 = state_11945[10];
                                    var inst_11926 = state_11945[9];
                                    var inst_11925 = state_11945[7];
                                    var inst_11924 = state_11945[8];
                                    var inst_11929 = function() {
                                      var c = inst_11926;
                                      var v = inst_11925;
                                      var vec__11922 = inst_11924;
                                      var cs = inst_11917;
                                      return function(c, v, vec__11922, cs, inst_11917, inst_11926, inst_11925, inst_11924, state_val_11946, c__5708__auto___11969, out) {
                                        return function(p1__11862_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__11862_SHARP_);
                                        };
                                      }(c, v, vec__11922, cs, inst_11917, inst_11926, inst_11925, inst_11924, state_val_11946, c__5708__auto___11969, out);
                                    }();
                                    var inst_11930 = cljs.core.filterv.call(null, inst_11929, inst_11917);
                                    var inst_11917__$1 = inst_11930;
                                    var state_11945__$1 = function() {
                                      var statearr_11960 = state_11945;
                                      statearr_11960[10] = inst_11917__$1;
                                      return statearr_11960;
                                    }();
                                    var statearr_11961_11979 = state_11945__$1;
                                    statearr_11961_11979[2] = null;
                                    statearr_11961_11979[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___11969, out);
          return function(switch__5693__auto__, c__5708__auto___11969, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_11965 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_11965[0] = state_machine__5694__auto__;
                statearr_11965[1] = 1;
                return statearr_11965;
              };
              var state_machine__5694__auto____1 = function(state_11945) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_11945);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e11966) {
                      if (e11966 instanceof Object) {
                        var ex__5697__auto__ = e11966;
                        var statearr_11967_11980 = state_11945;
                        statearr_11967_11980[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11945);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e11966;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__11981 = state_11945;
                    state_11945 = G__11981;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_11945) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_11945);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___11969, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_11968 = f__5709__auto__.call(null);
          statearr_11968[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___11969;
          return statearr_11968;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___11969, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___12074 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___12074, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___12074, out) {
            return function(state_12051) {
              var state_val_12052 = state_12051[1];
              if (state_val_12052 === 7) {
                var inst_12033 = state_12051[7];
                var inst_12033__$1 = state_12051[2];
                var inst_12034 = inst_12033__$1 == null;
                var inst_12035 = cljs.core.not.call(null, inst_12034);
                var state_12051__$1 = function() {
                  var statearr_12053 = state_12051;
                  statearr_12053[7] = inst_12033__$1;
                  return statearr_12053;
                }();
                if (inst_12035) {
                  var statearr_12054_12075 = state_12051__$1;
                  statearr_12054_12075[1] = 8;
                } else {
                  var statearr_12055_12076 = state_12051__$1;
                  statearr_12055_12076[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12052 === 1) {
                  var inst_12028 = 0;
                  var state_12051__$1 = function() {
                    var statearr_12056 = state_12051;
                    statearr_12056[8] = inst_12028;
                    return statearr_12056;
                  }();
                  var statearr_12057_12077 = state_12051__$1;
                  statearr_12057_12077[2] = null;
                  statearr_12057_12077[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12052 === 4) {
                    var state_12051__$1 = state_12051;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12051__$1, 7, ch);
                  } else {
                    if (state_val_12052 === 6) {
                      var inst_12046 = state_12051[2];
                      var state_12051__$1 = state_12051;
                      var statearr_12058_12078 = state_12051__$1;
                      statearr_12058_12078[2] = inst_12046;
                      statearr_12058_12078[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12052 === 3) {
                        var inst_12048 = state_12051[2];
                        var inst_12049 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12051__$1 = function() {
                          var statearr_12059 = state_12051;
                          statearr_12059[9] = inst_12048;
                          return statearr_12059;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12051__$1, inst_12049);
                      } else {
                        if (state_val_12052 === 2) {
                          var inst_12028 = state_12051[8];
                          var inst_12030 = inst_12028 < n;
                          var state_12051__$1 = state_12051;
                          if (cljs.core.truth_(inst_12030)) {
                            var statearr_12060_12079 = state_12051__$1;
                            statearr_12060_12079[1] = 4;
                          } else {
                            var statearr_12061_12080 = state_12051__$1;
                            statearr_12061_12080[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12052 === 11) {
                            var inst_12028 = state_12051[8];
                            var inst_12038 = state_12051[2];
                            var inst_12039 = inst_12028 + 1;
                            var inst_12028__$1 = inst_12039;
                            var state_12051__$1 = function() {
                              var statearr_12062 = state_12051;
                              statearr_12062[10] = inst_12038;
                              statearr_12062[8] = inst_12028__$1;
                              return statearr_12062;
                            }();
                            var statearr_12063_12081 = state_12051__$1;
                            statearr_12063_12081[2] = null;
                            statearr_12063_12081[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12052 === 9) {
                              var state_12051__$1 = state_12051;
                              var statearr_12064_12082 = state_12051__$1;
                              statearr_12064_12082[2] = null;
                              statearr_12064_12082[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12052 === 5) {
                                var state_12051__$1 = state_12051;
                                var statearr_12065_12083 = state_12051__$1;
                                statearr_12065_12083[2] = null;
                                statearr_12065_12083[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12052 === 10) {
                                  var inst_12043 = state_12051[2];
                                  var state_12051__$1 = state_12051;
                                  var statearr_12066_12084 = state_12051__$1;
                                  statearr_12066_12084[2] = inst_12043;
                                  statearr_12066_12084[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12052 === 8) {
                                    var inst_12033 = state_12051[7];
                                    var state_12051__$1 = state_12051;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12051__$1, 11, out, inst_12033);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___12074, out);
          return function(switch__5693__auto__, c__5708__auto___12074, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_12070 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12070[0] = state_machine__5694__auto__;
                statearr_12070[1] = 1;
                return statearr_12070;
              };
              var state_machine__5694__auto____1 = function(state_12051) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_12051);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e12071) {
                      if (e12071 instanceof Object) {
                        var ex__5697__auto__ = e12071;
                        var statearr_12072_12085 = state_12051;
                        statearr_12072_12085[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12051);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e12071;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12086 = state_12051;
                    state_12051 = G__12086;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_12051) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_12051);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___12074, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_12073 = f__5709__auto__.call(null);
          statearr_12073[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___12074;
          return statearr_12073;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___12074, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___12183 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___12183, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___12183, out) {
            return function(state_12158) {
              var state_val_12159 = state_12158[1];
              if (state_val_12159 === 7) {
                var inst_12153 = state_12158[2];
                var state_12158__$1 = state_12158;
                var statearr_12160_12184 = state_12158__$1;
                statearr_12160_12184[2] = inst_12153;
                statearr_12160_12184[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12159 === 1) {
                  var inst_12135 = null;
                  var state_12158__$1 = function() {
                    var statearr_12161 = state_12158;
                    statearr_12161[7] = inst_12135;
                    return statearr_12161;
                  }();
                  var statearr_12162_12185 = state_12158__$1;
                  statearr_12162_12185[2] = null;
                  statearr_12162_12185[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12159 === 4) {
                    var inst_12138 = state_12158[8];
                    var inst_12138__$1 = state_12158[2];
                    var inst_12139 = inst_12138__$1 == null;
                    var inst_12140 = cljs.core.not.call(null, inst_12139);
                    var state_12158__$1 = function() {
                      var statearr_12163 = state_12158;
                      statearr_12163[8] = inst_12138__$1;
                      return statearr_12163;
                    }();
                    if (inst_12140) {
                      var statearr_12164_12186 = state_12158__$1;
                      statearr_12164_12186[1] = 5;
                    } else {
                      var statearr_12165_12187 = state_12158__$1;
                      statearr_12165_12187[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12159 === 6) {
                      var state_12158__$1 = state_12158;
                      var statearr_12166_12188 = state_12158__$1;
                      statearr_12166_12188[2] = null;
                      statearr_12166_12188[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12159 === 3) {
                        var inst_12155 = state_12158[2];
                        var inst_12156 = cljs.core.async.close_BANG_.call(null, out);
                        var state_12158__$1 = function() {
                          var statearr_12167 = state_12158;
                          statearr_12167[9] = inst_12155;
                          return statearr_12167;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12158__$1, inst_12156);
                      } else {
                        if (state_val_12159 === 2) {
                          var state_12158__$1 = state_12158;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12158__$1, 4, ch);
                        } else {
                          if (state_val_12159 === 11) {
                            var inst_12138 = state_12158[8];
                            var inst_12147 = state_12158[2];
                            var inst_12135 = inst_12138;
                            var state_12158__$1 = function() {
                              var statearr_12168 = state_12158;
                              statearr_12168[10] = inst_12147;
                              statearr_12168[7] = inst_12135;
                              return statearr_12168;
                            }();
                            var statearr_12169_12189 = state_12158__$1;
                            statearr_12169_12189[2] = null;
                            statearr_12169_12189[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12159 === 9) {
                              var inst_12138 = state_12158[8];
                              var state_12158__$1 = state_12158;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12158__$1, 11, out, inst_12138);
                            } else {
                              if (state_val_12159 === 5) {
                                var inst_12138 = state_12158[8];
                                var inst_12135 = state_12158[7];
                                var inst_12142 = cljs.core._EQ_.call(null, inst_12138, inst_12135);
                                var state_12158__$1 = state_12158;
                                if (inst_12142) {
                                  var statearr_12171_12190 = state_12158__$1;
                                  statearr_12171_12190[1] = 8;
                                } else {
                                  var statearr_12172_12191 = state_12158__$1;
                                  statearr_12172_12191[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12159 === 10) {
                                  var inst_12150 = state_12158[2];
                                  var state_12158__$1 = state_12158;
                                  var statearr_12173_12192 = state_12158__$1;
                                  statearr_12173_12192[2] = inst_12150;
                                  statearr_12173_12192[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12159 === 8) {
                                    var inst_12135 = state_12158[7];
                                    var tmp12170 = inst_12135;
                                    var inst_12135__$1 = tmp12170;
                                    var state_12158__$1 = function() {
                                      var statearr_12174 = state_12158;
                                      statearr_12174[7] = inst_12135__$1;
                                      return statearr_12174;
                                    }();
                                    var statearr_12175_12193 = state_12158__$1;
                                    statearr_12175_12193[2] = null;
                                    statearr_12175_12193[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___12183, out);
          return function(switch__5693__auto__, c__5708__auto___12183, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_12179 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_12179[0] = state_machine__5694__auto__;
                statearr_12179[1] = 1;
                return statearr_12179;
              };
              var state_machine__5694__auto____1 = function(state_12158) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_12158);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e12180) {
                      if (e12180 instanceof Object) {
                        var ex__5697__auto__ = e12180;
                        var statearr_12181_12194 = state_12158;
                        statearr_12181_12194[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12158);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e12180;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12195 = state_12158;
                    state_12158 = G__12195;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_12158) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_12158);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___12183, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_12182 = f__5709__auto__.call(null);
          statearr_12182[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___12183;
          return statearr_12182;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___12183, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___12330 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___12330, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___12330, out) {
            return function(state_12300) {
              var state_val_12301 = state_12300[1];
              if (state_val_12301 === 7) {
                var inst_12296 = state_12300[2];
                var state_12300__$1 = state_12300;
                var statearr_12302_12331 = state_12300__$1;
                statearr_12302_12331[2] = inst_12296;
                statearr_12302_12331[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12301 === 1) {
                  var inst_12263 = new Array(n);
                  var inst_12264 = inst_12263;
                  var inst_12265 = 0;
                  var state_12300__$1 = function() {
                    var statearr_12303 = state_12300;
                    statearr_12303[7] = inst_12264;
                    statearr_12303[8] = inst_12265;
                    return statearr_12303;
                  }();
                  var statearr_12304_12332 = state_12300__$1;
                  statearr_12304_12332[2] = null;
                  statearr_12304_12332[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12301 === 4) {
                    var inst_12268 = state_12300[9];
                    var inst_12268__$1 = state_12300[2];
                    var inst_12269 = inst_12268__$1 == null;
                    var inst_12270 = cljs.core.not.call(null, inst_12269);
                    var state_12300__$1 = function() {
                      var statearr_12305 = state_12300;
                      statearr_12305[9] = inst_12268__$1;
                      return statearr_12305;
                    }();
                    if (inst_12270) {
                      var statearr_12306_12333 = state_12300__$1;
                      statearr_12306_12333[1] = 5;
                    } else {
                      var statearr_12307_12334 = state_12300__$1;
                      statearr_12307_12334[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12301 === 15) {
                      var inst_12290 = state_12300[2];
                      var state_12300__$1 = state_12300;
                      var statearr_12308_12335 = state_12300__$1;
                      statearr_12308_12335[2] = inst_12290;
                      statearr_12308_12335[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12301 === 13) {
                        var state_12300__$1 = state_12300;
                        var statearr_12309_12336 = state_12300__$1;
                        statearr_12309_12336[2] = null;
                        statearr_12309_12336[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12301 === 6) {
                          var inst_12265 = state_12300[8];
                          var inst_12286 = inst_12265 > 0;
                          var state_12300__$1 = state_12300;
                          if (cljs.core.truth_(inst_12286)) {
                            var statearr_12310_12337 = state_12300__$1;
                            statearr_12310_12337[1] = 12;
                          } else {
                            var statearr_12311_12338 = state_12300__$1;
                            statearr_12311_12338[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12301 === 3) {
                            var inst_12298 = state_12300[2];
                            var state_12300__$1 = state_12300;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12300__$1, inst_12298);
                          } else {
                            if (state_val_12301 === 12) {
                              var inst_12264 = state_12300[7];
                              var inst_12288 = cljs.core.vec.call(null, inst_12264);
                              var state_12300__$1 = state_12300;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12300__$1, 15, out, inst_12288);
                            } else {
                              if (state_val_12301 === 2) {
                                var state_12300__$1 = state_12300;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12300__$1, 4, ch);
                              } else {
                                if (state_val_12301 === 11) {
                                  var inst_12280 = state_12300[2];
                                  var inst_12281 = new Array(n);
                                  var inst_12264 = inst_12281;
                                  var inst_12265 = 0;
                                  var state_12300__$1 = function() {
                                    var statearr_12312 = state_12300;
                                    statearr_12312[7] = inst_12264;
                                    statearr_12312[8] = inst_12265;
                                    statearr_12312[10] = inst_12280;
                                    return statearr_12312;
                                  }();
                                  var statearr_12313_12339 = state_12300__$1;
                                  statearr_12313_12339[2] = null;
                                  statearr_12313_12339[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12301 === 9) {
                                    var inst_12264 = state_12300[7];
                                    var inst_12278 = cljs.core.vec.call(null, inst_12264);
                                    var state_12300__$1 = state_12300;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12300__$1, 11, out, inst_12278);
                                  } else {
                                    if (state_val_12301 === 5) {
                                      var inst_12264 = state_12300[7];
                                      var inst_12268 = state_12300[9];
                                      var inst_12273 = state_12300[11];
                                      var inst_12265 = state_12300[8];
                                      var inst_12272 = inst_12264[inst_12265] = inst_12268;
                                      var inst_12273__$1 = inst_12265 + 1;
                                      var inst_12274 = inst_12273__$1 < n;
                                      var state_12300__$1 = function() {
                                        var statearr_12314 = state_12300;
                                        statearr_12314[11] = inst_12273__$1;
                                        statearr_12314[12] = inst_12272;
                                        return statearr_12314;
                                      }();
                                      if (cljs.core.truth_(inst_12274)) {
                                        var statearr_12315_12340 = state_12300__$1;
                                        statearr_12315_12340[1] = 8;
                                      } else {
                                        var statearr_12316_12341 = state_12300__$1;
                                        statearr_12316_12341[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12301 === 14) {
                                        var inst_12293 = state_12300[2];
                                        var inst_12294 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_12300__$1 = function() {
                                          var statearr_12318 = state_12300;
                                          statearr_12318[13] = inst_12293;
                                          return statearr_12318;
                                        }();
                                        var statearr_12319_12342 = state_12300__$1;
                                        statearr_12319_12342[2] = inst_12294;
                                        statearr_12319_12342[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12301 === 10) {
                                          var inst_12284 = state_12300[2];
                                          var state_12300__$1 = state_12300;
                                          var statearr_12320_12343 = state_12300__$1;
                                          statearr_12320_12343[2] = inst_12284;
                                          statearr_12320_12343[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12301 === 8) {
                                            var inst_12264 = state_12300[7];
                                            var inst_12273 = state_12300[11];
                                            var tmp12317 = inst_12264;
                                            var inst_12264__$1 = tmp12317;
                                            var inst_12265 = inst_12273;
                                            var state_12300__$1 = function() {
                                              var statearr_12321 = state_12300;
                                              statearr_12321[7] = inst_12264__$1;
                                              statearr_12321[8] = inst_12265;
                                              return statearr_12321;
                                            }();
                                            var statearr_12322_12344 = state_12300__$1;
                                            statearr_12322_12344[2] = null;
                                            statearr_12322_12344[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___12330, out);
          return function(switch__5693__auto__, c__5708__auto___12330, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_12326 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12326[0] = state_machine__5694__auto__;
                statearr_12326[1] = 1;
                return statearr_12326;
              };
              var state_machine__5694__auto____1 = function(state_12300) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_12300);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e12327) {
                      if (e12327 instanceof Object) {
                        var ex__5697__auto__ = e12327;
                        var statearr_12328_12345 = state_12300;
                        statearr_12328_12345[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12300);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e12327;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12346 = state_12300;
                    state_12300 = G__12346;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_12300) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_12300);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___12330, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_12329 = f__5709__auto__.call(null);
          statearr_12329[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___12330;
          return statearr_12329;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___12330, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5708__auto___12489 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto___12489, out) {
      return function() {
        var f__5709__auto__ = function() {
          var switch__5693__auto__ = function(c__5708__auto___12489, out) {
            return function(state_12459) {
              var state_val_12460 = state_12459[1];
              if (state_val_12460 === 7) {
                var inst_12455 = state_12459[2];
                var state_12459__$1 = state_12459;
                var statearr_12461_12490 = state_12459__$1;
                statearr_12461_12490[2] = inst_12455;
                statearr_12461_12490[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12460 === 1) {
                  var inst_12418 = [];
                  var inst_12419 = inst_12418;
                  var inst_12420 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_12459__$1 = function() {
                    var statearr_12462 = state_12459;
                    statearr_12462[7] = inst_12419;
                    statearr_12462[8] = inst_12420;
                    return statearr_12462;
                  }();
                  var statearr_12463_12491 = state_12459__$1;
                  statearr_12463_12491[2] = null;
                  statearr_12463_12491[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12460 === 4) {
                    var inst_12423 = state_12459[9];
                    var inst_12423__$1 = state_12459[2];
                    var inst_12424 = inst_12423__$1 == null;
                    var inst_12425 = cljs.core.not.call(null, inst_12424);
                    var state_12459__$1 = function() {
                      var statearr_12464 = state_12459;
                      statearr_12464[9] = inst_12423__$1;
                      return statearr_12464;
                    }();
                    if (inst_12425) {
                      var statearr_12465_12492 = state_12459__$1;
                      statearr_12465_12492[1] = 5;
                    } else {
                      var statearr_12466_12493 = state_12459__$1;
                      statearr_12466_12493[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12460 === 15) {
                      var inst_12449 = state_12459[2];
                      var state_12459__$1 = state_12459;
                      var statearr_12467_12494 = state_12459__$1;
                      statearr_12467_12494[2] = inst_12449;
                      statearr_12467_12494[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12460 === 13) {
                        var state_12459__$1 = state_12459;
                        var statearr_12468_12495 = state_12459__$1;
                        statearr_12468_12495[2] = null;
                        statearr_12468_12495[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12460 === 6) {
                          var inst_12419 = state_12459[7];
                          var inst_12444 = inst_12419.length;
                          var inst_12445 = inst_12444 > 0;
                          var state_12459__$1 = state_12459;
                          if (cljs.core.truth_(inst_12445)) {
                            var statearr_12469_12496 = state_12459__$1;
                            statearr_12469_12496[1] = 12;
                          } else {
                            var statearr_12470_12497 = state_12459__$1;
                            statearr_12470_12497[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12460 === 3) {
                            var inst_12457 = state_12459[2];
                            var state_12459__$1 = state_12459;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12459__$1, inst_12457);
                          } else {
                            if (state_val_12460 === 12) {
                              var inst_12419 = state_12459[7];
                              var inst_12447 = cljs.core.vec.call(null, inst_12419);
                              var state_12459__$1 = state_12459;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12459__$1, 15, out, inst_12447);
                            } else {
                              if (state_val_12460 === 2) {
                                var state_12459__$1 = state_12459;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12459__$1, 4, ch);
                              } else {
                                if (state_val_12460 === 11) {
                                  var inst_12427 = state_12459[10];
                                  var inst_12423 = state_12459[9];
                                  var inst_12437 = state_12459[2];
                                  var inst_12438 = [];
                                  var inst_12439 = inst_12438.push(inst_12423);
                                  var inst_12419 = inst_12438;
                                  var inst_12420 = inst_12427;
                                  var state_12459__$1 = function() {
                                    var statearr_12471 = state_12459;
                                    statearr_12471[7] = inst_12419;
                                    statearr_12471[11] = inst_12437;
                                    statearr_12471[8] = inst_12420;
                                    statearr_12471[12] = inst_12439;
                                    return statearr_12471;
                                  }();
                                  var statearr_12472_12498 = state_12459__$1;
                                  statearr_12472_12498[2] = null;
                                  statearr_12472_12498[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12460 === 9) {
                                    var inst_12419 = state_12459[7];
                                    var inst_12435 = cljs.core.vec.call(null, inst_12419);
                                    var state_12459__$1 = state_12459;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12459__$1, 11, out, inst_12435);
                                  } else {
                                    if (state_val_12460 === 5) {
                                      var inst_12427 = state_12459[10];
                                      var inst_12423 = state_12459[9];
                                      var inst_12420 = state_12459[8];
                                      var inst_12427__$1 = f.call(null, inst_12423);
                                      var inst_12428 = cljs.core._EQ_.call(null, inst_12427__$1, inst_12420);
                                      var inst_12429 = cljs.core.keyword_identical_QMARK_.call(null, inst_12420, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_12430 = inst_12428 || inst_12429;
                                      var state_12459__$1 = function() {
                                        var statearr_12473 = state_12459;
                                        statearr_12473[10] = inst_12427__$1;
                                        return statearr_12473;
                                      }();
                                      if (cljs.core.truth_(inst_12430)) {
                                        var statearr_12474_12499 = state_12459__$1;
                                        statearr_12474_12499[1] = 8;
                                      } else {
                                        var statearr_12475_12500 = state_12459__$1;
                                        statearr_12475_12500[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12460 === 14) {
                                        var inst_12452 = state_12459[2];
                                        var inst_12453 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_12459__$1 = function() {
                                          var statearr_12477 = state_12459;
                                          statearr_12477[13] = inst_12452;
                                          return statearr_12477;
                                        }();
                                        var statearr_12478_12501 = state_12459__$1;
                                        statearr_12478_12501[2] = inst_12453;
                                        statearr_12478_12501[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12460 === 10) {
                                          var inst_12442 = state_12459[2];
                                          var state_12459__$1 = state_12459;
                                          var statearr_12479_12502 = state_12459__$1;
                                          statearr_12479_12502[2] = inst_12442;
                                          statearr_12479_12502[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12460 === 8) {
                                            var inst_12427 = state_12459[10];
                                            var inst_12419 = state_12459[7];
                                            var inst_12423 = state_12459[9];
                                            var inst_12432 = inst_12419.push(inst_12423);
                                            var tmp12476 = inst_12419;
                                            var inst_12419__$1 = tmp12476;
                                            var inst_12420 = inst_12427;
                                            var state_12459__$1 = function() {
                                              var statearr_12480 = state_12459;
                                              statearr_12480[7] = inst_12419__$1;
                                              statearr_12480[14] = inst_12432;
                                              statearr_12480[8] = inst_12420;
                                              return statearr_12480;
                                            }();
                                            var statearr_12481_12503 = state_12459__$1;
                                            statearr_12481_12503[2] = null;
                                            statearr_12481_12503[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5708__auto___12489, out);
          return function(switch__5693__auto__, c__5708__auto___12489, out) {
            return function() {
              var state_machine__5694__auto__ = null;
              var state_machine__5694__auto____0 = function() {
                var statearr_12485 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_12485[0] = state_machine__5694__auto__;
                statearr_12485[1] = 1;
                return statearr_12485;
              };
              var state_machine__5694__auto____1 = function(state_12459) {
                while (true) {
                  var ret_value__5695__auto__ = function() {
                    try {
                      while (true) {
                        var result__5696__auto__ = switch__5693__auto__.call(null, state_12459);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5696__auto__;
                        }
                        break;
                      }
                    } catch (e12486) {
                      if (e12486 instanceof Object) {
                        var ex__5697__auto__ = e12486;
                        var statearr_12487_12504 = state_12459;
                        statearr_12487_12504[5] = ex__5697__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12459);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                          throw e12486;
                        } else {
                          return null;
                        }
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__12505 = state_12459;
                    state_12459 = G__12505;
                    continue;
                  } else {
                    return ret_value__5695__auto__;
                  }
                  break;
                }
              };
              state_machine__5694__auto__ = function(state_12459) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5694__auto____0.call(this);
                  case 1:
                    return state_machine__5694__auto____1.call(this, state_12459);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
              state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
              return state_machine__5694__auto__;
            }();
          }(switch__5693__auto__, c__5708__auto___12489, out);
        }();
        var state__5710__auto__ = function() {
          var statearr_12488 = f__5709__auto__.call(null);
          statearr_12488[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto___12489;
          return statearr_12488;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
      };
    }(c__5708__auto___12489, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("roids.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
roids.core.width = 1024;
roids.core.height = 768;
roids.core.canvas = document.getElementById("roids");
roids.core.ctx = roids.core.canvas.getContext("2d");
roids.core.degree_max = 512;
roids.core.degree_mask = 511;
roids.core.cosm = cljs.core.memoize.call(null, function(deg) {
  return Math.cos.call(null, deg * 6.2831855 / roids.core.degree_max);
});
roids.core.cos = function() {
  var cos = null;
  var cos__1 = function(deg) {
    return cos.call(null, deg, 0);
  };
  var cos__2 = function(deg, r) {
    return roids.core.cosm.call(null, r + deg & roids.core.degree_mask);
  };
  cos = function(deg, r) {
    switch(arguments.length) {
      case 1:
        return cos__1.call(this, deg);
      case 2:
        return cos__2.call(this, deg, r);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  cos.cljs$core$IFn$_invoke$arity$1 = cos__1;
  cos.cljs$core$IFn$_invoke$arity$2 = cos__2;
  return cos;
}();
roids.core.sinm = cljs.core.memoize.call(null, function(deg) {
  return Math.sin.call(null, deg * 6.2831855 / roids.core.degree_max);
});
roids.core.sin = function() {
  var sin = null;
  var sin__1 = function(deg) {
    return sin.call(null, deg, 0);
  };
  var sin__2 = function(deg, r) {
    return roids.core.sinm.call(null, r + deg & roids.core.degree_mask);
  };
  sin = function(deg, r) {
    switch(arguments.length) {
      case 1:
        return sin__1.call(this, deg);
      case 2:
        return sin__2.call(this, deg, r);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sin.cljs$core$IFn$_invoke$arity$1 = sin__1;
  sin.cljs$core$IFn$_invoke$arity$2 = sin__2;
  return sin;
}();
roids.core.createroid = function createroid(sides, size, posx, posy, velocity, direction, rot) {
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "points", "points", -1486596883), function() {
    var iter__4268__auto__ = function iter__10780(s__10781) {
      return new cljs.core.LazySeq(null, function() {
        var s__10781__$1 = s__10781;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__10781__$1);
          if (temp__4126__auto__) {
            var s__10781__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10781__$2)) {
              var c__4266__auto__ = cljs.core.chunk_first.call(null, s__10781__$2);
              var size__4267__auto__ = cljs.core.count.call(null, c__4266__auto__);
              var b__10783 = cljs.core.chunk_buffer.call(null, size__4267__auto__);
              if (function() {
                var i__10782 = 0;
                while (true) {
                  if (i__10782 < size__4267__auto__) {
                    var i = cljs.core._nth.call(null, c__4266__auto__, i__10782);
                    cljs.core.chunk_append.call(null, b__10783, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i * roids.core.degree_max / sides + cljs.core.rand_int.call(null, 30), size + cljs.core.rand_int.call(null, size / 2 | 0)], null));
                    var G__10784 = i__10782 + 1;
                    i__10782 = G__10784;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10783), iter__10780.call(null, cljs.core.chunk_rest.call(null, s__10781__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10783), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__10781__$2);
              return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i * roids.core.degree_max / sides + cljs.core.rand_int.call(null, 30), size + cljs.core.rand_int.call(null, size / 2 | 0)], null), iter__10780.call(null, cljs.core.rest.call(null, s__10781__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4268__auto__.call(null, cljs.core.range.call(null, sides));
  }(), new cljs.core.Keyword(null, "posx", "posx", -2000946275), posx, new cljs.core.Keyword(null, "posy", "posy", -998153268), posy, new cljs.core.Keyword(null, "vel", "vel", -110770822), velocity, new cljs.core.Keyword(null, "dir", "dir", 1734754661), direction, new cljs.core.Keyword(null, "angle", "angle", 1622094254), 0, new cljs.core.Keyword(null, "rot", "rot", 757545242), rot], null);
};
roids.core.update_roid = function update_roid(roid) {
  var posx = (new cljs.core.Keyword(null, "posx", "posx", -2000946275)).cljs$core$IFn$_invoke$arity$1(roid) + Math.round.call(null, (new cljs.core.Keyword(null, "vel", "vel", -110770822)).cljs$core$IFn$_invoke$arity$1(roid) * roids.core.cos.call(null, (new cljs.core.Keyword(null, "dir", "dir", 1734754661)).cljs$core$IFn$_invoke$arity$1(roid)));
  var posy = (new cljs.core.Keyword(null, "posy", "posy", -998153268)).cljs$core$IFn$_invoke$arity$1(roid) + Math.round.call(null, (new cljs.core.Keyword(null, "vel", "vel", -110770822)).cljs$core$IFn$_invoke$arity$1(roid) * roids.core.sin.call(null, (new cljs.core.Keyword(null, "dir", "dir", 1734754661)).cljs$core$IFn$_invoke$arity$1(roid)));
  var posx__$1 = posx < -50 ? roids.core.width + 50 : posx;
  var posx__$2 = posx__$1 > roids.core.width + 50 ? -50 : posx__$1;
  var posy__$1 = posy < -50 ? roids.core.height + 50 : posy;
  var posy__$2 = posy__$1 > roids.core.height + 50 ? -50 : posy__$1;
  var rot_angle = (new cljs.core.Keyword(null, "angle", "angle", 1622094254)).cljs$core$IFn$_invoke$arity$1(roid) + (new cljs.core.Keyword(null, "rot", "rot", 757545242)).cljs$core$IFn$_invoke$arity$1(roid) & roids.core.degree_mask;
  return cljs.core.assoc.call(null, roid, new cljs.core.Keyword(null, "posx", "posx", -2000946275), posx__$2, new cljs.core.Keyword(null, "posy", "posy", -998153268), posy__$2, new cljs.core.Keyword(null, "angle", "angle", 1622094254), rot_angle);
};
roids.core.update_roids = function update_roids(roids__$1) {
  return cljs.core.vec.call(null, function() {
    var iter__4268__auto__ = function iter__10789(s__10790) {
      return new cljs.core.LazySeq(null, function() {
        var s__10790__$1 = s__10790;
        while (true) {
          var temp__4126__auto__ = cljs.core.seq.call(null, s__10790__$1);
          if (temp__4126__auto__) {
            var s__10790__$2 = temp__4126__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__10790__$2)) {
              var c__4266__auto__ = cljs.core.chunk_first.call(null, s__10790__$2);
              var size__4267__auto__ = cljs.core.count.call(null, c__4266__auto__);
              var b__10792 = cljs.core.chunk_buffer.call(null, size__4267__auto__);
              if (function() {
                var i__10791 = 0;
                while (true) {
                  if (i__10791 < size__4267__auto__) {
                    var roid = cljs.core._nth.call(null, c__4266__auto__, i__10791);
                    cljs.core.chunk_append.call(null, b__10792, roids.core.update_roid.call(null, roid));
                    var G__10793 = i__10791 + 1;
                    i__10791 = G__10793;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10792), iter__10789.call(null, cljs.core.chunk_rest.call(null, s__10790__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10792), null);
              }
            } else {
              var roid = cljs.core.first.call(null, s__10790__$2);
              return cljs.core.cons.call(null, roids.core.update_roid.call(null, roid), iter__10789.call(null, cljs.core.rest.call(null, s__10790__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__4268__auto__.call(null, roids__$1);
  }());
};
roids.core.draw_points = function draw_points(roid) {
  var points = (new cljs.core.Keyword(null, "points", "points", -1486596883)).cljs$core$IFn$_invoke$arity$1(roid);
  var rot_angle = (new cljs.core.Keyword(null, "angle", "angle", 1622094254)).cljs$core$IFn$_invoke$arity$1(roid);
  var posx = (new cljs.core.Keyword(null, "posx", "posx", -2000946275)).cljs$core$IFn$_invoke$arity$1(roid);
  var posy = (new cljs.core.Keyword(null, "posy", "posy", -998153268)).cljs$core$IFn$_invoke$arity$1(roid);
  var iter__4268__auto__ = function(points, rot_angle, posx, posy) {
    return function iter__10802(s__10803) {
      return new cljs.core.LazySeq(null, function(points, rot_angle, posx, posy) {
        return function() {
          var s__10803__$1 = s__10803;
          while (true) {
            var temp__4126__auto__ = cljs.core.seq.call(null, s__10803__$1);
            if (temp__4126__auto__) {
              var s__10803__$2 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__10803__$2)) {
                var c__4266__auto__ = cljs.core.chunk_first.call(null, s__10803__$2);
                var size__4267__auto__ = cljs.core.count.call(null, c__4266__auto__);
                var b__10805 = cljs.core.chunk_buffer.call(null, size__4267__auto__);
                if (function() {
                  var i__10804 = 0;
                  while (true) {
                    if (i__10804 < size__4267__auto__) {
                      var vec__10808 = cljs.core._nth.call(null, c__4266__auto__, i__10804);
                      var theta = cljs.core.nth.call(null, vec__10808, 0, null);
                      var len = cljs.core.nth.call(null, vec__10808, 1, null);
                      cljs.core.chunk_append.call(null, b__10805, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [posx + Math.round.call(null, len * roids.core.cos.call(null, theta, rot_angle)), posy + Math.round.call(null, len * roids.core.sin.call(null, theta, rot_angle))], null));
                      var G__10810 = i__10804 + 1;
                      i__10804 = G__10810;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10805), iter__10802.call(null, cljs.core.chunk_rest.call(null, s__10803__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__10805), null);
                }
              } else {
                var vec__10809 = cljs.core.first.call(null, s__10803__$2);
                var theta = cljs.core.nth.call(null, vec__10809, 0, null);
                var len = cljs.core.nth.call(null, vec__10809, 1, null);
                return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [posx + Math.round.call(null, len * roids.core.cos.call(null, theta, rot_angle)), posy + Math.round.call(null, len * roids.core.sin.call(null, theta, rot_angle))], null), iter__10802.call(null, cljs.core.rest.call(null, s__10803__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        };
      }(points, rot_angle, posx, posy), null, null);
    };
  }(points, rot_angle, posx, posy);
  return iter__4268__auto__.call(null, points);
};
roids.core.draw = function draw(roid) {
  var points = roids.core.draw_points.call(null, roid);
  var vec__10816 = cljs.core.first.call(null, points);
  var x = cljs.core.nth.call(null, vec__10816, 0, null);
  var y = cljs.core.nth.call(null, vec__10816, 1, null);
  var G__10817_10821 = roids.core.ctx;
  G__10817_10821.beginPath();
  G__10817_10821.moveTo(x, y);
  cljs.core.doall.call(null, cljs.core.map.call(null, function(points, vec__10816, x, y) {
    return function(p__10818) {
      var vec__10819 = p__10818;
      var x__$1 = cljs.core.nth.call(null, vec__10819, 0, null);
      var y__$1 = cljs.core.nth.call(null, vec__10819, 1, null);
      return roids.core.ctx.lineTo(x__$1, y__$1);
    };
  }(points, vec__10816, x, y), cljs.core.rest.call(null, points)));
  var G__10820 = roids.core.ctx;
  G__10820.closePath();
  G__10820["strokeStyle"] = "#ffffff";
  G__10820.stroke();
  return G__10820;
};
roids.core.render_roids = function render_roids(roids__$1) {
  var roids__$2 = roids__$1;
  while (true) {
    roids.core.draw.call(null, cljs.core.first.call(null, roids__$2));
    if (!cljs.core.empty_QMARK_.call(null, roids__$2)) {
      var G__10822 = cljs.core.rest.call(null, roids__$2);
      roids__$2 = G__10822;
      continue;
    } else {
      return null;
    }
    break;
  }
};
roids.core.render = function render(roids__$1) {
  var c__5708__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5708__auto__) {
    return function() {
      var f__5709__auto__ = function() {
        var switch__5693__auto__ = function(c__5708__auto__) {
          return function(state_10861) {
            var state_val_10862 = state_10861[1];
            if (state_val_10862 === 4) {
              var inst_10849 = state_10861[7];
              var inst_10855 = state_10861[2];
              var inst_10856 = roids.core.update_roids.call(null, inst_10849);
              var inst_10849__$1 = inst_10856;
              var state_10861__$1 = function() {
                var statearr_10863 = state_10861;
                statearr_10863[7] = inst_10849__$1;
                statearr_10863[8] = inst_10855;
                return statearr_10863;
              }();
              var statearr_10864_10875 = state_10861__$1;
              statearr_10864_10875[2] = null;
              statearr_10864_10875[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_10862 === 3) {
                var inst_10859 = state_10861[2];
                var state_10861__$1 = state_10861;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_10861__$1, inst_10859);
              } else {
                if (state_val_10862 === 2) {
                  var inst_10849 = state_10861[7];
                  var inst_10851 = function() {
                    var roids__$2 = inst_10849;
                    return function(roids__$2, inst_10849, state_val_10862, c__5708__auto__) {
                      return function(t) {
                        roids.core.canvas["width"] = roids.core.canvas["width"];
                        return roids.core.render_roids.call(null, roids__$2);
                      };
                    }(roids__$2, inst_10849, state_val_10862, c__5708__auto__);
                  }();
                  var inst_10852 = window.requestAnimationFrame(inst_10851);
                  var inst_10853 = cljs.core.async.timeout.call(null, 33);
                  var state_10861__$1 = function() {
                    var statearr_10865 = state_10861;
                    statearr_10865[9] = inst_10852;
                    return statearr_10865;
                  }();
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_10861__$1, 4, inst_10853);
                } else {
                  if (state_val_10862 === 1) {
                    var inst_10849 = roids__$1;
                    var state_10861__$1 = function() {
                      var statearr_10866 = state_10861;
                      statearr_10866[7] = inst_10849;
                      return statearr_10866;
                    }();
                    var statearr_10867_10876 = state_10861__$1;
                    statearr_10867_10876[2] = null;
                    statearr_10867_10876[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    return null;
                  }
                }
              }
            }
          };
        }(c__5708__auto__);
        return function(switch__5693__auto__, c__5708__auto__) {
          return function() {
            var state_machine__5694__auto__ = null;
            var state_machine__5694__auto____0 = function() {
              var statearr_10871 = [null, null, null, null, null, null, null, null, null, null];
              statearr_10871[0] = state_machine__5694__auto__;
              statearr_10871[1] = 1;
              return statearr_10871;
            };
            var state_machine__5694__auto____1 = function(state_10861) {
              while (true) {
                var ret_value__5695__auto__ = function() {
                  try {
                    while (true) {
                      var result__5696__auto__ = switch__5693__auto__.call(null, state_10861);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5696__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5696__auto__;
                      }
                      break;
                    }
                  } catch (e10872) {
                    if (e10872 instanceof Object) {
                      var ex__5697__auto__ = e10872;
                      var statearr_10873_10877 = state_10861;
                      statearr_10873_10877[5] = ex__5697__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_10861);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", -1508377146)) {
                        throw e10872;
                      } else {
                        return null;
                      }
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5695__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__10878 = state_10861;
                  state_10861 = G__10878;
                  continue;
                } else {
                  return ret_value__5695__auto__;
                }
                break;
              }
            };
            state_machine__5694__auto__ = function(state_10861) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5694__auto____0.call(this);
                case 1:
                  return state_machine__5694__auto____1.call(this, state_10861);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5694__auto____0;
            state_machine__5694__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5694__auto____1;
            return state_machine__5694__auto__;
          }();
        }(switch__5693__auto__, c__5708__auto__);
      }();
      var state__5710__auto__ = function() {
        var statearr_10874 = f__5709__auto__.call(null);
        statearr_10874[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5708__auto__;
        return statearr_10874;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5710__auto__);
    };
  }(c__5708__auto__));
  return c__5708__auto__;
};
roids.core.rotation = function rotation(min, max) {
  var r1 = cljs.core.range.call(null, ~(max - 1), ~(min - 1));
  var r2 = cljs.core.range.call(null, min, max + 1);
  return cljs.core.rand_nth.call(null, cljs.core.into.call(null, r1, r2));
};
roids.core.render.call(null, new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [roids.core.createroid.call(null, 9, 50, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 1 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 1, 2)), roids.core.createroid.call(null, 9, 50, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
1 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 1, 2)), roids.core.createroid.call(null, 9, 50, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 1 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 1, 2)), roids.core.createroid.call(null, 9, 50, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
1 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 1, 2)), roids.core.createroid.call(null, 7, 20, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 3 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 3, 4)), roids.core.createroid.call(null, 7, 20, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
3 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 3, 4)), roids.core.createroid.call(null, 7, 20, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 3 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 3, 4)), roids.core.createroid.call(null, 7, 20, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
3 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 3, 4)), roids.core.createroid.call(null, 5, 6, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 5 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 11, 15)), roids.core.createroid.call(null, 5, 6, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
5 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 11, 15)), roids.core.createroid.call(null, 5, 6, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 5 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 11, 15)), roids.core.createroid.call(null, 5, 6, cljs.core.rand_int.call(null, roids.core.width), cljs.core.rand_int.call(null, roids.core.height), 
5 + cljs.core.rand_int.call(null, 3), cljs.core.rand_int.call(null, 512), roids.core.rotation.call(null, 11, 15))], null));
